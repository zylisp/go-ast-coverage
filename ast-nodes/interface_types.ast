=== AST for interface_types.go ===

File Information:
  Package: main
  Position: go-nodes/interface_types.go:3:1
  Imports:
    "fmt"
  Comment Groups: 28
  Declarations: 31

=== AST Node Tree ===

*ast.File (go-nodes/interface_types.go:3:1)
  Package: main
  *ast.GenDecl (go-nodes/interface_types.go:5:1) Token: import
    *ast.ImportSpec (go-nodes/interface_types.go:5:8)
      Path: "fmt"
  *ast.GenDecl (go-nodes/interface_types.go:13:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:13:6)
      Name: Any
      Type:
        *ast.InterfaceType (go-nodes/interface_types.go:13:10)
          *ast.FieldList (go-nodes/interface_types.go:13:19) NumFields: 0
  *ast.GenDecl (go-nodes/interface_types.go:16:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:16:6)
      Name: Reader
      Type:
        *ast.InterfaceType (go-nodes/interface_types.go:16:13)
          *ast.FieldList (go-nodes/interface_types.go:16:22) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:17:2)
                Name: Read
                Type:
                  *ast.FuncType (go-nodes/interface_types.go:17:6)
                    Params:
                      *ast.FieldList (go-nodes/interface_types.go:17:6) NumFields: 0
                    Results:
                      *ast.FieldList (go-nodes/interface_types.go:17:9) NumFields: 1
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:17:9)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:17:9) Name: string
  *ast.GenDecl (go-nodes/interface_types.go:21:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:21:6)
      Name: ReadWriter
      Type:
        *ast.InterfaceType (go-nodes/interface_types.go:21:17)
          *ast.FieldList (go-nodes/interface_types.go:21:27) NumFields: 2
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:22:2)
                Name: Read
                Type:
                  *ast.FuncType (go-nodes/interface_types.go:22:6)
                    Params:
                      *ast.FieldList (go-nodes/interface_types.go:22:6) NumFields: 0
                    Results:
                      *ast.FieldList (go-nodes/interface_types.go:22:9) NumFields: 1
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:22:9)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:22:9) Name: string
            Field[1]:
              *ast.Field (go-nodes/interface_types.go:23:2)
                Name: Write
                Type:
                  *ast.FuncType (go-nodes/interface_types.go:23:7)
                    Params:
                      *ast.FieldList (go-nodes/interface_types.go:23:7) NumFields: 1
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:23:8)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:23:8) Name: string
                    Results:
                      *ast.FieldList (go-nodes/interface_types.go:23:16) NumFields: 1
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:23:16)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:23:16) Name: error
  *ast.GenDecl (go-nodes/interface_types.go:27:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:27:6)
      Name: Calculator
      Type:
        *ast.InterfaceType (go-nodes/interface_types.go:27:17)
          *ast.FieldList (go-nodes/interface_types.go:27:27) NumFields: 3
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:28:2)
                Name: Add
                Type:
                  *ast.FuncType (go-nodes/interface_types.go:28:5)
                    Params:
                      *ast.FieldList (go-nodes/interface_types.go:28:5) NumFields: 2
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:28:6)
                            Name: a
                            Name: b
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:28:11) Name: int
                    Results:
                      *ast.FieldList (go-nodes/interface_types.go:28:16) NumFields: 1
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:28:16)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:28:16) Name: int
            Field[1]:
              *ast.Field (go-nodes/interface_types.go:29:2)
                Name: Subtract
                Type:
                  *ast.FuncType (go-nodes/interface_types.go:29:10)
                    Params:
                      *ast.FieldList (go-nodes/interface_types.go:29:10) NumFields: 2
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:29:11)
                            Name: x
                            Name: y
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:29:16) Name: int
                    Results:
                      *ast.FieldList (go-nodes/interface_types.go:29:21) NumFields: 1
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:29:21)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:29:21) Name: int
            Field[2]:
              *ast.Field (go-nodes/interface_types.go:30:2)
                Name: Multiply
                Type:
                  *ast.FuncType (go-nodes/interface_types.go:30:10)
                    Params:
                      *ast.FieldList (go-nodes/interface_types.go:30:10) NumFields: 2
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:30:11)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:30:11) Name: int
                        Field[1]:
                          *ast.Field (go-nodes/interface_types.go:30:16)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:30:16) Name: int
                    Results:
                      *ast.FieldList (go-nodes/interface_types.go:30:21) NumFields: 1
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:30:21)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:30:21) Name: int
  *ast.GenDecl (go-nodes/interface_types.go:34:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:34:6)
      Name: Closer
      Type:
        *ast.InterfaceType (go-nodes/interface_types.go:34:13)
          *ast.FieldList (go-nodes/interface_types.go:34:23) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:35:2)
                Name: Close
                Type:
                  *ast.FuncType (go-nodes/interface_types.go:35:7)
                    Params:
                      *ast.FieldList (go-nodes/interface_types.go:35:7) NumFields: 0
                    Results:
                      *ast.FieldList (go-nodes/interface_types.go:35:10) NumFields: 1
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:35:10)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:35:10) Name: error
  *ast.GenDecl (go-nodes/interface_types.go:38:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:38:6)
      Name: ReadWriteCloser
      Type:
        *ast.InterfaceType (go-nodes/interface_types.go:38:22)
          *ast.FieldList (go-nodes/interface_types.go:38:32) NumFields: 3
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:39:2)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:39:2) Name: Reader
            Field[1]:
              *ast.Field (go-nodes/interface_types.go:40:2)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:40:2) Name: Writer
            Field[2]:
              *ast.Field (go-nodes/interface_types.go:41:2)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:41:2) Name: Closer
  *ast.GenDecl (go-nodes/interface_types.go:44:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:44:6)
      Name: Writer
      Type:
        *ast.InterfaceType (go-nodes/interface_types.go:44:13)
          *ast.FieldList (go-nodes/interface_types.go:44:23) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:45:2)
                Name: Write
                Type:
                  *ast.FuncType (go-nodes/interface_types.go:45:7)
                    Params:
                      *ast.FieldList (go-nodes/interface_types.go:45:7) NumFields: 1
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:45:8)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:45:8) Name: string
                    Results:
                      *ast.FieldList (go-nodes/interface_types.go:45:16) NumFields: 1
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:45:16)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:45:16) Name: error
  *ast.GenDecl (go-nodes/interface_types.go:49:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:49:6)
      Name: Logger
      Type:
        *ast.InterfaceType (go-nodes/interface_types.go:49:13)
          *ast.FieldList (go-nodes/interface_types.go:49:23) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:50:2)
                Name: Log
                Type:
                  *ast.FuncType (go-nodes/interface_types.go:50:5)
                    Params:
                      *ast.FieldList (go-nodes/interface_types.go:50:5) NumFields: 2
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:50:6)
                            Name: format
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:50:13) Name: string
                        Field[1]:
                          *ast.Field (go-nodes/interface_types.go:50:21)
                            Name: args
                            Type:
                              *ast.Ellipsis (go-nodes/interface_types.go:50:26)
  *ast.GenDecl (go-nodes/interface_types.go:54:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:54:6)
      Name: Ordered
      Type:
        *ast.InterfaceType (go-nodes/interface_types.go:54:14)
          *ast.FieldList (go-nodes/interface_types.go:54:24) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:55:2)
                Type:
                  *ast.BinaryExpr (go-nodes/interface_types.go:55:2) Op: |
                    X:
                      *ast.BinaryExpr (go-nodes/interface_types.go:55:2) Op: |
                        X:
                          *ast.BinaryExpr (go-nodes/interface_types.go:55:2) Op: |
                            X:
                              *ast.BinaryExpr (go-nodes/interface_types.go:55:2) Op: |
                                X:
                                  *ast.BinaryExpr (go-nodes/interface_types.go:55:2) Op: |
                                    X:
                                      *ast.BinaryExpr (go-nodes/interface_types.go:55:2) Op: |
                                        X:
                                          *ast.BinaryExpr (go-nodes/interface_types.go:55:2) Op: |
                                            X:
                                              *ast.BinaryExpr (go-nodes/interface_types.go:55:2) Op: |
                                                X:
                                                  *ast.BinaryExpr (go-nodes/interface_types.go:55:2) Op: |
                                                    X:
                                                      *ast.BinaryExpr (go-nodes/interface_types.go:55:2) Op: |
                                                        X:
                                                          *ast.BinaryExpr (go-nodes/interface_types.go:55:2) Op: |
                                                            X:
                                                              *ast.BinaryExpr (go-nodes/interface_types.go:55:2) Op: |
                                                                X:
                                                                  *ast.UnaryExpr (go-nodes/interface_types.go:55:2) Op: ~
                                                                    X:
                                                                      *ast.Ident (go-nodes/interface_types.go:55:3) Name: int
                                                                Y:
                                                                  *ast.UnaryExpr (go-nodes/interface_types.go:55:9) Op: ~
                                                                    X:
                                                                      *ast.Ident (go-nodes/interface_types.go:55:10) Name: int8
                                                            Y:
                                                              *ast.UnaryExpr (go-nodes/interface_types.go:55:17) Op: ~
                                                                X:
                                                                  *ast.Ident (go-nodes/interface_types.go:55:18) Name: int16
                                                        Y:
                                                          *ast.UnaryExpr (go-nodes/interface_types.go:55:26) Op: ~
                                                            X:
                                                              *ast.Ident (go-nodes/interface_types.go:55:27) Name: int32
                                                    Y:
                                                      *ast.UnaryExpr (go-nodes/interface_types.go:55:35) Op: ~
                                                        X:
                                                          *ast.Ident (go-nodes/interface_types.go:55:36) Name: int64
                                                Y:
                                                  *ast.UnaryExpr (go-nodes/interface_types.go:56:3) Op: ~
                                                    X:
                                                      *ast.Ident (go-nodes/interface_types.go:56:4) Name: uint
                                            Y:
                                              *ast.UnaryExpr (go-nodes/interface_types.go:56:11) Op: ~
                                                X:
                                                  *ast.Ident (go-nodes/interface_types.go:56:12) Name: uint8
                                        Y:
                                          *ast.UnaryExpr (go-nodes/interface_types.go:56:20) Op: ~
                                            X:
                                              *ast.Ident (go-nodes/interface_types.go:56:21) Name: uint16
                                    Y:
                                      *ast.UnaryExpr (go-nodes/interface_types.go:56:30) Op: ~
                                        X:
                                          *ast.Ident (go-nodes/interface_types.go:56:31) Name: uint32
                                Y:
                                  *ast.UnaryExpr (go-nodes/interface_types.go:56:40) Op: ~
                                    X:
                                      *ast.Ident (go-nodes/interface_types.go:56:41) Name: uint64
                            Y:
                              *ast.UnaryExpr (go-nodes/interface_types.go:57:3) Op: ~
                                X:
                                  *ast.Ident (go-nodes/interface_types.go:57:4) Name: float32
                        Y:
                          *ast.UnaryExpr (go-nodes/interface_types.go:57:14) Op: ~
                            X:
                              *ast.Ident (go-nodes/interface_types.go:57:15) Name: float64
                    Y:
                      *ast.UnaryExpr (go-nodes/interface_types.go:58:3) Op: ~
                        X:
                          *ast.Ident (go-nodes/interface_types.go:58:4) Name: string
  *ast.GenDecl (go-nodes/interface_types.go:62:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:62:6)
      Name: Stringable
      Type:
        *ast.InterfaceType (go-nodes/interface_types.go:62:17)
          *ast.FieldList (go-nodes/interface_types.go:62:27) NumFields: 2
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:63:2)
                Type:
                  *ast.BinaryExpr (go-nodes/interface_types.go:63:2) Op: |
                    X:
                      *ast.BinaryExpr (go-nodes/interface_types.go:63:2) Op: |
                        X:
                          *ast.UnaryExpr (go-nodes/interface_types.go:63:2) Op: ~
                            X:
                              *ast.Ident (go-nodes/interface_types.go:63:3) Name: string
                        Y:
                          *ast.UnaryExpr (go-nodes/interface_types.go:63:12) Op: ~
                            X:
                              *ast.Ident (go-nodes/interface_types.go:63:13) Name: int
                    Y:
                      *ast.UnaryExpr (go-nodes/interface_types.go:63:19) Op: ~
                        X:
                          *ast.Ident (go-nodes/interface_types.go:63:20) Name: bool
            Field[1]:
              *ast.Field (go-nodes/interface_types.go:64:2)
                Name: String
                Type:
                  *ast.FuncType (go-nodes/interface_types.go:64:8)
                    Params:
                      *ast.FieldList (go-nodes/interface_types.go:64:8) NumFields: 0
                    Results:
                      *ast.FieldList (go-nodes/interface_types.go:64:11) NumFields: 1
                        Field[0]:
                          *ast.Field (go-nodes/interface_types.go:64:11)
                            Type:
                              *ast.Ident (go-nodes/interface_types.go:64:11) Name: string
  *ast.GenDecl (go-nodes/interface_types.go:68:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:68:6)
      Name: MyComparable
      Type:
        *ast.InterfaceType (go-nodes/interface_types.go:68:19)
          *ast.FieldList (go-nodes/interface_types.go:68:29) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:69:2)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:69:2) Name: comparable
  *ast.GenDecl (go-nodes/interface_types.go:73:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:73:6)
      Name: AnyType
      Type:
        *ast.InterfaceType (go-nodes/interface_types.go:73:14)
          *ast.FieldList (go-nodes/interface_types.go:73:24) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:74:2)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:74:2) Name: any
  *ast.FuncDecl (go-nodes/interface_types.go:77:1)
    Name: funcMain
    Type:
      *ast.FuncType (go-nodes/interface_types.go:77:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:77:14) NumFields: 0
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:77:17) Stmts: 64
        *ast.ExprStmt (go-nodes/interface_types.go:78:2)
          *ast.CallExpr (go-nodes/interface_types.go:78:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:78:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:78:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:78:14) Kind: STRING Value: "=== interface_types.go AST Node Coverage ==="
        *ast.ExprStmt (go-nodes/interface_types.go:79:2)
          *ast.CallExpr (go-nodes/interface_types.go:79:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:79:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:79:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:79:14) Kind: STRING Value: "Exercising AST Nodes:"
        *ast.ExprStmt (go-nodes/interface_types.go:82:2)
          *ast.CallExpr (go-nodes/interface_types.go:82:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:82:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:82:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:82:14) Kind: STRING Value: "  ✓ ast.InterfaceType (empty):"
        *ast.DeclStmt (go-nodes/interface_types.go:83:2)
          *ast.GenDecl (go-nodes/interface_types.go:83:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:83:6)
              Name: a
              Type:
                *ast.Ident (go-nodes/interface_types.go:83:8) Name: Any
              Value[0]:
                *ast.BasicLit (go-nodes/interface_types.go:83:14) Kind: INT Value: 42
        *ast.DeclStmt (go-nodes/interface_types.go:84:2)
          *ast.GenDecl (go-nodes/interface_types.go:84:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:84:6)
              Name: b
              Type:
                *ast.Ident (go-nodes/interface_types.go:84:8) Name: Any
              Value[0]:
                *ast.BasicLit (go-nodes/interface_types.go:84:14) Kind: STRING Value: "string"
        *ast.DeclStmt (go-nodes/interface_types.go:85:2)
          *ast.GenDecl (go-nodes/interface_types.go:85:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:85:6)
              Name: c
              Type:
                *ast.Ident (go-nodes/interface_types.go:85:8) Name: Any
              Value[0]:
                *ast.Ident (go-nodes/interface_types.go:85:14) Name: true
        *ast.ExprStmt (go-nodes/interface_types.go:86:2)
          *ast.CallExpr (go-nodes/interface_types.go:86:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:86:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:86:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:86:13) Kind: STRING Value: "    Any can hold int: %v\n"
              [1]:
                *ast.Ident (go-nodes/interface_types.go:86:43) Name: a
        *ast.ExprStmt (go-nodes/interface_types.go:87:2)
          *ast.CallExpr (go-nodes/interface_types.go:87:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:87:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:87:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:87:13) Kind: STRING Value: "    Any can hold string: %v\n"
              [1]:
                *ast.Ident (go-nodes/interface_types.go:87:46) Name: b
        *ast.ExprStmt (go-nodes/interface_types.go:88:2)
          *ast.CallExpr (go-nodes/interface_types.go:88:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:88:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:88:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:88:13) Kind: STRING Value: "    Any can hold bool: %v\n"
              [1]:
                *ast.Ident (go-nodes/interface_types.go:88:44) Name: c
        *ast.ExprStmt (go-nodes/interface_types.go:91:2)
          *ast.CallExpr (go-nodes/interface_types.go:91:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:91:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:91:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:91:14) Kind: STRING Value: "  ✓ ast.InterfaceType (single method):"
        *ast.DeclStmt (go-nodes/interface_types.go:92:2)
          *ast.GenDecl (go-nodes/interface_types.go:92:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:92:6)
              Name: r
              Type:
                *ast.Ident (go-nodes/interface_types.go:92:8) Name: Reader
              Value[0]:
                *ast.CompositeLit (go-nodes/interface_types.go:92:17)
                  Type:
                    *ast.Ident (go-nodes/interface_types.go:92:17) Name: StringReader
                  Elts:
                    [0]:
                      *ast.KeyValueExpr (go-nodes/interface_types.go:92:30)
        *ast.ExprStmt (go-nodes/interface_types.go:93:2)
          *ast.CallExpr (go-nodes/interface_types.go:93:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:93:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:93:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:93:13) Kind: STRING Value: "    Reader.Read(): %s\n"
              [1]:
                *ast.CallExpr (go-nodes/interface_types.go:93:40)
                  Fun:
                    *ast.SelectorExpr (go-nodes/interface_types.go:93:40)
                      X:
                        *ast.Ident (go-nodes/interface_types.go:93:40) Name: r
                      Sel: Read
        *ast.ExprStmt (go-nodes/interface_types.go:96:2)
          *ast.CallExpr (go-nodes/interface_types.go:96:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:96:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:96:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:96:14) Kind: STRING Value: "  ✓ ast.InterfaceType (multiple methods):"
        *ast.DeclStmt (go-nodes/interface_types.go:97:2)
          *ast.GenDecl (go-nodes/interface_types.go:97:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:97:6)
              Name: rw
              Type:
                *ast.Ident (go-nodes/interface_types.go:97:9) Name: ReadWriter
              Value[0]:
                *ast.UnaryExpr (go-nodes/interface_types.go:97:22) Op: &
                  X:
                    *ast.CompositeLit (go-nodes/interface_types.go:97:23)
                      Type:
                        *ast.Ident (go-nodes/interface_types.go:97:23) Name: Buffer
                      Elts:
                        [0]:
                          *ast.KeyValueExpr (go-nodes/interface_types.go:97:30)
        *ast.ExprStmt (go-nodes/interface_types.go:98:2)
          *ast.CallExpr (go-nodes/interface_types.go:98:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:98:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:98:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:98:13) Kind: STRING Value: "    ReadWriter.Read(): %s\n"
              [1]:
                *ast.CallExpr (go-nodes/interface_types.go:98:44)
                  Fun:
                    *ast.SelectorExpr (go-nodes/interface_types.go:98:44)
                      X:
                        *ast.Ident (go-nodes/interface_types.go:98:44) Name: rw
                      Sel: Read
        *ast.AssignStmt (go-nodes/interface_types.go:99:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/interface_types.go:99:2) Name: err
          RHS:
            *ast.CallExpr (go-nodes/interface_types.go:99:9)
              Fun:
                *ast.SelectorExpr (go-nodes/interface_types.go:99:9)
                  X:
                    *ast.Ident (go-nodes/interface_types.go:99:9) Name: rw
                  Sel: Write
              Args:
                [0]:
                  *ast.BasicLit (go-nodes/interface_types.go:99:18) Kind: STRING Value: "modified"
        *ast.ExprStmt (go-nodes/interface_types.go:100:2)
          *ast.CallExpr (go-nodes/interface_types.go:100:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:100:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:100:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:100:13) Kind: STRING Value: "    ReadWriter.Write(): error=%v, result=%s\n"
              [1]:
                *ast.Ident (go-nodes/interface_types.go:100:62) Name: err
              [2]:
                *ast.CallExpr (go-nodes/interface_types.go:100:67)
                  Fun:
                    *ast.SelectorExpr (go-nodes/interface_types.go:100:67)
                      X:
                        *ast.Ident (go-nodes/interface_types.go:100:67) Name: rw
                      Sel: Read
        *ast.ExprStmt (go-nodes/interface_types.go:103:2)
          *ast.CallExpr (go-nodes/interface_types.go:103:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:103:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:103:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:103:14) Kind: STRING Value: "  ✓ ast.InterfaceType with ast.Field (named parameters):"
        *ast.DeclStmt (go-nodes/interface_types.go:104:2)
          *ast.GenDecl (go-nodes/interface_types.go:104:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:104:6)
              Name: calc
              Type:
                *ast.Ident (go-nodes/interface_types.go:104:11) Name: Calculator
              Value[0]:
                *ast.CompositeLit (go-nodes/interface_types.go:104:24)
                  Type:
                    *ast.Ident (go-nodes/interface_types.go:104:24) Name: BasicCalculator
        *ast.ExprStmt (go-nodes/interface_types.go:105:2)
          *ast.CallExpr (go-nodes/interface_types.go:105:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:105:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:105:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:105:13) Kind: STRING Value: "    Calculator.Add(5, 3): %d\n"
              [1]:
                *ast.CallExpr (go-nodes/interface_types.go:105:47)
                  Fun:
                    *ast.SelectorExpr (go-nodes/interface_types.go:105:47)
                      X:
                        *ast.Ident (go-nodes/interface_types.go:105:47) Name: calc
                      Sel: Add
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/interface_types.go:105:56) Kind: INT Value: 5
                    [1]:
                      *ast.BasicLit (go-nodes/interface_types.go:105:59) Kind: INT Value: 3
        *ast.ExprStmt (go-nodes/interface_types.go:106:2)
          *ast.CallExpr (go-nodes/interface_types.go:106:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:106:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:106:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:106:13) Kind: STRING Value: "    Calculator.Subtract(10, 4): %d\n"
              [1]:
                *ast.CallExpr (go-nodes/interface_types.go:106:53)
                  Fun:
                    *ast.SelectorExpr (go-nodes/interface_types.go:106:53)
                      X:
                        *ast.Ident (go-nodes/interface_types.go:106:53) Name: calc
                      Sel: Subtract
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/interface_types.go:106:67) Kind: INT Value: 10
                    [1]:
                      *ast.BasicLit (go-nodes/interface_types.go:106:71) Kind: INT Value: 4
        *ast.ExprStmt (go-nodes/interface_types.go:107:2)
          *ast.CallExpr (go-nodes/interface_types.go:107:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:107:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:107:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:107:13) Kind: STRING Value: "    Calculator.Multiply(6, 7): %d\n"
              [1]:
                *ast.CallExpr (go-nodes/interface_types.go:107:52)
                  Fun:
                    *ast.SelectorExpr (go-nodes/interface_types.go:107:52)
                      X:
                        *ast.Ident (go-nodes/interface_types.go:107:52) Name: calc
                      Sel: Multiply
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/interface_types.go:107:66) Kind: INT Value: 6
                    [1]:
                      *ast.BasicLit (go-nodes/interface_types.go:107:69) Kind: INT Value: 7
        *ast.ExprStmt (go-nodes/interface_types.go:110:2)
          *ast.CallExpr (go-nodes/interface_types.go:110:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:110:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:110:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:110:14) Kind: STRING Value: "  ✓ ast.InterfaceType (embedded):"
        *ast.DeclStmt (go-nodes/interface_types.go:111:2)
          *ast.GenDecl (go-nodes/interface_types.go:111:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:111:6)
              Name: rwc
              Type:
                *ast.Ident (go-nodes/interface_types.go:111:10) Name: ReadWriteCloser
              Value[0]:
                *ast.UnaryExpr (go-nodes/interface_types.go:111:28) Op: &
                  X:
                    *ast.CompositeLit (go-nodes/interface_types.go:111:29)
                      Type:
                        *ast.Ident (go-nodes/interface_types.go:111:29) Name: FileHandle
                      Elts:
                        [0]:
                          *ast.KeyValueExpr (go-nodes/interface_types.go:112:3)
                        [1]:
                          *ast.KeyValueExpr (go-nodes/interface_types.go:113:3)
        *ast.ExprStmt (go-nodes/interface_types.go:115:2)
          *ast.CallExpr (go-nodes/interface_types.go:115:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:115:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:115:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:115:13) Kind: STRING Value: "    ReadWriteCloser.Read(): %s\n"
              [1]:
                *ast.CallExpr (go-nodes/interface_types.go:115:49)
                  Fun:
                    *ast.SelectorExpr (go-nodes/interface_types.go:115:49)
                      X:
                        *ast.Ident (go-nodes/interface_types.go:115:49) Name: rwc
                      Sel: Read
        *ast.AssignStmt (go-nodes/interface_types.go:116:2) Token: =
          LHS:
            *ast.Ident (go-nodes/interface_types.go:116:2) Name: _
          RHS:
            *ast.CallExpr (go-nodes/interface_types.go:116:6)
              Fun:
                *ast.SelectorExpr (go-nodes/interface_types.go:116:6)
                  X:
                    *ast.Ident (go-nodes/interface_types.go:116:6) Name: rwc
                  Sel: Write
              Args:
                [0]:
                  *ast.BasicLit (go-nodes/interface_types.go:116:16) Kind: STRING Value: "new content"
        *ast.ExprStmt (go-nodes/interface_types.go:117:2)
          *ast.CallExpr (go-nodes/interface_types.go:117:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:117:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:117:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:117:13) Kind: STRING Value: "    After Write: %s\n"
              [1]:
                *ast.CallExpr (go-nodes/interface_types.go:117:38)
                  Fun:
                    *ast.SelectorExpr (go-nodes/interface_types.go:117:38)
                      X:
                        *ast.Ident (go-nodes/interface_types.go:117:38) Name: rwc
                      Sel: Read
        *ast.AssignStmt (go-nodes/interface_types.go:118:2) Token: =
          LHS:
            *ast.Ident (go-nodes/interface_types.go:118:2) Name: _
          RHS:
            *ast.CallExpr (go-nodes/interface_types.go:118:6)
              Fun:
                *ast.SelectorExpr (go-nodes/interface_types.go:118:6)
                  X:
                    *ast.Ident (go-nodes/interface_types.go:118:6) Name: rwc
                  Sel: Close
        *ast.ExprStmt (go-nodes/interface_types.go:119:2)
          *ast.CallExpr (go-nodes/interface_types.go:119:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:119:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:119:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:119:13) Kind: STRING Value: "    ReadWriteCloser.Close(): file closed\n"
        *ast.ExprStmt (go-nodes/interface_types.go:122:2)
          *ast.CallExpr (go-nodes/interface_types.go:122:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:122:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:122:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:122:14) Kind: STRING Value: "  ✓ ast.InterfaceType (variadic method):"
        *ast.DeclStmt (go-nodes/interface_types.go:123:2)
          *ast.GenDecl (go-nodes/interface_types.go:123:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:123:6)
              Name: logger
              Type:
                *ast.Ident (go-nodes/interface_types.go:123:13) Name: Logger
              Value[0]:
                *ast.CompositeLit (go-nodes/interface_types.go:123:22)
                  Type:
                    *ast.Ident (go-nodes/interface_types.go:123:22) Name: SimpleLogger
        *ast.ExprStmt (go-nodes/interface_types.go:124:2)
          *ast.CallExpr (go-nodes/interface_types.go:124:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:124:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:124:2) Name: logger
                Sel: Log
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:124:13) Kind: STRING Value: "Message: %s, Number: %d"
              [1]:
                *ast.BasicLit (go-nodes/interface_types.go:124:40) Kind: STRING Value: "test"
              [2]:
                *ast.BasicLit (go-nodes/interface_types.go:124:48) Kind: INT Value: 42
        *ast.ExprStmt (go-nodes/interface_types.go:127:2)
          *ast.CallExpr (go-nodes/interface_types.go:127:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:127:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:127:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:127:14) Kind: STRING Value: "  ✓ Interface type assertion:"
        *ast.DeclStmt (go-nodes/interface_types.go:128:2)
          *ast.GenDecl (go-nodes/interface_types.go:128:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:128:6)
              Name: iface
              Type:
                *ast.InterfaceType (go-nodes/interface_types.go:128:12)
                  *ast.FieldList (go-nodes/interface_types.go:128:21) NumFields: 0
              Value[0]:
                *ast.BasicLit (go-nodes/interface_types.go:128:26) Kind: STRING Value: "hello"
        *ast.AssignStmt (go-nodes/interface_types.go:129:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/interface_types.go:129:2) Name: str
            *ast.Ident (go-nodes/interface_types.go:129:7) Name: ok
          RHS:
            *ast.TypeAssertExpr (go-nodes/interface_types.go:129:13)
        *ast.ExprStmt (go-nodes/interface_types.go:130:2)
          *ast.CallExpr (go-nodes/interface_types.go:130:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:130:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:130:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:130:13) Kind: STRING Value: "    Type assertion (string): %q, ok=%v\n"
              [1]:
                *ast.Ident (go-nodes/interface_types.go:130:57) Name: str
              [2]:
                *ast.Ident (go-nodes/interface_types.go:130:62) Name: ok
        *ast.AssignStmt (go-nodes/interface_types.go:131:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/interface_types.go:131:2) Name: num
            *ast.Ident (go-nodes/interface_types.go:131:7) Name: ok
          RHS:
            *ast.TypeAssertExpr (go-nodes/interface_types.go:131:13)
        *ast.ExprStmt (go-nodes/interface_types.go:132:2)
          *ast.CallExpr (go-nodes/interface_types.go:132:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:132:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:132:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:132:13) Kind: STRING Value: "    Type assertion (int): %d, ok=%v\n"
              [1]:
                *ast.Ident (go-nodes/interface_types.go:132:54) Name: num
              [2]:
                *ast.Ident (go-nodes/interface_types.go:132:59) Name: ok
        *ast.ExprStmt (go-nodes/interface_types.go:135:2)
          *ast.CallExpr (go-nodes/interface_types.go:135:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:135:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:135:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:135:14) Kind: STRING Value: "  ✓ Interface type switch:"
        *ast.ExprStmt (go-nodes/interface_types.go:136:2)
          *ast.CallExpr (go-nodes/interface_types.go:136:2)
            Fun:
              *ast.Ident (go-nodes/interface_types.go:136:2) Name: describeType
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:136:15) Kind: INT Value: 42
        *ast.ExprStmt (go-nodes/interface_types.go:137:2)
          *ast.CallExpr (go-nodes/interface_types.go:137:2)
            Fun:
              *ast.Ident (go-nodes/interface_types.go:137:2) Name: describeType
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:137:15) Kind: STRING Value: "hello"
        *ast.ExprStmt (go-nodes/interface_types.go:138:2)
          *ast.CallExpr (go-nodes/interface_types.go:138:2)
            Fun:
              *ast.Ident (go-nodes/interface_types.go:138:2) Name: describeType
            Args:
              [0]:
                *ast.Ident (go-nodes/interface_types.go:138:15) Name: true
        *ast.ExprStmt (go-nodes/interface_types.go:139:2)
          *ast.CallExpr (go-nodes/interface_types.go:139:2)
            Fun:
              *ast.Ident (go-nodes/interface_types.go:139:2) Name: describeType
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:139:15) Kind: FLOAT Value: 3.14
        *ast.ExprStmt (go-nodes/interface_types.go:142:2)
          *ast.CallExpr (go-nodes/interface_types.go:142:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:142:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:142:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:142:14) Kind: STRING Value: "  ✓ Interface nil handling:"
        *ast.DeclStmt (go-nodes/interface_types.go:143:2)
          *ast.GenDecl (go-nodes/interface_types.go:143:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:143:6)
              Name: nilReader
              Type:
                *ast.Ident (go-nodes/interface_types.go:143:16) Name: Reader
              Value[0]:
                *ast.Ident (go-nodes/interface_types.go:143:25) Name: nil
        *ast.ExprStmt (go-nodes/interface_types.go:144:2)
          *ast.CallExpr (go-nodes/interface_types.go:144:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:144:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:144:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:144:13) Kind: STRING Value: "    nil interface: %v, is nil: %v\n"
              [1]:
                *ast.Ident (go-nodes/interface_types.go:144:52) Name: nilReader
              [2]:
                *ast.BinaryExpr (go-nodes/interface_types.go:144:63) Op: ==
                  X:
                    *ast.Ident (go-nodes/interface_types.go:144:63) Name: nilReader
                  Y:
                    *ast.Ident (go-nodes/interface_types.go:144:76) Name: nil
        *ast.DeclStmt (go-nodes/interface_types.go:147:2)
          *ast.GenDecl (go-nodes/interface_types.go:147:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:147:6)
              Name: nilPtr
              Type:
                *ast.StarExpr (go-nodes/interface_types.go:147:13)
              Value[0]:
                *ast.Ident (go-nodes/interface_types.go:147:29) Name: nil
        *ast.DeclStmt (go-nodes/interface_types.go:148:2)
          *ast.GenDecl (go-nodes/interface_types.go:148:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:148:6)
              Name: readerWithNil
              Type:
                *ast.Ident (go-nodes/interface_types.go:148:20) Name: Reader
              Value[0]:
                *ast.Ident (go-nodes/interface_types.go:148:29) Name: nilPtr
        *ast.ExprStmt (go-nodes/interface_types.go:149:2)
          *ast.CallExpr (go-nodes/interface_types.go:149:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:149:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:149:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:149:13) Kind: STRING Value: "    Interface with nil concrete: is nil: %v\n"
              [1]:
                *ast.BinaryExpr (go-nodes/interface_types.go:149:62) Op: ==
                  X:
                    *ast.Ident (go-nodes/interface_types.go:149:62) Name: readerWithNil
                  Y:
                    *ast.Ident (go-nodes/interface_types.go:149:79) Name: nil
        *ast.ExprStmt (go-nodes/interface_types.go:152:2)
          *ast.CallExpr (go-nodes/interface_types.go:152:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:152:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:152:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:152:14) Kind: STRING Value: "  ✓ Interface dynamic dispatch:"
        *ast.AssignStmt (go-nodes/interface_types.go:153:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/interface_types.go:153:2) Name: readers
          RHS:
            *ast.CompositeLit (go-nodes/interface_types.go:153:13)
              Type:
                *ast.ArrayType (go-nodes/interface_types.go:153:13)
                  Elt:
                    *ast.Ident (go-nodes/interface_types.go:153:15) Name: Reader
              Elts:
                [0]:
                  *ast.CompositeLit (go-nodes/interface_types.go:154:3)
                    Type:
                      *ast.Ident (go-nodes/interface_types.go:154:3) Name: StringReader
                    Elts:
                      [0]:
                        *ast.KeyValueExpr (go-nodes/interface_types.go:154:16)
                [1]:
                  *ast.CompositeLit (go-nodes/interface_types.go:155:3)
                    Type:
                      *ast.Ident (go-nodes/interface_types.go:155:3) Name: StringReader
                    Elts:
                      [0]:
                        *ast.KeyValueExpr (go-nodes/interface_types.go:155:16)
                [2]:
                  *ast.CompositeLit (go-nodes/interface_types.go:156:3)
                    Type:
                      *ast.Ident (go-nodes/interface_types.go:156:3) Name: StringReader
                    Elts:
                      [0]:
                        *ast.KeyValueExpr (go-nodes/interface_types.go:156:16)
        *ast.RangeStmt (go-nodes/interface_types.go:158:2) Token: :=
          Key:
            *ast.Ident (go-nodes/interface_types.go:158:6) Name: i
          Value:
            *ast.Ident (go-nodes/interface_types.go:158:9) Name: reader
          X:
            *ast.Ident (go-nodes/interface_types.go:158:25) Name: readers
          Body:
            *ast.BlockStmt (go-nodes/interface_types.go:158:33) Stmts: 1
              *ast.ExprStmt (go-nodes/interface_types.go:159:3)
                *ast.CallExpr (go-nodes/interface_types.go:159:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/interface_types.go:159:3)
                      X:
                        *ast.Ident (go-nodes/interface_types.go:159:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/interface_types.go:159:14) Kind: STRING Value: "    Reader[%d]: %s\n"
                    [1]:
                      *ast.Ident (go-nodes/interface_types.go:159:38) Name: i
                    [2]:
                      *ast.CallExpr (go-nodes/interface_types.go:159:41)
                        Fun:
                          *ast.SelectorExpr (go-nodes/interface_types.go:159:41)
                            X:
                              *ast.Ident (go-nodes/interface_types.go:159:41) Name: reader
                            Sel: Read
        *ast.ExprStmt (go-nodes/interface_types.go:163:2)
          *ast.CallExpr (go-nodes/interface_types.go:163:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:163:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:163:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:163:14) Kind: STRING Value: "  ✓ Interface implicit implementation:"
        *ast.DeclStmt (go-nodes/interface_types.go:164:2)
          *ast.GenDecl (go-nodes/interface_types.go:164:2) Token: var
            *ast.ValueSpec (go-nodes/interface_types.go:164:6)
              Name: w
              Type:
                *ast.Ident (go-nodes/interface_types.go:164:8) Name: Writer
              Value[0]:
                *ast.UnaryExpr (go-nodes/interface_types.go:164:17) Op: &
                  X:
                    *ast.CompositeLit (go-nodes/interface_types.go:164:18)
                      Type:
                        *ast.Ident (go-nodes/interface_types.go:164:18) Name: Buffer
                      Elts:
                        [0]:
                          *ast.KeyValueExpr (go-nodes/interface_types.go:164:25)
        *ast.AssignStmt (go-nodes/interface_types.go:165:2) Token: =
          LHS:
            *ast.Ident (go-nodes/interface_types.go:165:2) Name: _
          RHS:
            *ast.CallExpr (go-nodes/interface_types.go:165:6)
              Fun:
                *ast.SelectorExpr (go-nodes/interface_types.go:165:6)
                  X:
                    *ast.Ident (go-nodes/interface_types.go:165:6) Name: w
                  Sel: Write
              Args:
                [0]:
                  *ast.BasicLit (go-nodes/interface_types.go:165:14) Kind: STRING Value: "implicit implementation works"
        *ast.ExprStmt (go-nodes/interface_types.go:166:2)
          *ast.CallExpr (go-nodes/interface_types.go:166:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:166:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:166:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:166:13) Kind: STRING Value: "    Writer interface satisfied implicitly\n"
        *ast.ExprStmt (go-nodes/interface_types.go:169:2)
          *ast.CallExpr (go-nodes/interface_types.go:169:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:169:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:169:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:169:14) Kind: STRING Value: "  ✓ ast.InterfaceType (comparable constraint):"
        *ast.ExprStmt (go-nodes/interface_types.go:170:2)
          *ast.CallExpr (go-nodes/interface_types.go:170:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:170:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:170:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:170:13) Kind: STRING Value: "    comparable constraint defined\n"
        *ast.ExprStmt (go-nodes/interface_types.go:173:2)
          *ast.CallExpr (go-nodes/interface_types.go:173:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:173:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:173:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:173:14) Kind: STRING Value: "  ✓ ast.InterfaceType (type sets/unions):"
        *ast.ExprStmt (go-nodes/interface_types.go:174:2)
          *ast.CallExpr (go-nodes/interface_types.go:174:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:174:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:174:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:174:13) Kind: STRING Value: "    Ordered interface with type union defined\n"
        *ast.ExprStmt (go-nodes/interface_types.go:176:2)
          *ast.CallExpr (go-nodes/interface_types.go:176:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:176:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:176:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:176:14) Kind: STRING Value: "Summary: Comprehensive interface type AST node coverage"
        *ast.ExprStmt (go-nodes/interface_types.go:177:2)
          *ast.CallExpr (go-nodes/interface_types.go:177:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:177:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:177:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:177:14) Kind: STRING Value: "Primary AST Nodes: ast.InterfaceType, ast.Field, ast.FieldList"
        *ast.ExprStmt (go-nodes/interface_types.go:178:2)
          *ast.CallExpr (go-nodes/interface_types.go:178:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:178:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:178:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:178:14) Kind: STRING Value: "Features: empty interfaces, method sets, embedding, generics, type constraints"
        *ast.ExprStmt (go-nodes/interface_types.go:179:2)
          *ast.CallExpr (go-nodes/interface_types.go:179:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:179:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:179:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/interface_types.go:179:14) Kind: STRING Value: "========================================"
  *ast.GenDecl (go-nodes/interface_types.go:184:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:184:6)
      Name: StringReader
      Type:
        *ast.StructType (go-nodes/interface_types.go:184:19)
          *ast.FieldList (go-nodes/interface_types.go:184:26) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:185:2)
                Name: content
                Type:
                  *ast.Ident (go-nodes/interface_types.go:185:10) Name: string
  *ast.FuncDecl (go-nodes/interface_types.go:188:1)
    Name: Read
    Receiver:
      *ast.FieldList (go-nodes/interface_types.go:188:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/interface_types.go:188:7)
            Name: s
            Type:
              *ast.Ident (go-nodes/interface_types.go:188:9) Name: StringReader
    Type:
      *ast.FuncType (go-nodes/interface_types.go:188:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:188:27) NumFields: 0
        Results:
          *ast.FieldList (go-nodes/interface_types.go:188:30) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:188:30)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:188:30) Name: string
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:188:37) Stmts: 1
        *ast.ReturnStmt (go-nodes/interface_types.go:189:2)
          Result[0]:
            *ast.SelectorExpr (go-nodes/interface_types.go:189:9)
              X:
                *ast.Ident (go-nodes/interface_types.go:189:9) Name: s
              Sel: content
  *ast.GenDecl (go-nodes/interface_types.go:192:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:192:6)
      Name: Buffer
      Type:
        *ast.StructType (go-nodes/interface_types.go:192:13)
          *ast.FieldList (go-nodes/interface_types.go:192:20) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:193:2)
                Name: data
                Type:
                  *ast.Ident (go-nodes/interface_types.go:193:7) Name: string
  *ast.FuncDecl (go-nodes/interface_types.go:196:1)
    Name: Read
    Receiver:
      *ast.FieldList (go-nodes/interface_types.go:196:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/interface_types.go:196:7)
            Name: b
            Type:
              *ast.StarExpr (go-nodes/interface_types.go:196:9)
    Type:
      *ast.FuncType (go-nodes/interface_types.go:196:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:196:22) NumFields: 0
        Results:
          *ast.FieldList (go-nodes/interface_types.go:196:25) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:196:25)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:196:25) Name: string
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:196:32) Stmts: 1
        *ast.ReturnStmt (go-nodes/interface_types.go:197:2)
          Result[0]:
            *ast.SelectorExpr (go-nodes/interface_types.go:197:9)
              X:
                *ast.Ident (go-nodes/interface_types.go:197:9) Name: b
              Sel: data
  *ast.FuncDecl (go-nodes/interface_types.go:200:1)
    Name: Write
    Receiver:
      *ast.FieldList (go-nodes/interface_types.go:200:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/interface_types.go:200:7)
            Name: b
            Type:
              *ast.StarExpr (go-nodes/interface_types.go:200:9)
    Type:
      *ast.FuncType (go-nodes/interface_types.go:200:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:200:23) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:200:24)
                Name: s
                Type:
                  *ast.Ident (go-nodes/interface_types.go:200:26) Name: string
        Results:
          *ast.FieldList (go-nodes/interface_types.go:200:34) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:200:34)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:200:34) Name: error
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:200:40) Stmts: 2
        *ast.AssignStmt (go-nodes/interface_types.go:201:2) Token: =
          LHS:
            *ast.SelectorExpr (go-nodes/interface_types.go:201:2)
              X:
                *ast.Ident (go-nodes/interface_types.go:201:2) Name: b
              Sel: data
          RHS:
            *ast.Ident (go-nodes/interface_types.go:201:11) Name: s
        *ast.ReturnStmt (go-nodes/interface_types.go:202:2)
          Result[0]:
            *ast.Ident (go-nodes/interface_types.go:202:9) Name: nil
  *ast.GenDecl (go-nodes/interface_types.go:205:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:205:6)
      Name: BasicCalculator
      Type:
        *ast.StructType (go-nodes/interface_types.go:205:22)
          *ast.FieldList (go-nodes/interface_types.go:205:28) NumFields: 0
  *ast.FuncDecl (go-nodes/interface_types.go:207:1)
    Name: Add
    Receiver:
      *ast.FieldList (go-nodes/interface_types.go:207:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/interface_types.go:207:7)
            Name: c
            Type:
              *ast.Ident (go-nodes/interface_types.go:207:9) Name: BasicCalculator
    Type:
      *ast.FuncType (go-nodes/interface_types.go:207:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:207:29) NumFields: 2
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:207:30)
                Name: a
                Name: b
                Type:
                  *ast.Ident (go-nodes/interface_types.go:207:35) Name: int
        Results:
          *ast.FieldList (go-nodes/interface_types.go:207:40) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:207:40)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:207:40) Name: int
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:207:44) Stmts: 1
        *ast.ReturnStmt (go-nodes/interface_types.go:208:2)
          Result[0]:
            *ast.BinaryExpr (go-nodes/interface_types.go:208:9) Op: +
              X:
                *ast.Ident (go-nodes/interface_types.go:208:9) Name: a
              Y:
                *ast.Ident (go-nodes/interface_types.go:208:13) Name: b
  *ast.FuncDecl (go-nodes/interface_types.go:211:1)
    Name: Subtract
    Receiver:
      *ast.FieldList (go-nodes/interface_types.go:211:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/interface_types.go:211:7)
            Name: c
            Type:
              *ast.Ident (go-nodes/interface_types.go:211:9) Name: BasicCalculator
    Type:
      *ast.FuncType (go-nodes/interface_types.go:211:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:211:34) NumFields: 2
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:211:35)
                Name: x
                Name: y
                Type:
                  *ast.Ident (go-nodes/interface_types.go:211:40) Name: int
        Results:
          *ast.FieldList (go-nodes/interface_types.go:211:45) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:211:45)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:211:45) Name: int
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:211:49) Stmts: 1
        *ast.ReturnStmt (go-nodes/interface_types.go:212:2)
          Result[0]:
            *ast.BinaryExpr (go-nodes/interface_types.go:212:9) Op: -
              X:
                *ast.Ident (go-nodes/interface_types.go:212:9) Name: x
              Y:
                *ast.Ident (go-nodes/interface_types.go:212:13) Name: y
  *ast.FuncDecl (go-nodes/interface_types.go:215:1)
    Name: Multiply
    Receiver:
      *ast.FieldList (go-nodes/interface_types.go:215:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/interface_types.go:215:7)
            Name: c
            Type:
              *ast.Ident (go-nodes/interface_types.go:215:9) Name: BasicCalculator
    Type:
      *ast.FuncType (go-nodes/interface_types.go:215:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:215:34) NumFields: 2
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:215:35)
                Name: a
                Name: b
                Type:
                  *ast.Ident (go-nodes/interface_types.go:215:40) Name: int
        Results:
          *ast.FieldList (go-nodes/interface_types.go:215:45) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:215:45)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:215:45) Name: int
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:215:49) Stmts: 1
        *ast.ReturnStmt (go-nodes/interface_types.go:216:2)
          Result[0]:
            *ast.BinaryExpr (go-nodes/interface_types.go:216:9) Op: *
              X:
                *ast.Ident (go-nodes/interface_types.go:216:9) Name: a
              Y:
                *ast.Ident (go-nodes/interface_types.go:216:13) Name: b
  *ast.GenDecl (go-nodes/interface_types.go:219:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:219:6)
      Name: FileHandle
      Type:
        *ast.StructType (go-nodes/interface_types.go:219:17)
          *ast.FieldList (go-nodes/interface_types.go:219:24) NumFields: 2
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:220:2)
                Name: content
                Type:
                  *ast.Ident (go-nodes/interface_types.go:220:10) Name: string
            Field[1]:
              *ast.Field (go-nodes/interface_types.go:221:2)
                Name: open
                Type:
                  *ast.Ident (go-nodes/interface_types.go:221:10) Name: bool
  *ast.FuncDecl (go-nodes/interface_types.go:224:1)
    Name: Read
    Receiver:
      *ast.FieldList (go-nodes/interface_types.go:224:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/interface_types.go:224:7)
            Name: f
            Type:
              *ast.StarExpr (go-nodes/interface_types.go:224:9)
    Type:
      *ast.FuncType (go-nodes/interface_types.go:224:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:224:26) NumFields: 0
        Results:
          *ast.FieldList (go-nodes/interface_types.go:224:29) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:224:29)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:224:29) Name: string
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:224:36) Stmts: 1
        *ast.ReturnStmt (go-nodes/interface_types.go:225:2)
          Result[0]:
            *ast.SelectorExpr (go-nodes/interface_types.go:225:9)
              X:
                *ast.Ident (go-nodes/interface_types.go:225:9) Name: f
              Sel: content
  *ast.FuncDecl (go-nodes/interface_types.go:228:1)
    Name: Write
    Receiver:
      *ast.FieldList (go-nodes/interface_types.go:228:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/interface_types.go:228:7)
            Name: f
            Type:
              *ast.StarExpr (go-nodes/interface_types.go:228:9)
    Type:
      *ast.FuncType (go-nodes/interface_types.go:228:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:228:27) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:228:28)
                Name: s
                Type:
                  *ast.Ident (go-nodes/interface_types.go:228:30) Name: string
        Results:
          *ast.FieldList (go-nodes/interface_types.go:228:38) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:228:38)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:228:38) Name: error
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:228:44) Stmts: 2
        *ast.AssignStmt (go-nodes/interface_types.go:229:2) Token: =
          LHS:
            *ast.SelectorExpr (go-nodes/interface_types.go:229:2)
              X:
                *ast.Ident (go-nodes/interface_types.go:229:2) Name: f
              Sel: content
          RHS:
            *ast.Ident (go-nodes/interface_types.go:229:14) Name: s
        *ast.ReturnStmt (go-nodes/interface_types.go:230:2)
          Result[0]:
            *ast.Ident (go-nodes/interface_types.go:230:9) Name: nil
  *ast.FuncDecl (go-nodes/interface_types.go:233:1)
    Name: Close
    Receiver:
      *ast.FieldList (go-nodes/interface_types.go:233:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/interface_types.go:233:7)
            Name: f
            Type:
              *ast.StarExpr (go-nodes/interface_types.go:233:9)
    Type:
      *ast.FuncType (go-nodes/interface_types.go:233:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:233:27) NumFields: 0
        Results:
          *ast.FieldList (go-nodes/interface_types.go:233:30) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:233:30)
                Type:
                  *ast.Ident (go-nodes/interface_types.go:233:30) Name: error
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:233:36) Stmts: 2
        *ast.AssignStmt (go-nodes/interface_types.go:234:2) Token: =
          LHS:
            *ast.SelectorExpr (go-nodes/interface_types.go:234:2)
              X:
                *ast.Ident (go-nodes/interface_types.go:234:2) Name: f
              Sel: open
          RHS:
            *ast.Ident (go-nodes/interface_types.go:234:11) Name: false
        *ast.ReturnStmt (go-nodes/interface_types.go:235:2)
          Result[0]:
            *ast.Ident (go-nodes/interface_types.go:235:9) Name: nil
  *ast.GenDecl (go-nodes/interface_types.go:238:1) Token: type
    *ast.TypeSpec (go-nodes/interface_types.go:238:6)
      Name: SimpleLogger
      Type:
        *ast.StructType (go-nodes/interface_types.go:238:19)
          *ast.FieldList (go-nodes/interface_types.go:238:25) NumFields: 0
  *ast.FuncDecl (go-nodes/interface_types.go:240:1)
    Name: Log
    Receiver:
      *ast.FieldList (go-nodes/interface_types.go:240:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/interface_types.go:240:7)
            Name: l
            Type:
              *ast.Ident (go-nodes/interface_types.go:240:9) Name: SimpleLogger
    Type:
      *ast.FuncType (go-nodes/interface_types.go:240:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:240:26) NumFields: 2
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:240:27)
                Name: format
                Type:
                  *ast.Ident (go-nodes/interface_types.go:240:34) Name: string
            Field[1]:
              *ast.Field (go-nodes/interface_types.go:240:42)
                Name: args
                Type:
                  *ast.Ellipsis (go-nodes/interface_types.go:240:47)
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:240:63) Stmts: 1
        *ast.ExprStmt (go-nodes/interface_types.go:241:2)
          *ast.CallExpr (go-nodes/interface_types.go:241:2)
            Fun:
              *ast.SelectorExpr (go-nodes/interface_types.go:241:2)
                X:
                  *ast.Ident (go-nodes/interface_types.go:241:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BinaryExpr (go-nodes/interface_types.go:241:13) Op: +
                  X:
                    *ast.BinaryExpr (go-nodes/interface_types.go:241:13) Op: +
                      X:
                        *ast.BasicLit (go-nodes/interface_types.go:241:13) Kind: STRING Value: "    Log: "
                      Y:
                        *ast.Ident (go-nodes/interface_types.go:241:25) Name: format
                  Y:
                    *ast.BasicLit (go-nodes/interface_types.go:241:32) Kind: STRING Value: "\n"
              [1]:
                *ast.Ident (go-nodes/interface_types.go:241:38) Name: args
  *ast.FuncDecl (go-nodes/interface_types.go:244:1)
    Name: describeType
    Type:
      *ast.FuncType (go-nodes/interface_types.go:244:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:244:18) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/interface_types.go:244:19)
                Name: i
                Type:
                  *ast.InterfaceType (go-nodes/interface_types.go:244:21)
                    *ast.FieldList (go-nodes/interface_types.go:244:30) NumFields: 0
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:244:34) Stmts: 1
        *ast.TypeSwitchStmt (go-nodes/interface_types.go:245:2)
  *ast.FuncDecl (go-nodes/interface_types.go:257:1)
    Name: main
    Type:
      *ast.FuncType (go-nodes/interface_types.go:257:1)
        Params:
          *ast.FieldList (go-nodes/interface_types.go:257:10) NumFields: 0
    Body:
      *ast.BlockStmt (go-nodes/interface_types.go:257:13) Stmts: 1
        *ast.ExprStmt (go-nodes/interface_types.go:258:2)
          *ast.CallExpr (go-nodes/interface_types.go:258:2)
            Fun:
              *ast.Ident (go-nodes/interface_types.go:258:2) Name: funcMain
