=== AST for map_channel_types.go ===

File Information:
  Package: main
  Position: go-nodes/map_channel_types.go:3:1
  Imports:
    "fmt"
    "time"
  Comment Groups: 31
  Declarations: 5

=== AST Node Tree ===

*ast.File (go-nodes/map_channel_types.go:3:1)
  Package: main
  *ast.GenDecl (go-nodes/map_channel_types.go:5:1) Token: import
    *ast.ImportSpec (go-nodes/map_channel_types.go:6:2)
      Path: "fmt"
    *ast.ImportSpec (go-nodes/map_channel_types.go:7:2)
      Path: "time"
  *ast.FuncDecl (go-nodes/map_channel_types.go:16:1)
    Name: funcMain
    Type:
      *ast.FuncType (go-nodes/map_channel_types.go:16:1)
        Params:
          *ast.FieldList (go-nodes/map_channel_types.go:16:14) NumFields: 0
    Body:
      *ast.BlockStmt (go-nodes/map_channel_types.go:16:17) Stmts: 99
        *ast.ExprStmt (go-nodes/map_channel_types.go:17:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:17:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:17:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:17:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:17:14) Kind: STRING Value: "=== map_channel_types.go AST Node Coverage ==="
        *ast.ExprStmt (go-nodes/map_channel_types.go:18:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:18:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:18:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:18:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:18:14) Kind: STRING Value: "Exercising AST Nodes:"
        *ast.ExprStmt (go-nodes/map_channel_types.go:21:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:21:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:21:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:21:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:21:14) Kind: STRING Value: "  âœ“ ast.MapType (various key/value types):"
        *ast.DeclStmt (go-nodes/map_channel_types.go:24:2)
          *ast.GenDecl (go-nodes/map_channel_types.go:24:2) Token: var
            *ast.ValueSpec (go-nodes/map_channel_types.go:24:6)
              Name: nilMap
              Type:
                *ast.MapType (go-nodes/map_channel_types.go:24:13)
                  Key:
                    *ast.Ident (go-nodes/map_channel_types.go:24:17) Name: string
                  Value:
                    *ast.Ident (go-nodes/map_channel_types.go:24:24) Name: int
        *ast.ExprStmt (go-nodes/map_channel_types.go:25:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:25:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:25:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:25:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:25:13) Kind: STRING Value: "    Nil map: %v (nil: %v)\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:25:44) Name: nilMap
              [2]:
                *ast.BinaryExpr (go-nodes/map_channel_types.go:25:52) Op: ==
                  X:
                    *ast.Ident (go-nodes/map_channel_types.go:25:52) Name: nilMap
                  Y:
                    *ast.Ident (go-nodes/map_channel_types.go:25:62) Name: nil
        *ast.AssignStmt (go-nodes/map_channel_types.go:28:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:28:2) Name: emptyMap
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:28:14)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:28:14) Name: make
              Args:
                [0]:
                  *ast.MapType (go-nodes/map_channel_types.go:28:19)
                    Key:
                      *ast.Ident (go-nodes/map_channel_types.go:28:23) Name: string
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:28:30) Name: int
        *ast.ExprStmt (go-nodes/map_channel_types.go:29:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:29:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:29:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:29:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:29:13) Kind: STRING Value: "    Empty map: %v (nil: %v, len: %d)\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:29:55) Name: emptyMap
              [2]:
                *ast.BinaryExpr (go-nodes/map_channel_types.go:29:65) Op: ==
                  X:
                    *ast.Ident (go-nodes/map_channel_types.go:29:65) Name: emptyMap
                  Y:
                    *ast.Ident (go-nodes/map_channel_types.go:29:77) Name: nil
              [3]:
                *ast.CallExpr (go-nodes/map_channel_types.go:29:82)
                  Fun:
                    *ast.Ident (go-nodes/map_channel_types.go:29:82) Name: len
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/map_channel_types.go:29:86) Name: emptyMap
        *ast.AssignStmt (go-nodes/map_channel_types.go:32:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:32:2) Name: map1
          RHS:
            *ast.CompositeLit (go-nodes/map_channel_types.go:32:10)
              Type:
                *ast.MapType (go-nodes/map_channel_types.go:32:10)
                  Key:
                    *ast.Ident (go-nodes/map_channel_types.go:32:14) Name: string
                  Value:
                    *ast.Ident (go-nodes/map_channel_types.go:32:21) Name: int
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:33:3)
                [1]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:34:3)
                [2]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:35:3)
        *ast.ExprStmt (go-nodes/map_channel_types.go:37:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:37:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:37:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:37:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:37:13) Kind: STRING Value: "    map[string]int: %v\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:37:41) Name: map1
        *ast.AssignStmt (go-nodes/map_channel_types.go:40:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:40:2) Name: map2
          RHS:
            *ast.CompositeLit (go-nodes/map_channel_types.go:40:10)
              Type:
                *ast.MapType (go-nodes/map_channel_types.go:40:10)
                  Key:
                    *ast.Ident (go-nodes/map_channel_types.go:40:14) Name: int
                  Value:
                    *ast.Ident (go-nodes/map_channel_types.go:40:18) Name: string
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:41:3)
                [1]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:42:3)
                [2]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:43:3)
        *ast.ExprStmt (go-nodes/map_channel_types.go:45:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:45:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:45:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:45:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:45:13) Kind: STRING Value: "    map[int]string: %v\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:45:41) Name: map2
        *ast.AssignStmt (go-nodes/map_channel_types.go:47:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:47:2) Name: map3
          RHS:
            *ast.CompositeLit (go-nodes/map_channel_types.go:47:10)
              Type:
                *ast.MapType (go-nodes/map_channel_types.go:47:10)
                  Key:
                    *ast.Ident (go-nodes/map_channel_types.go:47:14) Name: bool
                  Value:
                    *ast.Ident (go-nodes/map_channel_types.go:47:19) Name: float64
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:48:3)
                [1]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:49:3)
        *ast.ExprStmt (go-nodes/map_channel_types.go:51:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:51:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:51:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:51:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:51:13) Kind: STRING Value: "    map[bool]float64: %v\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:51:43) Name: map3
        *ast.ExprStmt (go-nodes/map_channel_types.go:54:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:54:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:54:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:54:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:54:14) Kind: STRING Value: "  âœ“ Map operations (ast.IndexExpr):"
        *ast.ExprStmt (go-nodes/map_channel_types.go:55:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:55:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:55:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:55:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:55:13) Kind: STRING Value: "    map1[\"two\"]: %d\n"
              [1]:
                *ast.IndexExpr (go-nodes/map_channel_types.go:55:40)
                  X:
                    *ast.Ident (go-nodes/map_channel_types.go:55:40) Name: map1
                  Index:
                    *ast.BasicLit (go-nodes/map_channel_types.go:55:45) Kind: STRING Value: "two"
        *ast.AssignStmt (go-nodes/map_channel_types.go:56:2) Token: =
          LHS:
            *ast.IndexExpr (go-nodes/map_channel_types.go:56:2)
              X:
                *ast.Ident (go-nodes/map_channel_types.go:56:2) Name: map1
              Index:
                *ast.BasicLit (go-nodes/map_channel_types.go:56:7) Kind: STRING Value: "four"
          RHS:
            *ast.BasicLit (go-nodes/map_channel_types.go:56:17) Kind: INT Value: 4
        *ast.ExprStmt (go-nodes/map_channel_types.go:57:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:57:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:57:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:57:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:57:13) Kind: STRING Value: "    After map1[\"four\"]=4: %v\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:57:49) Name: map1
        *ast.AssignStmt (go-nodes/map_channel_types.go:60:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:60:2) Name: val
            *ast.Ident (go-nodes/map_channel_types.go:60:7) Name: ok
          RHS:
            *ast.IndexExpr (go-nodes/map_channel_types.go:60:13)
              X:
                *ast.Ident (go-nodes/map_channel_types.go:60:13) Name: map1
              Index:
                *ast.BasicLit (go-nodes/map_channel_types.go:60:18) Kind: STRING Value: "two"
        *ast.ExprStmt (go-nodes/map_channel_types.go:61:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:61:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:61:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:61:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:61:13) Kind: STRING Value: "    map1[\"two\"]: value=%d, ok=%v\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:61:53) Name: val
              [2]:
                *ast.Ident (go-nodes/map_channel_types.go:61:58) Name: ok
        *ast.AssignStmt (go-nodes/map_channel_types.go:62:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:62:2) Name: val2
            *ast.Ident (go-nodes/map_channel_types.go:62:8) Name: ok2
          RHS:
            *ast.IndexExpr (go-nodes/map_channel_types.go:62:15)
              X:
                *ast.Ident (go-nodes/map_channel_types.go:62:15) Name: map1
              Index:
                *ast.BasicLit (go-nodes/map_channel_types.go:62:20) Kind: STRING Value: "nonexistent"
        *ast.ExprStmt (go-nodes/map_channel_types.go:63:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:63:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:63:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:63:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:63:13) Kind: STRING Value: "    map1[\"nonexistent\"]: value=%d, ok=%v\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:63:61) Name: val2
              [2]:
                *ast.Ident (go-nodes/map_channel_types.go:63:67) Name: ok2
        *ast.ExprStmt (go-nodes/map_channel_types.go:66:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:66:2)
            Fun:
              *ast.Ident (go-nodes/map_channel_types.go:66:2) Name: delete
            Args:
              [0]:
                *ast.Ident (go-nodes/map_channel_types.go:66:9) Name: map1
              [1]:
                *ast.BasicLit (go-nodes/map_channel_types.go:66:15) Kind: STRING Value: "two"
        *ast.ExprStmt (go-nodes/map_channel_types.go:67:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:67:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:67:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:67:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:67:13) Kind: STRING Value: "    After delete(map1, \"two\"): %v\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:67:54) Name: map1
        *ast.ExprStmt (go-nodes/map_channel_types.go:70:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:70:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:70:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:70:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:70:14) Kind: STRING Value: "  âœ“ Map iteration:"
        *ast.RangeStmt (go-nodes/map_channel_types.go:71:2) Token: :=
          Key:
            *ast.Ident (go-nodes/map_channel_types.go:71:6) Name: k
          Value:
            *ast.Ident (go-nodes/map_channel_types.go:71:9) Name: v
          X:
            *ast.Ident (go-nodes/map_channel_types.go:71:20) Name: map1
          Body:
            *ast.BlockStmt (go-nodes/map_channel_types.go:71:25) Stmts: 1
              *ast.ExprStmt (go-nodes/map_channel_types.go:72:3)
                *ast.CallExpr (go-nodes/map_channel_types.go:72:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/map_channel_types.go:72:3)
                      X:
                        *ast.Ident (go-nodes/map_channel_types.go:72:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/map_channel_types.go:72:14) Kind: STRING Value: "    map1[%s]=%d\n"
                    [1]:
                      *ast.Ident (go-nodes/map_channel_types.go:72:35) Name: k
                    [2]:
                      *ast.Ident (go-nodes/map_channel_types.go:72:38) Name: v
        *ast.ExprStmt (go-nodes/map_channel_types.go:76:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:76:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:76:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:76:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:76:14) Kind: STRING Value: "  âœ“ Nested maps (ast.MapType):"
        *ast.AssignStmt (go-nodes/map_channel_types.go:77:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:77:2) Name: nested
          RHS:
            *ast.CompositeLit (go-nodes/map_channel_types.go:77:12)
              Type:
                *ast.MapType (go-nodes/map_channel_types.go:77:12)
                  Key:
                    *ast.Ident (go-nodes/map_channel_types.go:77:16) Name: string
                  Value:
                    *ast.MapType (go-nodes/map_channel_types.go:77:23)
                      Key:
                        *ast.Ident (go-nodes/map_channel_types.go:77:27) Name: string
                      Value:
                        *ast.Ident (go-nodes/map_channel_types.go:77:34) Name: int
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:78:3)
                [1]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:79:3)
        *ast.ExprStmt (go-nodes/map_channel_types.go:81:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:81:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:81:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:81:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:81:13) Kind: STRING Value: "    Nested map: %v\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:81:37) Name: nested
        *ast.ExprStmt (go-nodes/map_channel_types.go:82:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:82:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:82:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:82:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:82:13) Kind: STRING Value: "    nested[\"outer1\"][\"inner2\"]: %d\n"
              [1]:
                *ast.IndexExpr (go-nodes/map_channel_types.go:82:57)
                  X:
                    *ast.IndexExpr (go-nodes/map_channel_types.go:82:57)
                      X:
                        *ast.Ident (go-nodes/map_channel_types.go:82:57) Name: nested
                      Index:
                        *ast.BasicLit (go-nodes/map_channel_types.go:82:64) Kind: STRING Value: "outer1"
                  Index:
                    *ast.BasicLit (go-nodes/map_channel_types.go:82:74) Kind: STRING Value: "inner2"
        *ast.DeclStmt (go-nodes/map_channel_types.go:85:2)
          *ast.GenDecl (go-nodes/map_channel_types.go:85:2) Token: type
            *ast.TypeSpec (go-nodes/map_channel_types.go:85:7)
              Name: Person
              Type:
                *ast.StructType (go-nodes/map_channel_types.go:85:14)
                  *ast.FieldList (go-nodes/map_channel_types.go:85:21) NumFields: 2
                    Field[0]:
                      *ast.Field (go-nodes/map_channel_types.go:86:3)
                        Name: Name
                        Type:
                          *ast.Ident (go-nodes/map_channel_types.go:86:8) Name: string
                    Field[1]:
                      *ast.Field (go-nodes/map_channel_types.go:87:3)
                        Name: Age
                        Type:
                          *ast.Ident (go-nodes/map_channel_types.go:87:8) Name: int
        *ast.AssignStmt (go-nodes/map_channel_types.go:89:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:89:2) Name: mapStruct
          RHS:
            *ast.CompositeLit (go-nodes/map_channel_types.go:89:15)
              Type:
                *ast.MapType (go-nodes/map_channel_types.go:89:15)
                  Key:
                    *ast.Ident (go-nodes/map_channel_types.go:89:19) Name: string
                  Value:
                    *ast.Ident (go-nodes/map_channel_types.go:89:26) Name: Person
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:90:3)
                [1]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:91:3)
        *ast.ExprStmt (go-nodes/map_channel_types.go:93:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:93:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:93:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:93:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:93:13) Kind: STRING Value: "    map[string]Person: %v\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:93:44) Name: mapStruct
        *ast.AssignStmt (go-nodes/map_channel_types.go:96:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:96:2) Name: mapSlice
          RHS:
            *ast.CompositeLit (go-nodes/map_channel_types.go:96:14)
              Type:
                *ast.MapType (go-nodes/map_channel_types.go:96:14)
                  Key:
                    *ast.Ident (go-nodes/map_channel_types.go:96:18) Name: string
                  Value:
                    *ast.ArrayType (go-nodes/map_channel_types.go:96:25)
                      Elt:
                        *ast.Ident (go-nodes/map_channel_types.go:96:27) Name: int
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:97:3)
                [1]:
                  *ast.KeyValueExpr (go-nodes/map_channel_types.go:98:3)
        *ast.ExprStmt (go-nodes/map_channel_types.go:100:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:100:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:100:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:100:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:100:13) Kind: STRING Value: "    map[string][]int: %v\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:100:43) Name: mapSlice
        *ast.AssignStmt (go-nodes/map_channel_types.go:103:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:103:2) Name: largeMap
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:103:14)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:103:14) Name: make
              Args:
                [0]:
                  *ast.MapType (go-nodes/map_channel_types.go:103:19)
                    Key:
                      *ast.Ident (go-nodes/map_channel_types.go:103:23) Name: int
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:103:27) Name: int
                [1]:
                  *ast.BasicLit (go-nodes/map_channel_types.go:103:32) Kind: INT Value: 100
        *ast.AssignStmt (go-nodes/map_channel_types.go:104:2) Token: =
          LHS:
            *ast.IndexExpr (go-nodes/map_channel_types.go:104:2)
              X:
                *ast.Ident (go-nodes/map_channel_types.go:104:2) Name: largeMap
              Index:
                *ast.BasicLit (go-nodes/map_channel_types.go:104:11) Kind: INT Value: 1
          RHS:
            *ast.BasicLit (go-nodes/map_channel_types.go:104:16) Kind: INT Value: 1
        *ast.ExprStmt (go-nodes/map_channel_types.go:105:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:105:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:105:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:105:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:105:13) Kind: STRING Value: "    Map with capacity hint: len=%d\n"
              [1]:
                *ast.CallExpr (go-nodes/map_channel_types.go:105:53)
                  Fun:
                    *ast.Ident (go-nodes/map_channel_types.go:105:53) Name: len
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/map_channel_types.go:105:57) Name: largeMap
        *ast.ExprStmt (go-nodes/map_channel_types.go:108:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:108:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:108:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:108:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:108:14) Kind: STRING Value: "  âœ“ ast.ChanType (bidirectional):"
        *ast.AssignStmt (go-nodes/map_channel_types.go:109:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:109:2) Name: ch1
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:109:9)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:109:9) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/map_channel_types.go:109:14) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:109:19) Name: int
        *ast.AssignStmt (go-nodes/map_channel_types.go:110:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:110:2) Name: ch2
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:110:9)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:110:9) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/map_channel_types.go:110:14) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:110:19) Name: string
                [1]:
                  *ast.BasicLit (go-nodes/map_channel_types.go:110:27) Kind: INT Value: 5
        *ast.ExprStmt (go-nodes/map_channel_types.go:111:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:111:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:111:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:111:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:111:13) Kind: STRING Value: "    Unbuffered chan int: %T\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:111:46) Name: ch1
        *ast.ExprStmt (go-nodes/map_channel_types.go:112:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:112:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:112:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:112:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:112:13) Kind: STRING Value: "    Buffered chan string: %T (cap: %d)\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:112:57) Name: ch2
              [2]:
                *ast.CallExpr (go-nodes/map_channel_types.go:112:62)
                  Fun:
                    *ast.Ident (go-nodes/map_channel_types.go:112:62) Name: cap
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/map_channel_types.go:112:66) Name: ch2
        *ast.SendStmt (go-nodes/map_channel_types.go:115:2)
        *ast.SendStmt (go-nodes/map_channel_types.go:116:2)
        *ast.ExprStmt (go-nodes/map_channel_types.go:117:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:117:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:117:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:117:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:117:13) Kind: STRING Value: "    After sends: len=%d, cap=%d\n"
              [1]:
                *ast.CallExpr (go-nodes/map_channel_types.go:117:50)
                  Fun:
                    *ast.Ident (go-nodes/map_channel_types.go:117:50) Name: len
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/map_channel_types.go:117:54) Name: ch2
              [2]:
                *ast.CallExpr (go-nodes/map_channel_types.go:117:60)
                  Fun:
                    *ast.Ident (go-nodes/map_channel_types.go:117:60) Name: cap
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/map_channel_types.go:117:64) Name: ch2
        *ast.AssignStmt (go-nodes/map_channel_types.go:118:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:118:2) Name: msg
          RHS:
            *ast.UnaryExpr (go-nodes/map_channel_types.go:118:9) Op: <-
              X:
                *ast.Ident (go-nodes/map_channel_types.go:118:11) Name: ch2
        *ast.ExprStmt (go-nodes/map_channel_types.go:119:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:119:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:119:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:119:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:119:13) Kind: STRING Value: "    Received: %s, remaining len=%d\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:119:53) Name: msg
              [2]:
                *ast.CallExpr (go-nodes/map_channel_types.go:119:58)
                  Fun:
                    *ast.Ident (go-nodes/map_channel_types.go:119:58) Name: len
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/map_channel_types.go:119:62) Name: ch2
        *ast.ExprStmt (go-nodes/map_channel_types.go:122:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:122:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:122:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:122:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:122:14) Kind: STRING Value: "  âœ“ ast.ChanType (send-only chan<-):"
        *ast.AssignStmt (go-nodes/map_channel_types.go:123:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:123:2) Name: chSend
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:123:12)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:123:12) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/map_channel_types.go:123:17) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:123:22) Name: int
                [1]:
                  *ast.BasicLit (go-nodes/map_channel_types.go:123:27) Kind: INT Value: 1
        *ast.ExprStmt (go-nodes/map_channel_types.go:124:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:124:2)
            Fun:
              *ast.Ident (go-nodes/map_channel_types.go:124:2) Name: sendOnlyExample
            Args:
              [0]:
                *ast.Ident (go-nodes/map_channel_types.go:124:18) Name: chSend
        *ast.AssignStmt (go-nodes/map_channel_types.go:125:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:125:2) Name: received
          RHS:
            *ast.UnaryExpr (go-nodes/map_channel_types.go:125:14) Op: <-
              X:
                *ast.Ident (go-nodes/map_channel_types.go:125:16) Name: chSend
        *ast.ExprStmt (go-nodes/map_channel_types.go:126:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:126:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:126:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:126:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:126:13) Kind: STRING Value: "    Received from send-only channel: %d\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:126:58) Name: received
        *ast.ExprStmt (go-nodes/map_channel_types.go:129:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:129:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:129:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:129:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:129:14) Kind: STRING Value: "  âœ“ ast.ChanType (receive-only <-chan):"
        *ast.AssignStmt (go-nodes/map_channel_types.go:130:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:130:2) Name: chRecv
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:130:12)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:130:12) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/map_channel_types.go:130:17) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:130:22) Name: int
                [1]:
                  *ast.BasicLit (go-nodes/map_channel_types.go:130:27) Kind: INT Value: 1
        *ast.SendStmt (go-nodes/map_channel_types.go:131:2)
        *ast.ExprStmt (go-nodes/map_channel_types.go:132:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:132:2)
            Fun:
              *ast.Ident (go-nodes/map_channel_types.go:132:2) Name: receiveOnlyExample
            Args:
              [0]:
                *ast.Ident (go-nodes/map_channel_types.go:132:21) Name: chRecv
        *ast.ExprStmt (go-nodes/map_channel_types.go:135:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:135:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:135:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:135:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:135:14) Kind: STRING Value: "  âœ“ Channel close and range:"
        *ast.AssignStmt (go-nodes/map_channel_types.go:136:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:136:2) Name: chClose
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:136:13)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:136:13) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/map_channel_types.go:136:18) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:136:23) Name: int
                [1]:
                  *ast.BasicLit (go-nodes/map_channel_types.go:136:28) Kind: INT Value: 3
        *ast.SendStmt (go-nodes/map_channel_types.go:137:2)
        *ast.SendStmt (go-nodes/map_channel_types.go:138:2)
        *ast.SendStmt (go-nodes/map_channel_types.go:139:2)
        *ast.ExprStmt (go-nodes/map_channel_types.go:140:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:140:2)
            Fun:
              *ast.Ident (go-nodes/map_channel_types.go:140:2) Name: close
            Args:
              [0]:
                *ast.Ident (go-nodes/map_channel_types.go:140:8) Name: chClose
        *ast.RangeStmt (go-nodes/map_channel_types.go:141:2) Token: :=
          Key:
            *ast.Ident (go-nodes/map_channel_types.go:141:6) Name: val
          X:
            *ast.Ident (go-nodes/map_channel_types.go:141:19) Name: chClose
          Body:
            *ast.BlockStmt (go-nodes/map_channel_types.go:141:27) Stmts: 1
              *ast.ExprStmt (go-nodes/map_channel_types.go:142:3)
                *ast.CallExpr (go-nodes/map_channel_types.go:142:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/map_channel_types.go:142:3)
                      X:
                        *ast.Ident (go-nodes/map_channel_types.go:142:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/map_channel_types.go:142:14) Kind: STRING Value: "    Received: %d\n"
                    [1]:
                      *ast.Ident (go-nodes/map_channel_types.go:142:36) Name: val
        *ast.ExprStmt (go-nodes/map_channel_types.go:146:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:146:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:146:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:146:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:146:14) Kind: STRING Value: "  âœ“ Channel with select (ast.SelectStmt):"
        *ast.AssignStmt (go-nodes/map_channel_types.go:147:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:147:2) Name: ch3
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:147:9)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:147:9) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/map_channel_types.go:147:14) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:147:19) Name: int
                [1]:
                  *ast.BasicLit (go-nodes/map_channel_types.go:147:24) Kind: INT Value: 1
        *ast.AssignStmt (go-nodes/map_channel_types.go:148:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:148:2) Name: ch4
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:148:9)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:148:9) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/map_channel_types.go:148:14) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:148:19) Name: string
                [1]:
                  *ast.BasicLit (go-nodes/map_channel_types.go:148:27) Kind: INT Value: 1
        *ast.SendStmt (go-nodes/map_channel_types.go:149:2)
        *ast.SendStmt (go-nodes/map_channel_types.go:150:2)
        *ast.SelectStmt (go-nodes/map_channel_types.go:152:2)
        *ast.ExprStmt (go-nodes/map_channel_types.go:162:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:162:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:162:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:162:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:162:14) Kind: STRING Value: "  âœ“ Goroutine with channel (ast.GoStmt):"
        *ast.AssignStmt (go-nodes/map_channel_types.go:163:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:163:2) Name: done
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:163:10)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:163:10) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/map_channel_types.go:163:15) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:163:20) Name: bool
        *ast.GoStmt (go-nodes/map_channel_types.go:164:2)
        *ast.ExprStmt (go-nodes/map_channel_types.go:168:2)
          *ast.UnaryExpr (go-nodes/map_channel_types.go:168:2) Op: <-
            X:
              *ast.Ident (go-nodes/map_channel_types.go:168:4) Name: done
        *ast.ExprStmt (go-nodes/map_channel_types.go:169:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:169:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:169:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:169:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:169:14) Kind: STRING Value: "    Goroutine completed"
        *ast.ExprStmt (go-nodes/map_channel_types.go:172:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:172:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:172:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:172:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:172:14) Kind: STRING Value: "  âœ“ Channel timeout pattern:"
        *ast.AssignStmt (go-nodes/map_channel_types.go:173:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:173:2) Name: timeout
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:173:13)
              Fun:
                *ast.SelectorExpr (go-nodes/map_channel_types.go:173:13)
                  X:
                    *ast.Ident (go-nodes/map_channel_types.go:173:13) Name: time
                  Sel: After
              Args:
                [0]:
                  *ast.BinaryExpr (go-nodes/map_channel_types.go:173:24) Op: *
                    X:
                      *ast.BasicLit (go-nodes/map_channel_types.go:173:24) Kind: INT Value: 1
                    Y:
                      *ast.SelectorExpr (go-nodes/map_channel_types.go:173:28)
                        X:
                          *ast.Ident (go-nodes/map_channel_types.go:173:28) Name: time
                        Sel: Millisecond
        *ast.SelectStmt (go-nodes/map_channel_types.go:174:2)
        *ast.ExprStmt (go-nodes/map_channel_types.go:180:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:180:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:180:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:180:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:180:14) Kind: STRING Value: "  âœ“ Nil channel:"
        *ast.DeclStmt (go-nodes/map_channel_types.go:181:2)
          *ast.GenDecl (go-nodes/map_channel_types.go:181:2) Token: var
            *ast.ValueSpec (go-nodes/map_channel_types.go:181:6)
              Name: nilChan
              Type:
                *ast.ChanType (go-nodes/map_channel_types.go:181:14) Dir: %!s(ast.ChanDir=3)
                  Value:
                    *ast.Ident (go-nodes/map_channel_types.go:181:19) Name: int
        *ast.ExprStmt (go-nodes/map_channel_types.go:182:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:182:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:182:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:182:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:182:13) Kind: STRING Value: "    Nil channel: %v (nil: %v)\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:182:48) Name: nilChan
              [2]:
                *ast.BinaryExpr (go-nodes/map_channel_types.go:182:57) Op: ==
                  X:
                    *ast.Ident (go-nodes/map_channel_types.go:182:57) Name: nilChan
                  Y:
                    *ast.Ident (go-nodes/map_channel_types.go:182:68) Name: nil
        *ast.ExprStmt (go-nodes/map_channel_types.go:185:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:185:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:185:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:185:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:185:14) Kind: STRING Value: "  âœ“ Channel of channels:"
        *ast.AssignStmt (go-nodes/map_channel_types.go:186:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:186:2) Name: chOfCh
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:186:12)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:186:12) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/map_channel_types.go:186:17) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.ChanType (go-nodes/map_channel_types.go:186:22) Dir: %!s(ast.ChanDir=3)
                        Value:
                          *ast.Ident (go-nodes/map_channel_types.go:186:27) Name: int
                [1]:
                  *ast.BasicLit (go-nodes/map_channel_types.go:186:32) Kind: INT Value: 1
        *ast.AssignStmt (go-nodes/map_channel_types.go:187:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:187:2) Name: innerCh
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:187:13)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:187:13) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/map_channel_types.go:187:18) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:187:23) Name: int
                [1]:
                  *ast.BasicLit (go-nodes/map_channel_types.go:187:28) Kind: INT Value: 1
        *ast.SendStmt (go-nodes/map_channel_types.go:188:2)
        *ast.SendStmt (go-nodes/map_channel_types.go:189:2)
        *ast.AssignStmt (go-nodes/map_channel_types.go:190:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:190:2) Name: receivedCh
          RHS:
            *ast.UnaryExpr (go-nodes/map_channel_types.go:190:16) Op: <-
              X:
                *ast.Ident (go-nodes/map_channel_types.go:190:18) Name: chOfCh
        *ast.AssignStmt (go-nodes/map_channel_types.go:191:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:191:2) Name: receivedVal
          RHS:
            *ast.UnaryExpr (go-nodes/map_channel_types.go:191:17) Op: <-
              X:
                *ast.Ident (go-nodes/map_channel_types.go:191:19) Name: receivedCh
        *ast.ExprStmt (go-nodes/map_channel_types.go:192:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:192:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:192:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:192:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:192:13) Kind: STRING Value: "    Received from channel of channels: %d\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:192:60) Name: receivedVal
        *ast.ExprStmt (go-nodes/map_channel_types.go:195:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:195:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:195:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:195:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:195:14) Kind: STRING Value: "  âœ“ Channel direction conversion:"
        *ast.AssignStmt (go-nodes/map_channel_types.go:196:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:196:2) Name: biCh
          RHS:
            *ast.CallExpr (go-nodes/map_channel_types.go:196:10)
              Fun:
                *ast.Ident (go-nodes/map_channel_types.go:196:10) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/map_channel_types.go:196:15) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:196:20) Name: int
                [1]:
                  *ast.BasicLit (go-nodes/map_channel_types.go:196:25) Kind: INT Value: 1
        *ast.DeclStmt (go-nodes/map_channel_types.go:197:2)
          *ast.GenDecl (go-nodes/map_channel_types.go:197:2) Token: var
            *ast.ValueSpec (go-nodes/map_channel_types.go:197:6)
              Name: sendCh
              Type:
                *ast.ChanType (go-nodes/map_channel_types.go:197:13) Dir: %!s(ast.ChanDir=1)
                  Value:
                    *ast.Ident (go-nodes/map_channel_types.go:197:20) Name: int
              Value[0]:
                *ast.Ident (go-nodes/map_channel_types.go:197:26) Name: biCh
        *ast.DeclStmt (go-nodes/map_channel_types.go:198:2)
          *ast.GenDecl (go-nodes/map_channel_types.go:198:2) Token: var
            *ast.ValueSpec (go-nodes/map_channel_types.go:198:6)
              Name: recvCh
              Type:
                *ast.ChanType (go-nodes/map_channel_types.go:198:13) Dir: %!s(ast.ChanDir=2)
                  Value:
                    *ast.Ident (go-nodes/map_channel_types.go:198:20) Name: int
              Value[0]:
                *ast.Ident (go-nodes/map_channel_types.go:198:26) Name: biCh
        *ast.SendStmt (go-nodes/map_channel_types.go:199:2)
        *ast.AssignStmt (go-nodes/map_channel_types.go:200:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:200:2) Name: val77
          RHS:
            *ast.UnaryExpr (go-nodes/map_channel_types.go:200:11) Op: <-
              X:
                *ast.Ident (go-nodes/map_channel_types.go:200:13) Name: recvCh
        *ast.ExprStmt (go-nodes/map_channel_types.go:201:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:201:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:201:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:201:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:201:13) Kind: STRING Value: "    Directional channels work: %d\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:201:52) Name: val77
        *ast.ExprStmt (go-nodes/map_channel_types.go:203:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:203:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:203:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:203:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:203:14) Kind: STRING Value: "Summary: Comprehensive map and channel AST node coverage"
        *ast.ExprStmt (go-nodes/map_channel_types.go:204:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:204:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:204:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:204:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:204:14) Kind: STRING Value: "Primary AST Nodes: ast.MapType, ast.ChanType, ast.SendStmt"
        *ast.ExprStmt (go-nodes/map_channel_types.go:205:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:205:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:205:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:205:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:205:14) Kind: STRING Value: "Features: maps, channels (buffered/unbuffered, directional), select, goroutines"
        *ast.ExprStmt (go-nodes/map_channel_types.go:206:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:206:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:206:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:206:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:206:14) Kind: STRING Value: "========================================"
  *ast.FuncDecl (go-nodes/map_channel_types.go:210:1)
    Name: sendOnlyExample
    Type:
      *ast.FuncType (go-nodes/map_channel_types.go:210:1)
        Params:
          *ast.FieldList (go-nodes/map_channel_types.go:210:21) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/map_channel_types.go:210:22)
                Name: ch
                Type:
                  *ast.ChanType (go-nodes/map_channel_types.go:210:25) Dir: %!s(ast.ChanDir=1)
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:210:32) Name: int
    Body:
      *ast.BlockStmt (go-nodes/map_channel_types.go:210:37) Stmts: 1
        *ast.SendStmt (go-nodes/map_channel_types.go:211:2)
  *ast.FuncDecl (go-nodes/map_channel_types.go:215:1)
    Name: receiveOnlyExample
    Type:
      *ast.FuncType (go-nodes/map_channel_types.go:215:1)
        Params:
          *ast.FieldList (go-nodes/map_channel_types.go:215:24) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/map_channel_types.go:215:25)
                Name: ch
                Type:
                  *ast.ChanType (go-nodes/map_channel_types.go:215:28) Dir: %!s(ast.ChanDir=2)
                    Value:
                      *ast.Ident (go-nodes/map_channel_types.go:215:35) Name: int
    Body:
      *ast.BlockStmt (go-nodes/map_channel_types.go:215:40) Stmts: 2
        *ast.AssignStmt (go-nodes/map_channel_types.go:216:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/map_channel_types.go:216:2) Name: val
          RHS:
            *ast.UnaryExpr (go-nodes/map_channel_types.go:216:9) Op: <-
              X:
                *ast.Ident (go-nodes/map_channel_types.go:216:11) Name: ch
        *ast.ExprStmt (go-nodes/map_channel_types.go:217:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:217:2)
            Fun:
              *ast.SelectorExpr (go-nodes/map_channel_types.go:217:2)
                X:
                  *ast.Ident (go-nodes/map_channel_types.go:217:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/map_channel_types.go:217:13) Kind: STRING Value: "    Received in receive-only function: %d\n"
              [1]:
                *ast.Ident (go-nodes/map_channel_types.go:217:60) Name: val
  *ast.FuncDecl (go-nodes/map_channel_types.go:220:1)
    Name: main
    Type:
      *ast.FuncType (go-nodes/map_channel_types.go:220:1)
        Params:
          *ast.FieldList (go-nodes/map_channel_types.go:220:10) NumFields: 0
    Body:
      *ast.BlockStmt (go-nodes/map_channel_types.go:220:13) Stmts: 1
        *ast.ExprStmt (go-nodes/map_channel_types.go:221:2)
          *ast.CallExpr (go-nodes/map_channel_types.go:221:2)
            Fun:
              *ast.Ident (go-nodes/map_channel_types.go:221:2) Name: funcMain
