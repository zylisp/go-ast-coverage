=== AST for control_flow.go ===

File Information:
  Package: main
  Position: go-nodes/control_flow.go:3:1
  Imports:
    "fmt"
  Comment Groups: 24
  Declarations: 2

=== AST Node Tree ===

*ast.File (go-nodes/control_flow.go:3:1)
  Package: main
  *ast.GenDecl (go-nodes/control_flow.go:5:1) Token: import
    *ast.ImportSpec (go-nodes/control_flow.go:5:8)
      Path: "fmt"
  *ast.FuncDecl (go-nodes/control_flow.go:17:1)
    Name: main
    Type:
      *ast.FuncType (go-nodes/control_flow.go:17:1)
        Params:
          *ast.FieldList (go-nodes/control_flow.go:17:10) NumFields: 0
    Body:
      *ast.BlockStmt (go-nodes/control_flow.go:17:13) Stmts: 67
        *ast.ExprStmt (go-nodes/control_flow.go:18:2)
          *ast.CallExpr (go-nodes/control_flow.go:18:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:18:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:18:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:18:14) Kind: STRING Value: "=== control_flow.go AST Node Coverage ==="
        *ast.ExprStmt (go-nodes/control_flow.go:19:2)
          *ast.CallExpr (go-nodes/control_flow.go:19:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:19:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:19:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:19:14) Kind: STRING Value: "Exercising AST Nodes:"
        *ast.AssignStmt (go-nodes/control_flow.go:22:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:22:2) Name: x
          RHS:
            *ast.BasicLit (go-nodes/control_flow.go:22:7) Kind: INT Value: 10
        *ast.IfStmt (go-nodes/control_flow.go:23:2)
          Cond:
            *ast.BinaryExpr (go-nodes/control_flow.go:23:5) Op: >
              X:
                *ast.Ident (go-nodes/control_flow.go:23:5) Name: x
              Y:
                *ast.BasicLit (go-nodes/control_flow.go:23:9) Kind: INT Value: 5
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:23:11) Stmts: 1
              *ast.ExprStmt (go-nodes/control_flow.go:24:3)
                *ast.CallExpr (go-nodes/control_flow.go:24:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:24:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:24:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:24:14) Kind: STRING Value: "  ✓ ast.IfStmt (simple): x=%d is greater than 5\n"
                    [1]:
                      *ast.Ident (go-nodes/control_flow.go:24:69) Name: x
        *ast.IfStmt (go-nodes/control_flow.go:28:2)
          Init:
            *ast.AssignStmt (go-nodes/control_flow.go:28:5) Token: :=
              LHS:
                *ast.Ident (go-nodes/control_flow.go:28:5) Name: y
              RHS:
                *ast.BasicLit (go-nodes/control_flow.go:28:10) Kind: INT Value: 20
          Cond:
            *ast.BinaryExpr (go-nodes/control_flow.go:28:14) Op: >
              X:
                *ast.Ident (go-nodes/control_flow.go:28:14) Name: y
              Y:
                *ast.BasicLit (go-nodes/control_flow.go:28:18) Kind: INT Value: 15
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:28:21) Stmts: 1
              *ast.ExprStmt (go-nodes/control_flow.go:29:3)
                *ast.CallExpr (go-nodes/control_flow.go:29:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:29:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:29:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:29:14) Kind: STRING Value: "  ✓ ast.IfStmt (with init): y=%d is greater than 15\n"
                    [1]:
                      *ast.Ident (go-nodes/control_flow.go:29:73) Name: y
        *ast.IfStmt (go-nodes/control_flow.go:33:2)
          Cond:
            *ast.BinaryExpr (go-nodes/control_flow.go:33:5) Op: <
              X:
                *ast.Ident (go-nodes/control_flow.go:33:5) Name: x
              Y:
                *ast.BasicLit (go-nodes/control_flow.go:33:9) Kind: INT Value: 5
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:33:11) Stmts: 1
              *ast.ExprStmt (go-nodes/control_flow.go:34:3)
                *ast.CallExpr (go-nodes/control_flow.go:34:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:34:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:34:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:34:14) Kind: STRING Value: "  This won't print\n"
          Else:
            *ast.BlockStmt (go-nodes/control_flow.go:35:9) Stmts: 1
              *ast.ExprStmt (go-nodes/control_flow.go:36:3)
                *ast.CallExpr (go-nodes/control_flow.go:36:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:36:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:36:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:36:14) Kind: STRING Value: "  ✓ ast.IfStmt (else): x=%d is not less than 5\n"
                    [1]:
                      *ast.Ident (go-nodes/control_flow.go:36:68) Name: x
        *ast.AssignStmt (go-nodes/control_flow.go:40:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:40:2) Name: score
          RHS:
            *ast.BasicLit (go-nodes/control_flow.go:40:11) Kind: INT Value: 85
        *ast.IfStmt (go-nodes/control_flow.go:41:2)
          Cond:
            *ast.BinaryExpr (go-nodes/control_flow.go:41:5) Op: >=
              X:
                *ast.Ident (go-nodes/control_flow.go:41:5) Name: score
              Y:
                *ast.BasicLit (go-nodes/control_flow.go:41:14) Kind: INT Value: 90
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:41:17) Stmts: 1
              *ast.ExprStmt (go-nodes/control_flow.go:42:3)
                *ast.CallExpr (go-nodes/control_flow.go:42:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:42:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:42:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:42:14) Kind: STRING Value: "  Grade: A\n"
          Else:
            *ast.IfStmt (go-nodes/control_flow.go:43:9)
              Cond:
                *ast.BinaryExpr (go-nodes/control_flow.go:43:12) Op: >=
                  X:
                    *ast.Ident (go-nodes/control_flow.go:43:12) Name: score
                  Y:
                    *ast.BasicLit (go-nodes/control_flow.go:43:21) Kind: INT Value: 80
              Body:
                *ast.BlockStmt (go-nodes/control_flow.go:43:24) Stmts: 1
                  *ast.ExprStmt (go-nodes/control_flow.go:44:3)
                    *ast.CallExpr (go-nodes/control_flow.go:44:3)
                      Fun:
                        *ast.SelectorExpr (go-nodes/control_flow.go:44:3)
                          X:
                            *ast.Ident (go-nodes/control_flow.go:44:3) Name: fmt
                          Sel: Printf
                      Args:
                        [0]:
                          *ast.BasicLit (go-nodes/control_flow.go:44:14) Kind: STRING Value: "  ✓ ast.IfStmt (else if): Grade B for score=%d\n"
                        [1]:
                          *ast.Ident (go-nodes/control_flow.go:44:68) Name: score
              Else:
                *ast.IfStmt (go-nodes/control_flow.go:45:9)
                  Cond:
                    *ast.BinaryExpr (go-nodes/control_flow.go:45:12) Op: >=
                      X:
                        *ast.Ident (go-nodes/control_flow.go:45:12) Name: score
                      Y:
                        *ast.BasicLit (go-nodes/control_flow.go:45:21) Kind: INT Value: 70
                  Body:
                    *ast.BlockStmt (go-nodes/control_flow.go:45:24) Stmts: 1
                      *ast.ExprStmt (go-nodes/control_flow.go:46:3)
                        *ast.CallExpr (go-nodes/control_flow.go:46:3)
                          Fun:
                            *ast.SelectorExpr (go-nodes/control_flow.go:46:3)
                              X:
                                *ast.Ident (go-nodes/control_flow.go:46:3) Name: fmt
                              Sel: Printf
                          Args:
                            [0]:
                              *ast.BasicLit (go-nodes/control_flow.go:46:14) Kind: STRING Value: "  Grade: C\n"
                  Else:
                    *ast.BlockStmt (go-nodes/control_flow.go:47:9) Stmts: 1
                      *ast.ExprStmt (go-nodes/control_flow.go:48:3)
                        *ast.CallExpr (go-nodes/control_flow.go:48:3)
                          Fun:
                            *ast.SelectorExpr (go-nodes/control_flow.go:48:3)
                              X:
                                *ast.Ident (go-nodes/control_flow.go:48:3) Name: fmt
                              Sel: Printf
                          Args:
                            [0]:
                              *ast.BasicLit (go-nodes/control_flow.go:48:14) Kind: STRING Value: "  Grade: F\n"
        *ast.ExprStmt (go-nodes/control_flow.go:52:2)
          *ast.CallExpr (go-nodes/control_flow.go:52:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:52:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:52:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:52:13) Kind: STRING Value: "  ✓ ast.ForStmt (traditional):\n"
        *ast.ForStmt (go-nodes/control_flow.go:53:2)
          Init:
            *ast.AssignStmt (go-nodes/control_flow.go:53:6) Token: :=
              LHS:
                *ast.Ident (go-nodes/control_flow.go:53:6) Name: i
              RHS:
                *ast.BasicLit (go-nodes/control_flow.go:53:11) Kind: INT Value: 0
          Cond:
            *ast.BinaryExpr (go-nodes/control_flow.go:53:14) Op: <
              X:
                *ast.Ident (go-nodes/control_flow.go:53:14) Name: i
              Y:
                *ast.BasicLit (go-nodes/control_flow.go:53:18) Kind: INT Value: 3
          Post:
            *ast.IncDecStmt (go-nodes/control_flow.go:53:21)
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:53:25) Stmts: 1
              *ast.ExprStmt (go-nodes/control_flow.go:54:3)
                *ast.CallExpr (go-nodes/control_flow.go:54:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:54:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:54:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:54:14) Kind: STRING Value: "    iteration %d\n"
                    [1]:
                      *ast.Ident (go-nodes/control_flow.go:54:36) Name: i
        *ast.ExprStmt (go-nodes/control_flow.go:58:2)
          *ast.CallExpr (go-nodes/control_flow.go:58:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:58:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:58:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:58:13) Kind: STRING Value: "  ✓ ast.ForStmt (while-style):\n"
        *ast.AssignStmt (go-nodes/control_flow.go:59:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:59:2) Name: count
          RHS:
            *ast.BasicLit (go-nodes/control_flow.go:59:11) Kind: INT Value: 0
        *ast.ForStmt (go-nodes/control_flow.go:60:2)
          Cond:
            *ast.BinaryExpr (go-nodes/control_flow.go:60:6) Op: <
              X:
                *ast.Ident (go-nodes/control_flow.go:60:6) Name: count
              Y:
                *ast.BasicLit (go-nodes/control_flow.go:60:14) Kind: INT Value: 3
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:60:16) Stmts: 2
              *ast.ExprStmt (go-nodes/control_flow.go:61:3)
                *ast.CallExpr (go-nodes/control_flow.go:61:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:61:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:61:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:61:14) Kind: STRING Value: "    count=%d\n"
                    [1]:
                      *ast.Ident (go-nodes/control_flow.go:61:32) Name: count
              *ast.IncDecStmt (go-nodes/control_flow.go:62:3)
        *ast.ExprStmt (go-nodes/control_flow.go:66:2)
          *ast.CallExpr (go-nodes/control_flow.go:66:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:66:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:66:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:66:13) Kind: STRING Value: "  ✓ ast.ForStmt (infinite with break):\n"
        *ast.AssignStmt (go-nodes/control_flow.go:67:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:67:2) Name: n
          RHS:
            *ast.BasicLit (go-nodes/control_flow.go:67:7) Kind: INT Value: 0
        *ast.ForStmt (go-nodes/control_flow.go:68:2)
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:68:6) Stmts: 3
              *ast.IfStmt (go-nodes/control_flow.go:69:3)
                Cond:
                  *ast.BinaryExpr (go-nodes/control_flow.go:69:6) Op: >=
                    X:
                      *ast.Ident (go-nodes/control_flow.go:69:6) Name: n
                    Y:
                      *ast.BasicLit (go-nodes/control_flow.go:69:11) Kind: INT Value: 2
                Body:
                  *ast.BlockStmt (go-nodes/control_flow.go:69:13) Stmts: 1
                    *ast.BranchStmt (go-nodes/control_flow.go:70:4)
              *ast.ExprStmt (go-nodes/control_flow.go:72:3)
                *ast.CallExpr (go-nodes/control_flow.go:72:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:72:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:72:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:72:14) Kind: STRING Value: "    n=%d\n"
                    [1]:
                      *ast.Ident (go-nodes/control_flow.go:72:28) Name: n
              *ast.IncDecStmt (go-nodes/control_flow.go:73:3)
        *ast.ExprStmt (go-nodes/control_flow.go:77:2)
          *ast.CallExpr (go-nodes/control_flow.go:77:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:77:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:77:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:77:13) Kind: STRING Value: "  ✓ ast.RangeStmt (slice):\n"
        *ast.AssignStmt (go-nodes/control_flow.go:78:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:78:2) Name: nums
          RHS:
            *ast.CompositeLit (go-nodes/control_flow.go:78:10)
              Type:
                *ast.ArrayType (go-nodes/control_flow.go:78:10)
                  Elt:
                    *ast.Ident (go-nodes/control_flow.go:78:12) Name: int
              Elts:
                [0]:
                  *ast.BasicLit (go-nodes/control_flow.go:78:16) Kind: INT Value: 10
                [1]:
                  *ast.BasicLit (go-nodes/control_flow.go:78:20) Kind: INT Value: 20
                [2]:
                  *ast.BasicLit (go-nodes/control_flow.go:78:24) Kind: INT Value: 30
        *ast.RangeStmt (go-nodes/control_flow.go:79:2) Token: :=
          Key:
            *ast.Ident (go-nodes/control_flow.go:79:6) Name: i
          Value:
            *ast.Ident (go-nodes/control_flow.go:79:9) Name: v
          X:
            *ast.Ident (go-nodes/control_flow.go:79:20) Name: nums
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:79:25) Stmts: 1
              *ast.ExprStmt (go-nodes/control_flow.go:80:3)
                *ast.CallExpr (go-nodes/control_flow.go:80:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:80:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:80:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:80:14) Kind: STRING Value: "    index=%d, value=%d\n"
                    [1]:
                      *ast.Ident (go-nodes/control_flow.go:80:42) Name: i
                    [2]:
                      *ast.Ident (go-nodes/control_flow.go:80:45) Name: v
        *ast.ExprStmt (go-nodes/control_flow.go:84:2)
          *ast.CallExpr (go-nodes/control_flow.go:84:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:84:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:84:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:84:13) Kind: STRING Value: "  ✓ ast.RangeStmt (map):\n"
        *ast.AssignStmt (go-nodes/control_flow.go:85:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:85:2) Name: m
          RHS:
            *ast.CompositeLit (go-nodes/control_flow.go:85:7)
              Type:
                *ast.MapType (go-nodes/control_flow.go:85:7)
                  Key:
                    *ast.Ident (go-nodes/control_flow.go:85:11) Name: string
                  Value:
                    *ast.Ident (go-nodes/control_flow.go:85:18) Name: int
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/control_flow.go:85:22)
                [1]:
                  *ast.KeyValueExpr (go-nodes/control_flow.go:85:30)
        *ast.RangeStmt (go-nodes/control_flow.go:86:2) Token: :=
          Key:
            *ast.Ident (go-nodes/control_flow.go:86:6) Name: k
          Value:
            *ast.Ident (go-nodes/control_flow.go:86:9) Name: v
          X:
            *ast.Ident (go-nodes/control_flow.go:86:20) Name: m
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:86:22) Stmts: 1
              *ast.ExprStmt (go-nodes/control_flow.go:87:3)
                *ast.CallExpr (go-nodes/control_flow.go:87:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:87:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:87:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:87:14) Kind: STRING Value: "    key=%s, value=%d\n"
                    [1]:
                      *ast.Ident (go-nodes/control_flow.go:87:40) Name: k
                    [2]:
                      *ast.Ident (go-nodes/control_flow.go:87:43) Name: v
        *ast.ExprStmt (go-nodes/control_flow.go:91:2)
          *ast.CallExpr (go-nodes/control_flow.go:91:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:91:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:91:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:91:13) Kind: STRING Value: "  ✓ ast.RangeStmt (string):\n"
        *ast.RangeStmt (go-nodes/control_flow.go:92:2) Token: :=
          Key:
            *ast.Ident (go-nodes/control_flow.go:92:6) Name: i
          Value:
            *ast.Ident (go-nodes/control_flow.go:92:9) Name: r
          X:
            *ast.BasicLit (go-nodes/control_flow.go:92:20) Kind: STRING Value: "Hi"
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:92:25) Stmts: 1
              *ast.ExprStmt (go-nodes/control_flow.go:93:3)
                *ast.CallExpr (go-nodes/control_flow.go:93:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:93:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:93:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:93:14) Kind: STRING Value: "    index=%d, rune=%c\n"
                    [1]:
                      *ast.Ident (go-nodes/control_flow.go:93:41) Name: i
                    [2]:
                      *ast.Ident (go-nodes/control_flow.go:93:44) Name: r
        *ast.ExprStmt (go-nodes/control_flow.go:97:2)
          *ast.CallExpr (go-nodes/control_flow.go:97:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:97:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:97:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:97:13) Kind: STRING Value: "  ✓ ast.RangeStmt (channel):\n"
        *ast.AssignStmt (go-nodes/control_flow.go:98:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:98:2) Name: ch
          RHS:
            *ast.CallExpr (go-nodes/control_flow.go:98:8)
              Fun:
                *ast.Ident (go-nodes/control_flow.go:98:8) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/control_flow.go:98:13) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/control_flow.go:98:18) Name: int
                [1]:
                  *ast.BasicLit (go-nodes/control_flow.go:98:23) Kind: INT Value: 3
        *ast.SendStmt (go-nodes/control_flow.go:99:2)
        *ast.SendStmt (go-nodes/control_flow.go:100:2)
        *ast.SendStmt (go-nodes/control_flow.go:101:2)
        *ast.ExprStmt (go-nodes/control_flow.go:102:2)
          *ast.CallExpr (go-nodes/control_flow.go:102:2)
            Fun:
              *ast.Ident (go-nodes/control_flow.go:102:2) Name: close
            Args:
              [0]:
                *ast.Ident (go-nodes/control_flow.go:102:8) Name: ch
        *ast.RangeStmt (go-nodes/control_flow.go:103:2) Token: :=
          Key:
            *ast.Ident (go-nodes/control_flow.go:103:6) Name: v
          X:
            *ast.Ident (go-nodes/control_flow.go:103:17) Name: ch
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:103:20) Stmts: 1
              *ast.ExprStmt (go-nodes/control_flow.go:104:3)
                *ast.CallExpr (go-nodes/control_flow.go:104:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:104:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:104:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:104:14) Kind: STRING Value: "    received=%d\n"
                    [1]:
                      *ast.Ident (go-nodes/control_flow.go:104:35) Name: v
        *ast.ExprStmt (go-nodes/control_flow.go:108:2)
          *ast.CallExpr (go-nodes/control_flow.go:108:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:108:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:108:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:108:13) Kind: STRING Value: "  ✓ ast.RangeStmt (blank identifier):\n"
        *ast.RangeStmt (go-nodes/control_flow.go:109:2) Token: :=
          Key:
            *ast.Ident (go-nodes/control_flow.go:109:6) Name: _
          Value:
            *ast.Ident (go-nodes/control_flow.go:109:9) Name: v
          X:
            *ast.CompositeLit (go-nodes/control_flow.go:109:20)
              Type:
                *ast.ArrayType (go-nodes/control_flow.go:109:20)
                  Elt:
                    *ast.Ident (go-nodes/control_flow.go:109:22) Name: int
              Elts:
                [0]:
                  *ast.BasicLit (go-nodes/control_flow.go:109:26) Kind: INT Value: 5
                [1]:
                  *ast.BasicLit (go-nodes/control_flow.go:109:29) Kind: INT Value: 6
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:109:32) Stmts: 1
              *ast.ExprStmt (go-nodes/control_flow.go:110:3)
                *ast.CallExpr (go-nodes/control_flow.go:110:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/control_flow.go:110:3)
                      X:
                        *ast.Ident (go-nodes/control_flow.go:110:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/control_flow.go:110:14) Kind: STRING Value: "    value=%d\n"
                    [1]:
                      *ast.Ident (go-nodes/control_flow.go:110:32) Name: v
        *ast.ExprStmt (go-nodes/control_flow.go:114:2)
          *ast.CallExpr (go-nodes/control_flow.go:114:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:114:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:114:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:114:13) Kind: STRING Value: "  ✓ ast.SwitchStmt (expression):\n"
        *ast.AssignStmt (go-nodes/control_flow.go:115:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:115:2) Name: day
          RHS:
            *ast.BasicLit (go-nodes/control_flow.go:115:9) Kind: INT Value: 3
        *ast.SwitchStmt (go-nodes/control_flow.go:116:2)
        *ast.ExprStmt (go-nodes/control_flow.go:130:2)
          *ast.CallExpr (go-nodes/control_flow.go:130:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:130:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:130:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:130:13) Kind: STRING Value: "  ✓ ast.SwitchStmt (with init):\n"
        *ast.SwitchStmt (go-nodes/control_flow.go:131:2)
        *ast.ExprStmt (go-nodes/control_flow.go:141:2)
          *ast.CallExpr (go-nodes/control_flow.go:141:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:141:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:141:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:141:13) Kind: STRING Value: "  ✓ ast.SwitchStmt (tagless):\n"
        *ast.AssignStmt (go-nodes/control_flow.go:142:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:142:2) Name: temp
          RHS:
            *ast.BasicLit (go-nodes/control_flow.go:142:10) Kind: INT Value: 25
        *ast.SwitchStmt (go-nodes/control_flow.go:143:2)
        *ast.ExprStmt (go-nodes/control_flow.go:155:2)
          *ast.CallExpr (go-nodes/control_flow.go:155:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:155:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:155:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:155:13) Kind: STRING Value: "  ✓ ast.CaseClause (with fallthrough):\n"
        *ast.AssignStmt (go-nodes/control_flow.go:156:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:156:2) Name: num
          RHS:
            *ast.BasicLit (go-nodes/control_flow.go:156:9) Kind: INT Value: 1
        *ast.SwitchStmt (go-nodes/control_flow.go:157:2)
        *ast.ExprStmt (go-nodes/control_flow.go:168:2)
          *ast.CallExpr (go-nodes/control_flow.go:168:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:168:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:168:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:168:13) Kind: STRING Value: "  ✓ ast.TypeSwitchStmt:\n"
        *ast.DeclStmt (go-nodes/control_flow.go:169:2)
          *ast.GenDecl (go-nodes/control_flow.go:169:2) Token: var
            *ast.ValueSpec (go-nodes/control_flow.go:169:6)
              Name: i
              Type:
                *ast.InterfaceType (go-nodes/control_flow.go:169:8)
                  *ast.FieldList (go-nodes/control_flow.go:169:17) NumFields: 0
              Value[0]:
                *ast.BasicLit (go-nodes/control_flow.go:169:22) Kind: STRING Value: "hello"
        *ast.TypeSwitchStmt (go-nodes/control_flow.go:170:2)
        *ast.ExprStmt (go-nodes/control_flow.go:182:2)
          *ast.CallExpr (go-nodes/control_flow.go:182:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:182:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:182:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:182:13) Kind: STRING Value: "  ✓ ast.TypeSwitchStmt (no assignment):\n"
        *ast.DeclStmt (go-nodes/control_flow.go:183:2)
          *ast.GenDecl (go-nodes/control_flow.go:183:2) Token: var
            *ast.ValueSpec (go-nodes/control_flow.go:183:6)
              Name: j
              Type:
                *ast.InterfaceType (go-nodes/control_flow.go:183:8)
                  *ast.FieldList (go-nodes/control_flow.go:183:17) NumFields: 0
              Value[0]:
                *ast.BasicLit (go-nodes/control_flow.go:183:22) Kind: INT Value: 42
        *ast.TypeSwitchStmt (go-nodes/control_flow.go:184:2)
        *ast.ExprStmt (go-nodes/control_flow.go:194:2)
          *ast.CallExpr (go-nodes/control_flow.go:194:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:194:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:194:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:194:13) Kind: STRING Value: "  ✓ ast.SelectStmt and ast.CommClause:\n"
        *ast.AssignStmt (go-nodes/control_flow.go:195:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:195:2) Name: ch1
          RHS:
            *ast.CallExpr (go-nodes/control_flow.go:195:9)
              Fun:
                *ast.Ident (go-nodes/control_flow.go:195:9) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/control_flow.go:195:14) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/control_flow.go:195:19) Name: int
                [1]:
                  *ast.BasicLit (go-nodes/control_flow.go:195:24) Kind: INT Value: 1
        *ast.AssignStmt (go-nodes/control_flow.go:196:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:196:2) Name: ch2
          RHS:
            *ast.CallExpr (go-nodes/control_flow.go:196:9)
              Fun:
                *ast.Ident (go-nodes/control_flow.go:196:9) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/control_flow.go:196:14) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/control_flow.go:196:19) Name: string
                [1]:
                  *ast.BasicLit (go-nodes/control_flow.go:196:27) Kind: INT Value: 1
        *ast.SendStmt (go-nodes/control_flow.go:197:2)
        *ast.SendStmt (go-nodes/control_flow.go:198:2)
        *ast.SelectStmt (go-nodes/control_flow.go:200:2)
        *ast.AssignStmt (go-nodes/control_flow.go:210:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:210:2) Name: ch3
          RHS:
            *ast.CallExpr (go-nodes/control_flow.go:210:9)
              Fun:
                *ast.Ident (go-nodes/control_flow.go:210:9) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/control_flow.go:210:14) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/control_flow.go:210:19) Name: int
                [1]:
                  *ast.BasicLit (go-nodes/control_flow.go:210:24) Kind: INT Value: 1
        *ast.SelectStmt (go-nodes/control_flow.go:211:2)
        *ast.AssignStmt (go-nodes/control_flow.go:219:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/control_flow.go:219:2) Name: timeout
          RHS:
            *ast.CallExpr (go-nodes/control_flow.go:219:13)
              Fun:
                *ast.Ident (go-nodes/control_flow.go:219:13) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/control_flow.go:219:18) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/control_flow.go:219:23) Name: bool
                [1]:
                  *ast.BasicLit (go-nodes/control_flow.go:219:29) Kind: INT Value: 1
        *ast.SendStmt (go-nodes/control_flow.go:220:2)
        *ast.SelectStmt (go-nodes/control_flow.go:221:2)
        *ast.ExprStmt (go-nodes/control_flow.go:227:2)
          *ast.CallExpr (go-nodes/control_flow.go:227:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:227:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:227:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:227:13) Kind: STRING Value: "  ✓ Nested control flow:\n"
        *ast.ForStmt (go-nodes/control_flow.go:228:2)
          Init:
            *ast.AssignStmt (go-nodes/control_flow.go:228:6) Token: :=
              LHS:
                *ast.Ident (go-nodes/control_flow.go:228:6) Name: i
              RHS:
                *ast.BasicLit (go-nodes/control_flow.go:228:11) Kind: INT Value: 0
          Cond:
            *ast.BinaryExpr (go-nodes/control_flow.go:228:14) Op: <
              X:
                *ast.Ident (go-nodes/control_flow.go:228:14) Name: i
              Y:
                *ast.BasicLit (go-nodes/control_flow.go:228:18) Kind: INT Value: 2
          Post:
            *ast.IncDecStmt (go-nodes/control_flow.go:228:21)
          Body:
            *ast.BlockStmt (go-nodes/control_flow.go:228:25) Stmts: 1
              *ast.IfStmt (go-nodes/control_flow.go:229:3)
                Cond:
                  *ast.BinaryExpr (go-nodes/control_flow.go:229:6) Op: ==
                    X:
                      *ast.BinaryExpr (go-nodes/control_flow.go:229:6) Op: %
                        X:
                          *ast.Ident (go-nodes/control_flow.go:229:6) Name: i
                        Y:
                          *ast.BasicLit (go-nodes/control_flow.go:229:8) Kind: INT Value: 2
                    Y:
                      *ast.BasicLit (go-nodes/control_flow.go:229:13) Kind: INT Value: 0
                Body:
                  *ast.BlockStmt (go-nodes/control_flow.go:229:15) Stmts: 1
                    *ast.SwitchStmt (go-nodes/control_flow.go:230:4)
        *ast.ExprStmt (go-nodes/control_flow.go:237:2)
          *ast.CallExpr (go-nodes/control_flow.go:237:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:237:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:237:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:237:14) Kind: STRING Value: "Summary: All control flow AST node types exercised"
        *ast.ExprStmt (go-nodes/control_flow.go:238:2)
          *ast.CallExpr (go-nodes/control_flow.go:238:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:238:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:238:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:238:14) Kind: STRING Value: "Primary AST Nodes: ast.IfStmt, ast.ForStmt, ast.RangeStmt, ast.SwitchStmt,"
        *ast.ExprStmt (go-nodes/control_flow.go:239:2)
          *ast.CallExpr (go-nodes/control_flow.go:239:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:239:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:239:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:239:14) Kind: STRING Value: "                   ast.TypeSwitchStmt, ast.SelectStmt, ast.CaseClause, ast.CommClause"
        *ast.ExprStmt (go-nodes/control_flow.go:240:2)
          *ast.CallExpr (go-nodes/control_flow.go:240:2)
            Fun:
              *ast.SelectorExpr (go-nodes/control_flow.go:240:2)
                X:
                  *ast.Ident (go-nodes/control_flow.go:240:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/control_flow.go:240:14) Kind: STRING Value: "========================================"
