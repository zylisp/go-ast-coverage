=== AST for identifiers.go ===

File Information:
  Package: main
  Position: go-nodes/identifiers.go:3:1
  Imports:
    "fmt"
  Comment Groups: 22
  Declarations: 9

=== AST Node Tree ===

*ast.File (go-nodes/identifiers.go:3:1)
  Package: main
  *ast.GenDecl (go-nodes/identifiers.go:5:1) Token: import
    *ast.ImportSpec (go-nodes/identifiers.go:5:8)
      Path: "fmt"
  *ast.GenDecl (go-nodes/identifiers.go:13:1) Token: const
    *ast.ValueSpec (go-nodes/identifiers.go:13:7)
      Name: packageConst
      Value[0]:
        *ast.BasicLit (go-nodes/identifiers.go:13:22) Kind: STRING Value: "package constant"
  *ast.GenDecl (go-nodes/identifiers.go:15:1) Token: var
    *ast.ValueSpec (go-nodes/identifiers.go:15:5)
      Name: packageVar
      Value[0]:
        *ast.BasicLit (go-nodes/identifiers.go:15:18) Kind: STRING Value: "package variable"
  *ast.GenDecl (go-nodes/identifiers.go:17:1) Token: type
    *ast.TypeSpec (go-nodes/identifiers.go:17:6)
      Name: CustomType
      Type:
        *ast.Ident (go-nodes/identifiers.go:17:17) Name: int
  *ast.FuncDecl (go-nodes/identifiers.go:19:1)
    Name: main
    Type:
      *ast.FuncType (go-nodes/identifiers.go:19:1)
        Params:
          *ast.FieldList (go-nodes/identifiers.go:19:10) NumFields: 0
    Body:
      *ast.BlockStmt (go-nodes/identifiers.go:19:13) Stmts: 44
        *ast.ExprStmt (go-nodes/identifiers.go:20:2)
          *ast.CallExpr (go-nodes/identifiers.go:20:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:20:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:20:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:20:14) Kind: STRING Value: "=== identifiers.go AST Node Coverage ==="
        *ast.ExprStmt (go-nodes/identifiers.go:21:2)
          *ast.CallExpr (go-nodes/identifiers.go:21:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:21:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:21:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:21:14) Kind: STRING Value: "Exercising AST Nodes:"
        *ast.DeclStmt (go-nodes/identifiers.go:24:2)
          *ast.GenDecl (go-nodes/identifiers.go:24:2) Token: var
            *ast.ValueSpec (go-nodes/identifiers.go:24:6)
              Name: localVar
              Type:
                *ast.Ident (go-nodes/identifiers.go:24:15) Name: int
              Value[0]:
                *ast.BasicLit (go-nodes/identifiers.go:24:21) Kind: INT Value: 42
        *ast.AssignStmt (go-nodes/identifiers.go:25:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/identifiers.go:25:2) Name: shortVar
          RHS:
            *ast.BasicLit (go-nodes/identifiers.go:25:14) Kind: STRING Value: "short declaration"
        *ast.ExprStmt (go-nodes/identifiers.go:26:2)
          *ast.CallExpr (go-nodes/identifiers.go:26:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:26:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:26:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:26:13) Kind: STRING Value: "  ✓ ast.Ident (var declaration): localVar = %d\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:26:67) Name: localVar
        *ast.ExprStmt (go-nodes/identifiers.go:27:2)
          *ast.CallExpr (go-nodes/identifiers.go:27:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:27:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:27:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:27:13) Kind: STRING Value: "  ✓ ast.Ident (short declaration): shortVar = %q\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:27:69) Name: shortVar
        *ast.DeclStmt (go-nodes/identifiers.go:30:2)
          *ast.GenDecl (go-nodes/identifiers.go:30:2) Token: var
            *ast.ValueSpec (go-nodes/identifiers.go:30:6)
              Name: x
              Name: y
              Name: z
              Type:
                *ast.Ident (go-nodes/identifiers.go:30:14) Name: int
              Value[0]:
                *ast.BasicLit (go-nodes/identifiers.go:30:20) Kind: INT Value: 1
              Value[1]:
                *ast.BasicLit (go-nodes/identifiers.go:30:23) Kind: INT Value: 2
              Value[2]:
                *ast.BasicLit (go-nodes/identifiers.go:30:26) Kind: INT Value: 3
        *ast.ExprStmt (go-nodes/identifiers.go:31:2)
          *ast.CallExpr (go-nodes/identifiers.go:31:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:31:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:31:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:31:13) Kind: STRING Value: "  ✓ ast.Ident (multiple vars): x=%d, y=%d, z=%d\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:31:68) Name: x
              [2]:
                *ast.Ident (go-nodes/identifiers.go:31:71) Name: y
              [3]:
                *ast.Ident (go-nodes/identifiers.go:31:74) Name: z
        *ast.DeclStmt (go-nodes/identifiers.go:34:2)
          *ast.GenDecl (go-nodes/identifiers.go:34:2) Token: const
            *ast.ValueSpec (go-nodes/identifiers.go:34:8)
              Name: localConst
              Value[0]:
                *ast.BasicLit (go-nodes/identifiers.go:34:21) Kind: INT Value: 100
        *ast.DeclStmt (go-nodes/identifiers.go:35:2)
          *ast.GenDecl (go-nodes/identifiers.go:35:2) Token: const
            *ast.ValueSpec (go-nodes/identifiers.go:36:3)
              Name: First
              Value[0]:
                *ast.BasicLit (go-nodes/identifiers.go:36:12) Kind: INT Value: 1
            *ast.ValueSpec (go-nodes/identifiers.go:37:3)
              Name: Second
              Value[0]:
                *ast.BasicLit (go-nodes/identifiers.go:37:12) Kind: INT Value: 2
            *ast.ValueSpec (go-nodes/identifiers.go:38:3)
              Name: Third
              Value[0]:
                *ast.BasicLit (go-nodes/identifiers.go:38:12) Kind: INT Value: 3
        *ast.ExprStmt (go-nodes/identifiers.go:40:2)
          *ast.CallExpr (go-nodes/identifiers.go:40:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:40:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:40:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:40:13) Kind: STRING Value: "  ✓ ast.Ident (const): localConst = %d\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:40:59) Name: localConst
        *ast.ExprStmt (go-nodes/identifiers.go:41:2)
          *ast.CallExpr (go-nodes/identifiers.go:41:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:41:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:41:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:41:13) Kind: STRING Value: "  ✓ ast.Ident (const block): First=%d, Second=%d, Third=%d\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:41:79) Name: First
              [2]:
                *ast.Ident (go-nodes/identifiers.go:41:86) Name: Second
              [3]:
                *ast.Ident (go-nodes/identifiers.go:41:94) Name: Third
        *ast.DeclStmt (go-nodes/identifiers.go:44:2)
          *ast.GenDecl (go-nodes/identifiers.go:44:2) Token: type
            *ast.TypeSpec (go-nodes/identifiers.go:44:7)
              Name: MyInt
              Type:
                *ast.Ident (go-nodes/identifiers.go:44:13) Name: int
        *ast.DeclStmt (go-nodes/identifiers.go:45:2)
          *ast.GenDecl (go-nodes/identifiers.go:45:2) Token: type
            *ast.TypeSpec (go-nodes/identifiers.go:45:7)
              Name: MyString
              Type:
                *ast.Ident (go-nodes/identifiers.go:45:16) Name: string
        *ast.DeclStmt (go-nodes/identifiers.go:46:2)
          *ast.GenDecl (go-nodes/identifiers.go:46:2) Token: var
            *ast.ValueSpec (go-nodes/identifiers.go:46:6)
              Name: mi
              Type:
                *ast.Ident (go-nodes/identifiers.go:46:9) Name: MyInt
              Value[0]:
                *ast.BasicLit (go-nodes/identifiers.go:46:17) Kind: INT Value: 42
        *ast.DeclStmt (go-nodes/identifiers.go:47:2)
          *ast.GenDecl (go-nodes/identifiers.go:47:2) Token: var
            *ast.ValueSpec (go-nodes/identifiers.go:47:6)
              Name: ms
              Type:
                *ast.Ident (go-nodes/identifiers.go:47:9) Name: MyString
              Value[0]:
                *ast.BasicLit (go-nodes/identifiers.go:47:20) Kind: STRING Value: "hello"
        *ast.ExprStmt (go-nodes/identifiers.go:48:2)
          *ast.CallExpr (go-nodes/identifiers.go:48:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:48:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:48:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:48:13) Kind: STRING Value: "  ✓ ast.Ident (type declaration): MyInt = %d\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:48:65) Name: mi
        *ast.ExprStmt (go-nodes/identifiers.go:49:2)
          *ast.CallExpr (go-nodes/identifiers.go:49:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:49:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:49:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:49:13) Kind: STRING Value: "  ✓ ast.Ident (type declaration): MyString = %q\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:49:68) Name: ms
        *ast.AssignStmt (go-nodes/identifiers.go:52:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/identifiers.go:52:2) Name: result
          RHS:
            *ast.CallExpr (go-nodes/identifiers.go:52:12)
              Fun:
                *ast.Ident (go-nodes/identifiers.go:52:12) Name: helperFunction
              Args:
                [0]:
                  *ast.BasicLit (go-nodes/identifiers.go:52:27) Kind: INT Value: 10
                [1]:
                  *ast.BasicLit (go-nodes/identifiers.go:52:31) Kind: INT Value: 20
        *ast.ExprStmt (go-nodes/identifiers.go:53:2)
          *ast.CallExpr (go-nodes/identifiers.go:53:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:53:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:53:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:53:13) Kind: STRING Value: "  ✓ ast.Ident (function name): helperFunction result = %d\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:53:78) Name: result
        *ast.AssignStmt (go-nodes/identifiers.go:56:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/identifiers.go:56:2) Name: obj
          RHS:
            *ast.CompositeLit (go-nodes/identifiers.go:56:9)
              Type:
                *ast.Ident (go-nodes/identifiers.go:56:9) Name: MyObject
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/identifiers.go:56:18)
        *ast.AssignStmt (go-nodes/identifiers.go:57:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/identifiers.go:57:2) Name: methodResult
          RHS:
            *ast.CallExpr (go-nodes/identifiers.go:57:18)
              Fun:
                *ast.SelectorExpr (go-nodes/identifiers.go:57:18)
                  X:
                    *ast.Ident (go-nodes/identifiers.go:57:18) Name: obj
                  Sel: Method
        *ast.ExprStmt (go-nodes/identifiers.go:58:2)
          *ast.CallExpr (go-nodes/identifiers.go:58:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:58:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:58:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:58:13) Kind: STRING Value: "  ✓ ast.Ident (method name): Method result = %d\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:58:68) Name: methodResult
        *ast.AssignStmt (go-nodes/identifiers.go:61:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/identifiers.go:61:2) Name: counter
          RHS:
            *ast.BasicLit (go-nodes/identifiers.go:61:13) Kind: INT Value: 0
        *ast.LabeledStmt (go-nodes/identifiers.go:62:1)
        *ast.AssignStmt (go-nodes/identifiers.go:74:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/identifiers.go:74:2) Name: _
            *ast.Ident (go-nodes/identifiers.go:74:5) Name: ignored
          RHS:
            *ast.CallExpr (go-nodes/identifiers.go:74:16)
              Fun:
                *ast.Ident (go-nodes/identifiers.go:74:16) Name: multiReturn
        *ast.ExprStmt (go-nodes/identifiers.go:75:2)
          *ast.CallExpr (go-nodes/identifiers.go:75:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:75:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:75:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:75:13) Kind: STRING Value: "  ✓ ast.Ident (blank identifier): ignored second return value, got %d\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:75:90) Name: ignored
        *ast.ExprStmt (go-nodes/identifiers.go:78:2)
          *ast.CallExpr (go-nodes/identifiers.go:78:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:78:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:78:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:78:13) Kind: STRING Value: "  ✓ ast.Ident (package qualifier): fmt.Println\n"
        *ast.DeclStmt (go-nodes/identifiers.go:81:2)
          *ast.GenDecl (go-nodes/identifiers.go:81:2) Token: var
            *ast.ValueSpec (go-nodes/identifiers.go:81:6)
              Name: length
              Value[0]:
                *ast.CallExpr (go-nodes/identifiers.go:81:15)
                  Fun:
                    *ast.Ident (go-nodes/identifiers.go:81:15) Name: len
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/identifiers.go:81:19) Kind: STRING Value: "hello"
        *ast.DeclStmt (go-nodes/identifiers.go:82:2)
          *ast.GenDecl (go-nodes/identifiers.go:82:2) Token: var
            *ast.ValueSpec (go-nodes/identifiers.go:82:6)
              Name: capacity
              Value[0]:
                *ast.CallExpr (go-nodes/identifiers.go:82:17)
                  Fun:
                    *ast.Ident (go-nodes/identifiers.go:82:17) Name: cap
                  Args:
                    [0]:
                      *ast.CallExpr (go-nodes/identifiers.go:82:21)
                        Fun:
                          *ast.Ident (go-nodes/identifiers.go:82:21) Name: make
                        Args:
                          [0]:
                            *ast.ArrayType (go-nodes/identifiers.go:82:26)
                              Elt:
                                *ast.Ident (go-nodes/identifiers.go:82:28) Name: int
                          [1]:
                            *ast.BasicLit (go-nodes/identifiers.go:82:33) Kind: INT Value: 5
                          [2]:
                            *ast.BasicLit (go-nodes/identifiers.go:82:36) Kind: INT Value: 10
        *ast.ExprStmt (go-nodes/identifiers.go:83:2)
          *ast.CallExpr (go-nodes/identifiers.go:83:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:83:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:83:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:83:13) Kind: STRING Value: "  ✓ ast.Ident (builtin len): %d\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:83:52) Name: length
        *ast.ExprStmt (go-nodes/identifiers.go:84:2)
          *ast.CallExpr (go-nodes/identifiers.go:84:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:84:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:84:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:84:13) Kind: STRING Value: "  ✓ ast.Ident (builtin cap): %d\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:84:52) Name: capacity
        *ast.DeclStmt (go-nodes/identifiers.go:87:2)
          *ast.GenDecl (go-nodes/identifiers.go:87:2) Token: type
            *ast.TypeSpec (go-nodes/identifiers.go:87:7)
              Name: Person
              Type:
                *ast.StructType (go-nodes/identifiers.go:87:14)
                  *ast.FieldList (go-nodes/identifiers.go:87:21) NumFields: 2
                    Field[0]:
                      *ast.Field (go-nodes/identifiers.go:88:3)
                        Name: Name
                        Type:
                          *ast.Ident (go-nodes/identifiers.go:88:8) Name: string
                    Field[1]:
                      *ast.Field (go-nodes/identifiers.go:89:3)
                        Name: Age
                        Type:
                          *ast.Ident (go-nodes/identifiers.go:89:8) Name: int
        *ast.AssignStmt (go-nodes/identifiers.go:91:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/identifiers.go:91:2) Name: p
          RHS:
            *ast.CompositeLit (go-nodes/identifiers.go:91:7)
              Type:
                *ast.Ident (go-nodes/identifiers.go:91:7) Name: Person
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/identifiers.go:91:14)
                [1]:
                  *ast.KeyValueExpr (go-nodes/identifiers.go:91:29)
        *ast.ExprStmt (go-nodes/identifiers.go:92:2)
          *ast.CallExpr (go-nodes/identifiers.go:92:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:92:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:92:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:92:13) Kind: STRING Value: "  ✓ ast.Ident (struct field): Name=%q, Age=%d\n"
              [1]:
                *ast.SelectorExpr (go-nodes/identifiers.go:92:66)
                  X:
                    *ast.Ident (go-nodes/identifiers.go:92:66) Name: p
                  Sel: Name
              [2]:
                *ast.SelectorExpr (go-nodes/identifiers.go:92:74)
                  X:
                    *ast.Ident (go-nodes/identifiers.go:92:74) Name: p
                  Sel: Age
        *ast.DeclStmt (go-nodes/identifiers.go:95:2)
          *ast.GenDecl (go-nodes/identifiers.go:95:2) Token: const
            *ast.ValueSpec (go-nodes/identifiers.go:96:3)
              Name: A
              Value[0]:
                *ast.Ident (go-nodes/identifiers.go:96:7) Name: iota
            *ast.ValueSpec (go-nodes/identifiers.go:97:3)
              Name: B
            *ast.ValueSpec (go-nodes/identifiers.go:98:3)
              Name: C
        *ast.ExprStmt (go-nodes/identifiers.go:100:2)
          *ast.CallExpr (go-nodes/identifiers.go:100:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:100:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:100:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:100:13) Kind: STRING Value: "  ✓ ast.Ident (iota): A=%d, B=%d, C=%d\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:100:59) Name: A
              [2]:
                *ast.Ident (go-nodes/identifiers.go:100:62) Name: B
              [3]:
                *ast.Ident (go-nodes/identifiers.go:100:65) Name: C
        *ast.DeclStmt (go-nodes/identifiers.go:103:2)
          *ast.GenDecl (go-nodes/identifiers.go:103:2) Token: var
            *ast.ValueSpec (go-nodes/identifiers.go:103:6)
              Name: my_variable
              Value[0]:
                *ast.BasicLit (go-nodes/identifiers.go:103:20) Kind: STRING Value: "underscore_style"
        *ast.DeclStmt (go-nodes/identifiers.go:104:2)
          *ast.GenDecl (go-nodes/identifiers.go:104:2) Token: var
            *ast.ValueSpec (go-nodes/identifiers.go:104:6)
              Name: myVariable
              Value[0]:
                *ast.BasicLit (go-nodes/identifiers.go:104:19) Kind: STRING Value: "camelCase"
        *ast.DeclStmt (go-nodes/identifiers.go:105:2)
          *ast.GenDecl (go-nodes/identifiers.go:105:2) Token: var
            *ast.ValueSpec (go-nodes/identifiers.go:105:6)
              Name: MyExportedVar
              Value[0]:
                *ast.BasicLit (go-nodes/identifiers.go:105:22) Kind: STRING Value: "PascalCase"
        *ast.ExprStmt (go-nodes/identifiers.go:106:2)
          *ast.CallExpr (go-nodes/identifiers.go:106:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:106:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:106:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:106:13) Kind: STRING Value: "  ✓ ast.Ident (naming styles): %q, %q, %q\n"
              [1]:
                *ast.Ident (go-nodes/identifiers.go:106:62) Name: my_variable
              [2]:
                *ast.Ident (go-nodes/identifiers.go:106:75) Name: myVariable
              [3]:
                *ast.Ident (go-nodes/identifiers.go:106:87) Name: MyExportedVar
        *ast.ExprStmt (go-nodes/identifiers.go:108:2)
          *ast.CallExpr (go-nodes/identifiers.go:108:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:108:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:108:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:108:14) Kind: STRING Value: "Summary: 20+ unique identifier contexts exercised"
        *ast.ExprStmt (go-nodes/identifiers.go:109:2)
          *ast.CallExpr (go-nodes/identifiers.go:109:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:109:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:109:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:109:14) Kind: STRING Value: "Primary AST Nodes: ast.Ident, ast.Object, ast.Scope"
        *ast.ExprStmt (go-nodes/identifiers.go:110:2)
          *ast.CallExpr (go-nodes/identifiers.go:110:2)
            Fun:
              *ast.SelectorExpr (go-nodes/identifiers.go:110:2)
                X:
                  *ast.Ident (go-nodes/identifiers.go:110:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/identifiers.go:110:14) Kind: STRING Value: "========================================"
  *ast.FuncDecl (go-nodes/identifiers.go:114:1)
    Name: helperFunction
    Type:
      *ast.FuncType (go-nodes/identifiers.go:114:1)
        Params:
          *ast.FieldList (go-nodes/identifiers.go:114:20) NumFields: 2
            Field[0]:
              *ast.Field (go-nodes/identifiers.go:114:21)
                Name: a
                Name: b
                Type:
                  *ast.Ident (go-nodes/identifiers.go:114:26) Name: int
        Results:
          *ast.FieldList (go-nodes/identifiers.go:114:31) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/identifiers.go:114:31)
                Type:
                  *ast.Ident (go-nodes/identifiers.go:114:31) Name: int
    Body:
      *ast.BlockStmt (go-nodes/identifiers.go:114:35) Stmts: 1
        *ast.ReturnStmt (go-nodes/identifiers.go:115:2)
          Result[0]:
            *ast.BinaryExpr (go-nodes/identifiers.go:115:9) Op: +
              X:
                *ast.Ident (go-nodes/identifiers.go:115:9) Name: a
              Y:
                *ast.Ident (go-nodes/identifiers.go:115:13) Name: b
  *ast.GenDecl (go-nodes/identifiers.go:119:1) Token: type
    *ast.TypeSpec (go-nodes/identifiers.go:119:6)
      Name: MyObject
      Type:
        *ast.StructType (go-nodes/identifiers.go:119:15)
          *ast.FieldList (go-nodes/identifiers.go:119:22) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/identifiers.go:120:2)
                Name: value
                Type:
                  *ast.Ident (go-nodes/identifiers.go:120:8) Name: int
  *ast.FuncDecl (go-nodes/identifiers.go:123:1)
    Name: Method
    Receiver:
      *ast.FieldList (go-nodes/identifiers.go:123:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/identifiers.go:123:7)
            Name: m
            Type:
              *ast.Ident (go-nodes/identifiers.go:123:9) Name: MyObject
    Type:
      *ast.FuncType (go-nodes/identifiers.go:123:1)
        Params:
          *ast.FieldList (go-nodes/identifiers.go:123:25) NumFields: 0
        Results:
          *ast.FieldList (go-nodes/identifiers.go:123:28) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/identifiers.go:123:28)
                Type:
                  *ast.Ident (go-nodes/identifiers.go:123:28) Name: int
    Body:
      *ast.BlockStmt (go-nodes/identifiers.go:123:32) Stmts: 1
        *ast.ReturnStmt (go-nodes/identifiers.go:124:2)
          Result[0]:
            *ast.BinaryExpr (go-nodes/identifiers.go:124:9) Op: *
              X:
                *ast.SelectorExpr (go-nodes/identifiers.go:124:9)
                  X:
                    *ast.Ident (go-nodes/identifiers.go:124:9) Name: m
                  Sel: value
              Y:
                *ast.BasicLit (go-nodes/identifiers.go:124:19) Kind: INT Value: 2
  *ast.FuncDecl (go-nodes/identifiers.go:128:1)
    Name: multiReturn
    Type:
      *ast.FuncType (go-nodes/identifiers.go:128:1)
        Params:
          *ast.FieldList (go-nodes/identifiers.go:128:17) NumFields: 0
        Results:
          *ast.FieldList (go-nodes/identifiers.go:128:20) NumFields: 2
            Field[0]:
              *ast.Field (go-nodes/identifiers.go:128:21)
                Type:
                  *ast.Ident (go-nodes/identifiers.go:128:21) Name: int
            Field[1]:
              *ast.Field (go-nodes/identifiers.go:128:26)
                Type:
                  *ast.Ident (go-nodes/identifiers.go:128:26) Name: int
    Body:
      *ast.BlockStmt (go-nodes/identifiers.go:128:31) Stmts: 1
        *ast.ReturnStmt (go-nodes/identifiers.go:129:2)
          Result[0]:
            *ast.BasicLit (go-nodes/identifiers.go:129:9) Kind: INT Value: 1
          Result[1]:
            *ast.BasicLit (go-nodes/identifiers.go:129:12) Kind: INT Value: 2
