=== AST for basic_literals.go ===

File Information:
  Package: main
  Position: go-nodes/basic_literals.go:3:1
  Imports:
    "fmt"
  Comment Groups: 11
  Declarations: 2

=== AST Node Tree ===

*ast.File (go-nodes/basic_literals.go:3:1)
  Package: main
  *ast.GenDecl (go-nodes/basic_literals.go:5:1) Token: import
    *ast.ImportSpec (go-nodes/basic_literals.go:5:8)
      Path: "fmt"
  *ast.FuncDecl (go-nodes/basic_literals.go:13:1)
    Name: main
    Type:
      *ast.FuncType (go-nodes/basic_literals.go:13:1)
        Params:
          *ast.FieldList (go-nodes/basic_literals.go:13:10) NumFields: 0
    Body:
      *ast.BlockStmt (go-nodes/basic_literals.go:13:13) Stmts: 69
        *ast.ExprStmt (go-nodes/basic_literals.go:14:2)
          *ast.CallExpr (go-nodes/basic_literals.go:14:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:14:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:14:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:14:14) Kind: STRING Value: "=== basic_literals.go AST Node Coverage ==="
        *ast.ExprStmt (go-nodes/basic_literals.go:15:2)
          *ast.CallExpr (go-nodes/basic_literals.go:15:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:15:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:15:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:15:14) Kind: STRING Value: "Exercising AST Nodes:"
        *ast.DeclStmt (go-nodes/basic_literals.go:18:2)
          *ast.GenDecl (go-nodes/basic_literals.go:18:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:18:6)
              Name: intDec
              Type:
                *ast.Ident (go-nodes/basic_literals.go:18:13) Name: int
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:18:19) Kind: INT Value: 42
        *ast.DeclStmt (go-nodes/basic_literals.go:19:2)
          *ast.GenDecl (go-nodes/basic_literals.go:19:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:19:6)
              Name: intHex
              Type:
                *ast.Ident (go-nodes/basic_literals.go:19:13) Name: int
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:19:19) Kind: INT Value: 0x2A
        *ast.DeclStmt (go-nodes/basic_literals.go:20:2)
          *ast.GenDecl (go-nodes/basic_literals.go:20:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:20:6)
              Name: intOct
              Type:
                *ast.Ident (go-nodes/basic_literals.go:20:13) Name: int
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:20:19) Kind: INT Value: 052
        *ast.DeclStmt (go-nodes/basic_literals.go:21:2)
          *ast.GenDecl (go-nodes/basic_literals.go:21:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:21:6)
              Name: intBin
              Type:
                *ast.Ident (go-nodes/basic_literals.go:21:13) Name: int
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:21:19) Kind: INT Value: 0b101010
        *ast.ExprStmt (go-nodes/basic_literals.go:22:2)
          *ast.CallExpr (go-nodes/basic_literals.go:22:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:22:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:22:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:22:13) Kind: STRING Value: "  ✓ ast.BasicLit (INT decimal): %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:22:55) Name: intDec
        *ast.ExprStmt (go-nodes/basic_literals.go:23:2)
          *ast.CallExpr (go-nodes/basic_literals.go:23:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:23:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:23:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:23:13) Kind: STRING Value: "  ✓ ast.BasicLit (INT hex): 0x%X = %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:23:58) Name: intHex
              [2]:
                *ast.Ident (go-nodes/basic_literals.go:23:66) Name: intHex
        *ast.ExprStmt (go-nodes/basic_literals.go:24:2)
          *ast.CallExpr (go-nodes/basic_literals.go:24:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:24:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:24:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:24:13) Kind: STRING Value: "  ✓ ast.BasicLit (INT octal): 0%o = %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:24:59) Name: intOct
              [2]:
                *ast.Ident (go-nodes/basic_literals.go:24:67) Name: intOct
        *ast.ExprStmt (go-nodes/basic_literals.go:25:2)
          *ast.CallExpr (go-nodes/basic_literals.go:25:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:25:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:25:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:25:13) Kind: STRING Value: "  ✓ ast.BasicLit (INT binary): 0b%b = %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:25:61) Name: intBin
              [2]:
                *ast.Ident (go-nodes/basic_literals.go:25:69) Name: intBin
        *ast.DeclStmt (go-nodes/basic_literals.go:28:2)
          *ast.GenDecl (go-nodes/basic_literals.go:28:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:28:6)
              Name: i8
              Type:
                *ast.Ident (go-nodes/basic_literals.go:28:9) Name: int8
              Value[0]:
                *ast.UnaryExpr (go-nodes/basic_literals.go:28:16) Op: -
                  X:
                    *ast.BasicLit (go-nodes/basic_literals.go:28:17) Kind: INT Value: 128
        *ast.DeclStmt (go-nodes/basic_literals.go:29:2)
          *ast.GenDecl (go-nodes/basic_literals.go:29:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:29:6)
              Name: i16
              Type:
                *ast.Ident (go-nodes/basic_literals.go:29:10) Name: int16
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:29:18) Kind: INT Value: 32767
        *ast.DeclStmt (go-nodes/basic_literals.go:30:2)
          *ast.GenDecl (go-nodes/basic_literals.go:30:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:30:6)
              Name: i32
              Type:
                *ast.Ident (go-nodes/basic_literals.go:30:10) Name: int32
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:30:18) Kind: INT Value: 2147483647
        *ast.DeclStmt (go-nodes/basic_literals.go:31:2)
          *ast.GenDecl (go-nodes/basic_literals.go:31:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:31:6)
              Name: i64
              Type:
                *ast.Ident (go-nodes/basic_literals.go:31:10) Name: int64
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:31:18) Kind: INT Value: 9223372036854775807
        *ast.DeclStmt (go-nodes/basic_literals.go:32:2)
          *ast.GenDecl (go-nodes/basic_literals.go:32:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:32:6)
              Name: u8
              Type:
                *ast.Ident (go-nodes/basic_literals.go:32:9) Name: uint8
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:32:17) Kind: INT Value: 255
        *ast.DeclStmt (go-nodes/basic_literals.go:33:2)
          *ast.GenDecl (go-nodes/basic_literals.go:33:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:33:6)
              Name: u16
              Type:
                *ast.Ident (go-nodes/basic_literals.go:33:10) Name: uint16
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:33:19) Kind: INT Value: 65535
        *ast.DeclStmt (go-nodes/basic_literals.go:34:2)
          *ast.GenDecl (go-nodes/basic_literals.go:34:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:34:6)
              Name: u32
              Type:
                *ast.Ident (go-nodes/basic_literals.go:34:10) Name: uint32
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:34:19) Kind: INT Value: 4294967295
        *ast.DeclStmt (go-nodes/basic_literals.go:35:2)
          *ast.GenDecl (go-nodes/basic_literals.go:35:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:35:6)
              Name: u64
              Type:
                *ast.Ident (go-nodes/basic_literals.go:35:10) Name: uint64
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:35:19) Kind: INT Value: 18446744073709551615
        *ast.ExprStmt (go-nodes/basic_literals.go:36:2)
          *ast.CallExpr (go-nodes/basic_literals.go:36:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:36:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:36:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:36:13) Kind: STRING Value: "  ✓ ast.BasicLit (INT8): %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:36:48) Name: i8
        *ast.ExprStmt (go-nodes/basic_literals.go:37:2)
          *ast.CallExpr (go-nodes/basic_literals.go:37:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:37:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:37:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:37:13) Kind: STRING Value: "  ✓ ast.BasicLit (INT16): %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:37:49) Name: i16
        *ast.ExprStmt (go-nodes/basic_literals.go:38:2)
          *ast.CallExpr (go-nodes/basic_literals.go:38:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:38:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:38:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:38:13) Kind: STRING Value: "  ✓ ast.BasicLit (INT32): %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:38:49) Name: i32
        *ast.ExprStmt (go-nodes/basic_literals.go:39:2)
          *ast.CallExpr (go-nodes/basic_literals.go:39:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:39:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:39:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:39:13) Kind: STRING Value: "  ✓ ast.BasicLit (INT64): %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:39:49) Name: i64
        *ast.ExprStmt (go-nodes/basic_literals.go:40:2)
          *ast.CallExpr (go-nodes/basic_literals.go:40:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:40:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:40:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:40:13) Kind: STRING Value: "  ✓ ast.BasicLit (UINT8): %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:40:49) Name: u8
        *ast.ExprStmt (go-nodes/basic_literals.go:41:2)
          *ast.CallExpr (go-nodes/basic_literals.go:41:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:41:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:41:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:41:13) Kind: STRING Value: "  ✓ ast.BasicLit (UINT16): %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:41:50) Name: u16
        *ast.ExprStmt (go-nodes/basic_literals.go:42:2)
          *ast.CallExpr (go-nodes/basic_literals.go:42:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:42:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:42:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:42:13) Kind: STRING Value: "  ✓ ast.BasicLit (UINT32): %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:42:50) Name: u32
        *ast.ExprStmt (go-nodes/basic_literals.go:43:2)
          *ast.CallExpr (go-nodes/basic_literals.go:43:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:43:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:43:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:43:13) Kind: STRING Value: "  ✓ ast.BasicLit (UINT64): %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:43:50) Name: u64
        *ast.DeclStmt (go-nodes/basic_literals.go:46:2)
          *ast.GenDecl (go-nodes/basic_literals.go:46:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:46:6)
              Name: f32
              Type:
                *ast.Ident (go-nodes/basic_literals.go:46:10) Name: float32
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:46:20) Kind: FLOAT Value: 3.14159
        *ast.DeclStmt (go-nodes/basic_literals.go:47:2)
          *ast.GenDecl (go-nodes/basic_literals.go:47:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:47:6)
              Name: f64
              Type:
                *ast.Ident (go-nodes/basic_literals.go:47:10) Name: float64
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:47:20) Kind: FLOAT Value: 2.718281828459045
        *ast.DeclStmt (go-nodes/basic_literals.go:48:2)
          *ast.GenDecl (go-nodes/basic_literals.go:48:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:48:6)
              Name: floatExp
              Type:
                *ast.Ident (go-nodes/basic_literals.go:48:15) Name: float64
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:48:25) Kind: FLOAT Value: 1.23e10
        *ast.DeclStmt (go-nodes/basic_literals.go:49:2)
          *ast.GenDecl (go-nodes/basic_literals.go:49:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:49:6)
              Name: floatHex
              Type:
                *ast.Ident (go-nodes/basic_literals.go:49:15) Name: float64
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:49:25) Kind: FLOAT Value: 0x1.fp+1
        *ast.ExprStmt (go-nodes/basic_literals.go:50:2)
          *ast.CallExpr (go-nodes/basic_literals.go:50:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:50:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:50:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:50:13) Kind: STRING Value: "  ✓ ast.BasicLit (FLOAT32): %f\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:50:51) Name: f32
        *ast.ExprStmt (go-nodes/basic_literals.go:51:2)
          *ast.CallExpr (go-nodes/basic_literals.go:51:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:51:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:51:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:51:13) Kind: STRING Value: "  ✓ ast.BasicLit (FLOAT64): %f\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:51:51) Name: f64
        *ast.ExprStmt (go-nodes/basic_literals.go:52:2)
          *ast.CallExpr (go-nodes/basic_literals.go:52:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:52:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:52:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:52:13) Kind: STRING Value: "  ✓ ast.BasicLit (FLOAT exp): %e\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:52:53) Name: floatExp
        *ast.ExprStmt (go-nodes/basic_literals.go:53:2)
          *ast.CallExpr (go-nodes/basic_literals.go:53:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:53:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:53:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:53:13) Kind: STRING Value: "  ✓ ast.BasicLit (FLOAT hex): %f\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:53:53) Name: floatHex
        *ast.DeclStmt (go-nodes/basic_literals.go:56:2)
          *ast.GenDecl (go-nodes/basic_literals.go:56:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:56:6)
              Name: c64
              Type:
                *ast.Ident (go-nodes/basic_literals.go:56:10) Name: complex64
              Value[0]:
                *ast.BinaryExpr (go-nodes/basic_literals.go:56:22) Op: +
                  X:
                    *ast.BasicLit (go-nodes/basic_literals.go:56:22) Kind: INT Value: 1
                  Y:
                    *ast.BasicLit (go-nodes/basic_literals.go:56:26) Kind: IMAG Value: 2i
        *ast.DeclStmt (go-nodes/basic_literals.go:57:2)
          *ast.GenDecl (go-nodes/basic_literals.go:57:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:57:6)
              Name: c128
              Type:
                *ast.Ident (go-nodes/basic_literals.go:57:11) Name: complex128
              Value[0]:
                *ast.BinaryExpr (go-nodes/basic_literals.go:57:24) Op: +
                  X:
                    *ast.BasicLit (go-nodes/basic_literals.go:57:24) Kind: FLOAT Value: 3.14
                  Y:
                    *ast.BasicLit (go-nodes/basic_literals.go:57:31) Kind: IMAG Value: 2.71i
        *ast.DeclStmt (go-nodes/basic_literals.go:58:2)
          *ast.GenDecl (go-nodes/basic_literals.go:58:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:58:6)
              Name: imagOnly
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:58:17) Kind: IMAG Value: 5i
        *ast.ExprStmt (go-nodes/basic_literals.go:59:2)
          *ast.CallExpr (go-nodes/basic_literals.go:59:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:59:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:59:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:59:13) Kind: STRING Value: "  ✓ ast.BasicLit (COMPLEX64): %v\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:59:53) Name: c64
        *ast.ExprStmt (go-nodes/basic_literals.go:60:2)
          *ast.CallExpr (go-nodes/basic_literals.go:60:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:60:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:60:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:60:13) Kind: STRING Value: "  ✓ ast.BasicLit (COMPLEX128): %v\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:60:54) Name: c128
        *ast.ExprStmt (go-nodes/basic_literals.go:61:2)
          *ast.CallExpr (go-nodes/basic_literals.go:61:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:61:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:61:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:61:13) Kind: STRING Value: "  ✓ ast.BasicLit (IMAG): %v\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:61:48) Name: imagOnly
        *ast.DeclStmt (go-nodes/basic_literals.go:64:2)
          *ast.GenDecl (go-nodes/basic_literals.go:64:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:64:6)
              Name: char
              Type:
                *ast.Ident (go-nodes/basic_literals.go:64:11) Name: rune
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:64:18) Kind: CHAR Value: 'A'
        *ast.DeclStmt (go-nodes/basic_literals.go:65:2)
          *ast.GenDecl (go-nodes/basic_literals.go:65:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:65:6)
              Name: charUnicode
              Type:
                *ast.Ident (go-nodes/basic_literals.go:65:18) Name: rune
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:65:25) Kind: CHAR Value: '\u0041'
        *ast.DeclStmt (go-nodes/basic_literals.go:66:2)
          *ast.GenDecl (go-nodes/basic_literals.go:66:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:66:6)
              Name: charEscape
              Type:
                *ast.Ident (go-nodes/basic_literals.go:66:17) Name: rune
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:66:24) Kind: CHAR Value: '\n'
        *ast.DeclStmt (go-nodes/basic_literals.go:67:2)
          *ast.GenDecl (go-nodes/basic_literals.go:67:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:67:6)
              Name: byteChar
              Type:
                *ast.Ident (go-nodes/basic_literals.go:67:15) Name: byte
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:67:22) Kind: CHAR Value: 'Z'
        *ast.ExprStmt (go-nodes/basic_literals.go:68:2)
          *ast.CallExpr (go-nodes/basic_literals.go:68:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:68:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:68:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:68:13) Kind: STRING Value: "  ✓ ast.BasicLit (CHAR): '%c' = %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:68:55) Name: char
              [2]:
                *ast.Ident (go-nodes/basic_literals.go:68:61) Name: char
        *ast.ExprStmt (go-nodes/basic_literals.go:69:2)
          *ast.CallExpr (go-nodes/basic_literals.go:69:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:69:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:69:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:69:13) Kind: STRING Value: "  ✓ ast.BasicLit (CHAR unicode): '%c' = U+%04X\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:69:67) Name: charUnicode
              [2]:
                *ast.Ident (go-nodes/basic_literals.go:69:80) Name: charUnicode
        *ast.ExprStmt (go-nodes/basic_literals.go:70:2)
          *ast.CallExpr (go-nodes/basic_literals.go:70:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:70:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:70:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:70:13) Kind: STRING Value: "  ✓ ast.BasicLit (CHAR escape): %q\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:70:55) Name: charEscape
        *ast.ExprStmt (go-nodes/basic_literals.go:71:2)
          *ast.CallExpr (go-nodes/basic_literals.go:71:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:71:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:71:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:71:13) Kind: STRING Value: "  ✓ ast.BasicLit (BYTE): '%c'\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:71:50) Name: byteChar
        *ast.DeclStmt (go-nodes/basic_literals.go:74:2)
          *ast.GenDecl (go-nodes/basic_literals.go:74:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:74:6)
              Name: str1
              Type:
                *ast.Ident (go-nodes/basic_literals.go:74:11) Name: string
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:74:20) Kind: STRING Value: "Hello, World!"
        *ast.DeclStmt (go-nodes/basic_literals.go:75:2)
          *ast.GenDecl (go-nodes/basic_literals.go:75:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:75:6)
              Name: str2
              Type:
                *ast.Ident (go-nodes/basic_literals.go:75:11) Name: string
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:75:20) Kind: STRING Value: `Raw string
with newlines`
        *ast.DeclStmt (go-nodes/basic_literals.go:77:2)
          *ast.GenDecl (go-nodes/basic_literals.go:77:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:77:6)
              Name: strUnicode
              Type:
                *ast.Ident (go-nodes/basic_literals.go:77:17) Name: string
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:77:26) Kind: STRING Value: "Hello, 世界"
        *ast.DeclStmt (go-nodes/basic_literals.go:78:2)
          *ast.GenDecl (go-nodes/basic_literals.go:78:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:78:6)
              Name: strEscape
              Type:
                *ast.Ident (go-nodes/basic_literals.go:78:16) Name: string
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:78:25) Kind: STRING Value: "Line1\nLine2\tTabbed"
        *ast.ExprStmt (go-nodes/basic_literals.go:79:2)
          *ast.CallExpr (go-nodes/basic_literals.go:79:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:79:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:79:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:79:13) Kind: STRING Value: "  ✓ ast.BasicLit (STRING interpreted): %q\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:79:62) Name: str1
        *ast.ExprStmt (go-nodes/basic_literals.go:80:2)
          *ast.CallExpr (go-nodes/basic_literals.go:80:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:80:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:80:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:80:13) Kind: STRING Value: "  ✓ ast.BasicLit (STRING raw): %q\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:80:54) Name: str2
        *ast.ExprStmt (go-nodes/basic_literals.go:81:2)
          *ast.CallExpr (go-nodes/basic_literals.go:81:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:81:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:81:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:81:13) Kind: STRING Value: "  ✓ ast.BasicLit (STRING unicode): %q\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:81:58) Name: strUnicode
        *ast.ExprStmt (go-nodes/basic_literals.go:82:2)
          *ast.CallExpr (go-nodes/basic_literals.go:82:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:82:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:82:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:82:13) Kind: STRING Value: "  ✓ ast.BasicLit (STRING escape): %q\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:82:57) Name: strEscape
        *ast.DeclStmt (go-nodes/basic_literals.go:85:2)
          *ast.GenDecl (go-nodes/basic_literals.go:85:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:85:6)
              Name: boolTrue
              Type:
                *ast.Ident (go-nodes/basic_literals.go:85:15) Name: bool
              Value[0]:
                *ast.Ident (go-nodes/basic_literals.go:85:22) Name: true
        *ast.DeclStmt (go-nodes/basic_literals.go:86:2)
          *ast.GenDecl (go-nodes/basic_literals.go:86:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:86:6)
              Name: boolFalse
              Type:
                *ast.Ident (go-nodes/basic_literals.go:86:16) Name: bool
              Value[0]:
                *ast.Ident (go-nodes/basic_literals.go:86:23) Name: false
        *ast.ExprStmt (go-nodes/basic_literals.go:87:2)
          *ast.CallExpr (go-nodes/basic_literals.go:87:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:87:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:87:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:87:13) Kind: STRING Value: "  ✓ ast.Ident (bool true): %v\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:87:50) Name: boolTrue
        *ast.ExprStmt (go-nodes/basic_literals.go:88:2)
          *ast.CallExpr (go-nodes/basic_literals.go:88:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:88:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:88:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:88:13) Kind: STRING Value: "  ✓ ast.Ident (bool false): %v\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:88:51) Name: boolFalse
        *ast.DeclStmt (go-nodes/basic_literals.go:91:2)
          *ast.GenDecl (go-nodes/basic_literals.go:91:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:91:6)
              Name: nilPtr
              Type:
                *ast.StarExpr (go-nodes/basic_literals.go:91:13)
              Value[0]:
                *ast.Ident (go-nodes/basic_literals.go:91:20) Name: nil
        *ast.ExprStmt (go-nodes/basic_literals.go:92:2)
          *ast.CallExpr (go-nodes/basic_literals.go:92:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:92:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:92:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:92:13) Kind: STRING Value: "  ✓ ast.Ident (nil): %v\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:92:44) Name: nilPtr
        *ast.DeclStmt (go-nodes/basic_literals.go:95:2)
          *ast.GenDecl (go-nodes/basic_literals.go:95:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:95:6)
              Name: largeNum
              Type:
                *ast.Ident (go-nodes/basic_literals.go:95:15) Name: int
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:95:21) Kind: INT Value: 1_000_000
        *ast.DeclStmt (go-nodes/basic_literals.go:96:2)
          *ast.GenDecl (go-nodes/basic_literals.go:96:2) Token: var
            *ast.ValueSpec (go-nodes/basic_literals.go:96:6)
              Name: largeFloat
              Type:
                *ast.Ident (go-nodes/basic_literals.go:96:17) Name: float64
              Value[0]:
                *ast.BasicLit (go-nodes/basic_literals.go:96:27) Kind: FLOAT Value: 1_234.567_89
        *ast.ExprStmt (go-nodes/basic_literals.go:97:2)
          *ast.CallExpr (go-nodes/basic_literals.go:97:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:97:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:97:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:97:13) Kind: STRING Value: "  ✓ ast.BasicLit (INT with underscores): %d\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:97:64) Name: largeNum
        *ast.ExprStmt (go-nodes/basic_literals.go:98:2)
          *ast.CallExpr (go-nodes/basic_literals.go:98:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:98:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:98:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:98:13) Kind: STRING Value: "  ✓ ast.BasicLit (FLOAT with underscores): %f\n"
              [1]:
                *ast.Ident (go-nodes/basic_literals.go:98:66) Name: largeFloat
        *ast.ExprStmt (go-nodes/basic_literals.go:100:2)
          *ast.CallExpr (go-nodes/basic_literals.go:100:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:100:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:100:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:100:14) Kind: STRING Value: "Summary: 35+ unique literal variations exercised"
        *ast.ExprStmt (go-nodes/basic_literals.go:101:2)
          *ast.CallExpr (go-nodes/basic_literals.go:101:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:101:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:101:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:101:14) Kind: STRING Value: "Primary AST Nodes: ast.BasicLit, ast.Ident, ast.ValueSpec, ast.GenDecl"
        *ast.ExprStmt (go-nodes/basic_literals.go:102:2)
          *ast.CallExpr (go-nodes/basic_literals.go:102:2)
            Fun:
              *ast.SelectorExpr (go-nodes/basic_literals.go:102:2)
                X:
                  *ast.Ident (go-nodes/basic_literals.go:102:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/basic_literals.go:102:14) Kind: STRING Value: "========================================"
