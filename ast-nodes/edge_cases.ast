=== AST for edge_cases.go ===

File Information:
  Package: main
  Position: go-nodes/edge_cases.go:3:1
  Imports:
    "fmt"
    "unsafe"
  Comment Groups: 47
  Declarations: 8

=== AST Node Tree ===

*ast.File (go-nodes/edge_cases.go:3:1)
  Package: main
  *ast.GenDecl (go-nodes/edge_cases.go:5:1) Token: import
    *ast.ImportSpec (go-nodes/edge_cases.go:6:2)
      Path: "fmt"
    *ast.ImportSpec (go-nodes/edge_cases.go:7:2)
      Path: "unsafe"
  *ast.FuncDecl (go-nodes/edge_cases.go:16:1)
    Name: funcMain
    Type:
      *ast.FuncType (go-nodes/edge_cases.go:16:1)
        Params:
          *ast.FieldList (go-nodes/edge_cases.go:16:14) NumFields: 0
    Body:
      *ast.BlockStmt (go-nodes/edge_cases.go:16:17) Stmts: 109
        *ast.ExprStmt (go-nodes/edge_cases.go:17:2)
          *ast.CallExpr (go-nodes/edge_cases.go:17:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:17:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:17:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:17:14) Kind: STRING Value: "=== edge_cases.go AST Node Coverage ==="
        *ast.ExprStmt (go-nodes/edge_cases.go:18:2)
          *ast.CallExpr (go-nodes/edge_cases.go:18:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:18:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:18:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:18:14) Kind: STRING Value: "Exercising AST Nodes:"
        *ast.ExprStmt (go-nodes/edge_cases.go:21:2)
          *ast.CallExpr (go-nodes/edge_cases.go:21:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:21:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:21:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:21:14) Kind: STRING Value: "  ✓ ast.EmptyStmt (edge cases):"
        *ast.ForStmt (go-nodes/edge_cases.go:22:2)
          Init:
            *ast.AssignStmt (go-nodes/edge_cases.go:22:6) Token: :=
              LHS:
                *ast.Ident (go-nodes/edge_cases.go:22:6) Name: i
              RHS:
                *ast.BasicLit (go-nodes/edge_cases.go:22:11) Kind: INT Value: 0
          Cond:
            *ast.BinaryExpr (go-nodes/edge_cases.go:22:14) Op: <
              X:
                *ast.Ident (go-nodes/edge_cases.go:22:14) Name: i
              Y:
                *ast.BasicLit (go-nodes/edge_cases.go:22:18) Kind: INT Value: 1
          Post:
            *ast.IncDecStmt (go-nodes/edge_cases.go:22:21)
          Body:
            *ast.BlockStmt (go-nodes/edge_cases.go:22:25) Stmts: 2
              *ast.EmptyStmt (go-nodes/edge_cases.go:23:3)
              *ast.EmptyStmt (go-nodes/edge_cases.go:24:3)
        *ast.ExprStmt (go-nodes/edge_cases.go:26:2)
          *ast.CallExpr (go-nodes/edge_cases.go:26:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:26:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:26:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:26:14) Kind: STRING Value: "    Empty statements in loop"
        *ast.ExprStmt (go-nodes/edge_cases.go:29:2)
          *ast.CallExpr (go-nodes/edge_cases.go:29:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:29:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:29:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:29:14) Kind: STRING Value: "  ✓ Deeply nested expressions:"
        *ast.AssignStmt (go-nodes/edge_cases.go:30:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:30:2) Name: result
          RHS:
            *ast.BinaryExpr (go-nodes/edge_cases.go:30:12) Op: +
              X:
                *ast.ParenExpr (go-nodes/edge_cases.go:30:12)
              Y:
                *ast.ParenExpr (go-nodes/edge_cases.go:30:40)
        *ast.ExprStmt (go-nodes/edge_cases.go:31:2)
          *ast.CallExpr (go-nodes/edge_cases.go:31:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:31:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:31:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:31:13) Kind: STRING Value: "    Complex nested: %d\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:31:41) Name: result
        *ast.ExprStmt (go-nodes/edge_cases.go:34:2)
          *ast.CallExpr (go-nodes/edge_cases.go:34:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:34:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:34:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:34:14) Kind: STRING Value: "  ✓ Complex assignments:"
        *ast.DeclStmt (go-nodes/edge_cases.go:35:2)
          *ast.GenDecl (go-nodes/edge_cases.go:35:2) Token: var
            *ast.ValueSpec (go-nodes/edge_cases.go:35:6)
              Name: a
              Name: b
              Name: c
              Value[0]:
                *ast.BasicLit (go-nodes/edge_cases.go:35:16) Kind: INT Value: 1
              Value[1]:
                *ast.BasicLit (go-nodes/edge_cases.go:35:19) Kind: STRING Value: "two"
              Value[2]:
                *ast.Ident (go-nodes/edge_cases.go:35:26) Name: true
        *ast.ExprStmt (go-nodes/edge_cases.go:36:2)
          *ast.CallExpr (go-nodes/edge_cases.go:36:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:36:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:36:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:36:13) Kind: STRING Value: "    Multi-type assignment: %d, %s, %v\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:36:56) Name: a
              [2]:
                *ast.Ident (go-nodes/edge_cases.go:36:59) Name: b
              [3]:
                *ast.Ident (go-nodes/edge_cases.go:36:62) Name: c
        *ast.ExprStmt (go-nodes/edge_cases.go:39:2)
          *ast.CallExpr (go-nodes/edge_cases.go:39:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:39:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:39:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:39:14) Kind: STRING Value: "  ✓ Blank identifier (_) usage:"
        *ast.AssignStmt (go-nodes/edge_cases.go:40:2) Token: =
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:40:2) Name: _
          RHS:
            *ast.BasicLit (go-nodes/edge_cases.go:40:6) Kind: INT Value: 42
        *ast.AssignStmt (go-nodes/edge_cases.go:41:2) Token: =
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:41:2) Name: _
            *ast.Ident (go-nodes/edge_cases.go:41:5) Name: _
          RHS:
            *ast.BasicLit (go-nodes/edge_cases.go:41:9) Kind: INT Value: 1
            *ast.BasicLit (go-nodes/edge_cases.go:41:12) Kind: INT Value: 2
        *ast.RangeStmt (go-nodes/edge_cases.go:42:2) Token: =
          Key:
            *ast.Ident (go-nodes/edge_cases.go:42:6) Name: _
          X:
            *ast.CompositeLit (go-nodes/edge_cases.go:42:16)
              Type:
                *ast.ArrayType (go-nodes/edge_cases.go:42:16)
                  Elt:
                    *ast.Ident (go-nodes/edge_cases.go:42:18) Name: int
              Elts:
                [0]:
                  *ast.BasicLit (go-nodes/edge_cases.go:42:22) Kind: INT Value: 1
                [1]:
                  *ast.BasicLit (go-nodes/edge_cases.go:42:25) Kind: INT Value: 2
                [2]:
                  *ast.BasicLit (go-nodes/edge_cases.go:42:28) Kind: INT Value: 3
          Body:
            *ast.BlockStmt (go-nodes/edge_cases.go:42:31) Stmts: 0
        *ast.ExprStmt (go-nodes/edge_cases.go:45:2)
          *ast.CallExpr (go-nodes/edge_cases.go:45:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:45:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:45:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:45:14) Kind: STRING Value: "    Blank identifier in multiple contexts"
        *ast.ExprStmt (go-nodes/edge_cases.go:48:2)
          *ast.CallExpr (go-nodes/edge_cases.go:48:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:48:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:48:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:48:14) Kind: STRING Value: "  ✓ iota edge cases:"
        *ast.DeclStmt (go-nodes/edge_cases.go:49:2)
          *ast.GenDecl (go-nodes/edge_cases.go:49:2) Token: const
            *ast.ValueSpec (go-nodes/edge_cases.go:50:3)
              Name: a0
              Value[0]:
                *ast.Ident (go-nodes/edge_cases.go:50:8) Name: iota
            *ast.ValueSpec (go-nodes/edge_cases.go:51:3)
              Name: a1
            *ast.ValueSpec (go-nodes/edge_cases.go:52:3)
              Name: a2
            *ast.ValueSpec (go-nodes/edge_cases.go:53:3)
              Name: _
            *ast.ValueSpec (go-nodes/edge_cases.go:54:3)
              Name: a4
        *ast.DeclStmt (go-nodes/edge_cases.go:56:2)
          *ast.GenDecl (go-nodes/edge_cases.go:56:2) Token: const
            *ast.ValueSpec (go-nodes/edge_cases.go:57:3)
              Name: b0
              Value[0]:
                *ast.BinaryExpr (go-nodes/edge_cases.go:57:8) Op: *
                  X:
                    *ast.Ident (go-nodes/edge_cases.go:57:8) Name: iota
                  Y:
                    *ast.BasicLit (go-nodes/edge_cases.go:57:15) Kind: INT Value: 10
            *ast.ValueSpec (go-nodes/edge_cases.go:58:3)
              Name: b1
            *ast.ValueSpec (go-nodes/edge_cases.go:59:3)
              Name: b2
        *ast.DeclStmt (go-nodes/edge_cases.go:61:2)
          *ast.GenDecl (go-nodes/edge_cases.go:61:2) Token: const
            *ast.ValueSpec (go-nodes/edge_cases.go:62:3)
              Name: c0
              Value[0]:
                *ast.BinaryExpr (go-nodes/edge_cases.go:62:8) Op: <<
                  X:
                    *ast.BasicLit (go-nodes/edge_cases.go:62:8) Kind: INT Value: 1
                  Y:
                    *ast.Ident (go-nodes/edge_cases.go:62:13) Name: iota
            *ast.ValueSpec (go-nodes/edge_cases.go:63:3)
              Name: c1
            *ast.ValueSpec (go-nodes/edge_cases.go:64:3)
              Name: c2
            *ast.ValueSpec (go-nodes/edge_cases.go:65:3)
              Name: c3
        *ast.ExprStmt (go-nodes/edge_cases.go:67:2)
          *ast.CallExpr (go-nodes/edge_cases.go:67:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:67:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:67:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:67:13) Kind: STRING Value: "    iota sequence: %d, %d, %d, %d\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:67:52) Name: a0
              [2]:
                *ast.Ident (go-nodes/edge_cases.go:67:56) Name: a1
              [3]:
                *ast.Ident (go-nodes/edge_cases.go:67:60) Name: a2
              [4]:
                *ast.Ident (go-nodes/edge_cases.go:67:64) Name: a4
        *ast.ExprStmt (go-nodes/edge_cases.go:68:2)
          *ast.CallExpr (go-nodes/edge_cases.go:68:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:68:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:68:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:68:13) Kind: STRING Value: "    iota expression: %d, %d, %d\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:68:50) Name: b0
              [2]:
                *ast.Ident (go-nodes/edge_cases.go:68:54) Name: b1
              [3]:
                *ast.Ident (go-nodes/edge_cases.go:68:58) Name: b2
        *ast.ExprStmt (go-nodes/edge_cases.go:69:2)
          *ast.CallExpr (go-nodes/edge_cases.go:69:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:69:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:69:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:69:13) Kind: STRING Value: "    iota bit shift: %d, %d, %d, %d\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:69:53) Name: c0
              [2]:
                *ast.Ident (go-nodes/edge_cases.go:69:57) Name: c1
              [3]:
                *ast.Ident (go-nodes/edge_cases.go:69:61) Name: c2
              [4]:
                *ast.Ident (go-nodes/edge_cases.go:69:65) Name: c3
        *ast.ExprStmt (go-nodes/edge_cases.go:72:2)
          *ast.CallExpr (go-nodes/edge_cases.go:72:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:72:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:72:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:72:14) Kind: STRING Value: "  ✓ unsafe package operations:"
        *ast.AssignStmt (go-nodes/edge_cases.go:73:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:73:2) Name: x
          RHS:
            *ast.BasicLit (go-nodes/edge_cases.go:73:7) Kind: INT Value: 42
        *ast.AssignStmt (go-nodes/edge_cases.go:74:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:74:2) Name: ptr
          RHS:
            *ast.CallExpr (go-nodes/edge_cases.go:74:9)
              Fun:
                *ast.SelectorExpr (go-nodes/edge_cases.go:74:9)
                  X:
                    *ast.Ident (go-nodes/edge_cases.go:74:9) Name: unsafe
                  Sel: Pointer
              Args:
                [0]:
                  *ast.UnaryExpr (go-nodes/edge_cases.go:74:24) Op: &
                    X:
                      *ast.Ident (go-nodes/edge_cases.go:74:25) Name: x
        *ast.AssignStmt (go-nodes/edge_cases.go:75:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:75:2) Name: size
          RHS:
            *ast.CallExpr (go-nodes/edge_cases.go:75:10)
              Fun:
                *ast.SelectorExpr (go-nodes/edge_cases.go:75:10)
                  X:
                    *ast.Ident (go-nodes/edge_cases.go:75:10) Name: unsafe
                  Sel: Sizeof
              Args:
                [0]:
                  *ast.Ident (go-nodes/edge_cases.go:75:24) Name: x
        *ast.AssignStmt (go-nodes/edge_cases.go:76:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:76:2) Name: align
          RHS:
            *ast.CallExpr (go-nodes/edge_cases.go:76:11)
              Fun:
                *ast.SelectorExpr (go-nodes/edge_cases.go:76:11)
                  X:
                    *ast.Ident (go-nodes/edge_cases.go:76:11) Name: unsafe
                  Sel: Alignof
              Args:
                [0]:
                  *ast.Ident (go-nodes/edge_cases.go:76:26) Name: x
        *ast.ExprStmt (go-nodes/edge_cases.go:77:2)
          *ast.CallExpr (go-nodes/edge_cases.go:77:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:77:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:77:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:77:13) Kind: STRING Value: "    unsafe.Pointer: %p\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:77:41) Name: ptr
        *ast.ExprStmt (go-nodes/edge_cases.go:78:2)
          *ast.CallExpr (go-nodes/edge_cases.go:78:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:78:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:78:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:78:13) Kind: STRING Value: "    unsafe.Sizeof(int): %d bytes\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:78:51) Name: size
        *ast.ExprStmt (go-nodes/edge_cases.go:79:2)
          *ast.CallExpr (go-nodes/edge_cases.go:79:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:79:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:79:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:79:13) Kind: STRING Value: "    unsafe.Alignof(int): %d bytes\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:79:52) Name: align
        *ast.ExprStmt (go-nodes/edge_cases.go:82:2)
          *ast.CallExpr (go-nodes/edge_cases.go:82:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:82:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:82:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:82:14) Kind: STRING Value: "  ✓ Type conversions edge cases:"
        *ast.DeclStmt (go-nodes/edge_cases.go:83:2)
          *ast.GenDecl (go-nodes/edge_cases.go:83:2) Token: var
            *ast.ValueSpec (go-nodes/edge_cases.go:83:6)
              Name: i
              Type:
                *ast.InterfaceType (go-nodes/edge_cases.go:83:8)
                  *ast.FieldList (go-nodes/edge_cases.go:83:17) NumFields: 0
              Value[0]:
                *ast.BasicLit (go-nodes/edge_cases.go:83:22) Kind: INT Value: 42
        *ast.AssignStmt (go-nodes/edge_cases.go:84:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:84:2) Name: n
          RHS:
            *ast.TypeAssertExpr (go-nodes/edge_cases.go:84:7)
        *ast.ExprStmt (go-nodes/edge_cases.go:85:2)
          *ast.CallExpr (go-nodes/edge_cases.go:85:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:85:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:85:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:85:13) Kind: STRING Value: "    Type assertion: %d\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:85:41) Name: n
        *ast.DeclStmt (go-nodes/edge_cases.go:88:2)
          *ast.GenDecl (go-nodes/edge_cases.go:88:2) Token: type
            *ast.TypeSpec (go-nodes/edge_cases.go:88:7)
              Name: MyInt
              Type:
                *ast.Ident (go-nodes/edge_cases.go:88:13) Name: int
        *ast.DeclStmt (go-nodes/edge_cases.go:89:2)
          *ast.GenDecl (go-nodes/edge_cases.go:89:2) Token: var
            *ast.ValueSpec (go-nodes/edge_cases.go:89:6)
              Name: mi
              Type:
                *ast.Ident (go-nodes/edge_cases.go:89:9) Name: MyInt
              Value[0]:
                *ast.BasicLit (go-nodes/edge_cases.go:89:17) Kind: INT Value: 10
        *ast.DeclStmt (go-nodes/edge_cases.go:90:2)
          *ast.GenDecl (go-nodes/edge_cases.go:90:2) Token: var
            *ast.ValueSpec (go-nodes/edge_cases.go:90:6)
              Name: normalInt
              Type:
                *ast.Ident (go-nodes/edge_cases.go:90:16) Name: int
              Value[0]:
                *ast.CallExpr (go-nodes/edge_cases.go:90:22)
                  Fun:
                    *ast.Ident (go-nodes/edge_cases.go:90:22) Name: int
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/edge_cases.go:90:26) Name: mi
        *ast.ExprStmt (go-nodes/edge_cases.go:91:2)
          *ast.CallExpr (go-nodes/edge_cases.go:91:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:91:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:91:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:91:13) Kind: STRING Value: "    Type conversion: MyInt(%d) -> int(%d)\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:91:60) Name: mi
              [2]:
                *ast.Ident (go-nodes/edge_cases.go:91:64) Name: normalInt
        *ast.ExprStmt (go-nodes/edge_cases.go:94:2)
          *ast.CallExpr (go-nodes/edge_cases.go:94:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:94:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:94:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:94:14) Kind: STRING Value: "  ✓ Multiple pointer indirection:"
        *ast.AssignStmt (go-nodes/edge_cases.go:95:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:95:2) Name: val
          RHS:
            *ast.BasicLit (go-nodes/edge_cases.go:95:9) Kind: INT Value: 100
        *ast.AssignStmt (go-nodes/edge_cases.go:96:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:96:2) Name: p1
          RHS:
            *ast.UnaryExpr (go-nodes/edge_cases.go:96:8) Op: &
              X:
                *ast.Ident (go-nodes/edge_cases.go:96:9) Name: val
        *ast.AssignStmt (go-nodes/edge_cases.go:97:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:97:2) Name: p2
          RHS:
            *ast.UnaryExpr (go-nodes/edge_cases.go:97:8) Op: &
              X:
                *ast.Ident (go-nodes/edge_cases.go:97:9) Name: p1
        *ast.AssignStmt (go-nodes/edge_cases.go:98:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:98:2) Name: p3
          RHS:
            *ast.UnaryExpr (go-nodes/edge_cases.go:98:8) Op: &
              X:
                *ast.Ident (go-nodes/edge_cases.go:98:9) Name: p2
        *ast.ExprStmt (go-nodes/edge_cases.go:99:2)
          *ast.CallExpr (go-nodes/edge_cases.go:99:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:99:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:99:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:99:13) Kind: STRING Value: "    ***p3 = %d\n"
              [1]:
                *ast.StarExpr (go-nodes/edge_cases.go:99:33)
        *ast.ExprStmt (go-nodes/edge_cases.go:102:2)
          *ast.CallExpr (go-nodes/edge_cases.go:102:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:102:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:102:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:102:14) Kind: STRING Value: "  ✓ Complex slice operations:"
        *ast.AssignStmt (go-nodes/edge_cases.go:103:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:103:2) Name: s
          RHS:
            *ast.CompositeLit (go-nodes/edge_cases.go:103:7)
              Type:
                *ast.ArrayType (go-nodes/edge_cases.go:103:7)
                  Elt:
                    *ast.Ident (go-nodes/edge_cases.go:103:9) Name: int
              Elts:
                [0]:
                  *ast.BasicLit (go-nodes/edge_cases.go:103:13) Kind: INT Value: 0
                [1]:
                  *ast.BasicLit (go-nodes/edge_cases.go:103:16) Kind: INT Value: 1
                [2]:
                  *ast.BasicLit (go-nodes/edge_cases.go:103:19) Kind: INT Value: 2
                [3]:
                  *ast.BasicLit (go-nodes/edge_cases.go:103:22) Kind: INT Value: 3
                [4]:
                  *ast.BasicLit (go-nodes/edge_cases.go:103:25) Kind: INT Value: 4
                [5]:
                  *ast.BasicLit (go-nodes/edge_cases.go:103:28) Kind: INT Value: 5
                [6]:
                  *ast.BasicLit (go-nodes/edge_cases.go:103:31) Kind: INT Value: 6
                [7]:
                  *ast.BasicLit (go-nodes/edge_cases.go:103:34) Kind: INT Value: 7
                [8]:
                  *ast.BasicLit (go-nodes/edge_cases.go:103:37) Kind: INT Value: 8
                [9]:
                  *ast.BasicLit (go-nodes/edge_cases.go:103:40) Kind: INT Value: 9
        *ast.AssignStmt (go-nodes/edge_cases.go:104:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:104:2) Name: sub
          RHS:
            *ast.SliceExpr (go-nodes/edge_cases.go:104:9)
              X:
                *ast.Ident (go-nodes/edge_cases.go:104:9) Name: s
              Low:
                *ast.BasicLit (go-nodes/edge_cases.go:104:11) Kind: INT Value: 2
              High:
                *ast.BasicLit (go-nodes/edge_cases.go:104:13) Kind: INT Value: 8
              Max:
                *ast.BasicLit (go-nodes/edge_cases.go:104:15) Kind: INT Value: 9
        *ast.ExprStmt (go-nodes/edge_cases.go:105:2)
          *ast.CallExpr (go-nodes/edge_cases.go:105:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:105:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:105:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:105:13) Kind: STRING Value: "    s[2:8:9]: %v (len=%d, cap=%d)\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:105:52) Name: sub
              [2]:
                *ast.CallExpr (go-nodes/edge_cases.go:105:57)
                  Fun:
                    *ast.Ident (go-nodes/edge_cases.go:105:57) Name: len
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/edge_cases.go:105:61) Name: sub
              [3]:
                *ast.CallExpr (go-nodes/edge_cases.go:105:67)
                  Fun:
                    *ast.Ident (go-nodes/edge_cases.go:105:67) Name: cap
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/edge_cases.go:105:71) Name: sub
        *ast.AssignStmt (go-nodes/edge_cases.go:108:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:108:2) Name: start
            *ast.Ident (go-nodes/edge_cases.go:108:9) Name: end
          RHS:
            *ast.BasicLit (go-nodes/edge_cases.go:108:16) Kind: INT Value: 1
            *ast.BasicLit (go-nodes/edge_cases.go:108:19) Kind: INT Value: 5
        *ast.AssignStmt (go-nodes/edge_cases.go:109:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:109:2) Name: s2
          RHS:
            *ast.SliceExpr (go-nodes/edge_cases.go:109:8)
              X:
                *ast.Ident (go-nodes/edge_cases.go:109:8) Name: s
              Low:
                *ast.Ident (go-nodes/edge_cases.go:109:10) Name: start
              High:
                *ast.Ident (go-nodes/edge_cases.go:109:16) Name: end
        *ast.ExprStmt (go-nodes/edge_cases.go:110:2)
          *ast.CallExpr (go-nodes/edge_cases.go:110:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:110:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:110:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:110:13) Kind: STRING Value: "    s[start:end]: %v\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:110:39) Name: s2
        *ast.ExprStmt (go-nodes/edge_cases.go:113:2)
          *ast.CallExpr (go-nodes/edge_cases.go:113:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:113:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:113:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:113:14) Kind: STRING Value: "  ✓ Empty composite literals:"
        *ast.AssignStmt (go-nodes/edge_cases.go:114:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:114:2) Name: emptyStruct
          RHS:
            *ast.CompositeLit (go-nodes/edge_cases.go:114:17)
              Type:
                *ast.StructType (go-nodes/edge_cases.go:114:17)
                  *ast.FieldList (go-nodes/edge_cases.go:114:23) NumFields: 0
        *ast.AssignStmt (go-nodes/edge_cases.go:115:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:115:2) Name: emptyArray
          RHS:
            *ast.CompositeLit (go-nodes/edge_cases.go:115:16)
              Type:
                *ast.ArrayType (go-nodes/edge_cases.go:115:16)
                  Len:
                    *ast.BasicLit (go-nodes/edge_cases.go:115:17) Kind: INT Value: 0
                  Elt:
                    *ast.Ident (go-nodes/edge_cases.go:115:19) Name: int
        *ast.AssignStmt (go-nodes/edge_cases.go:116:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:116:2) Name: emptySlice
          RHS:
            *ast.CompositeLit (go-nodes/edge_cases.go:116:16)
              Type:
                *ast.ArrayType (go-nodes/edge_cases.go:116:16)
                  Elt:
                    *ast.Ident (go-nodes/edge_cases.go:116:18) Name: int
        *ast.AssignStmt (go-nodes/edge_cases.go:117:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:117:2) Name: emptyMap
          RHS:
            *ast.CompositeLit (go-nodes/edge_cases.go:117:14)
              Type:
                *ast.MapType (go-nodes/edge_cases.go:117:14)
                  Key:
                    *ast.Ident (go-nodes/edge_cases.go:117:18) Name: string
                  Value:
                    *ast.Ident (go-nodes/edge_cases.go:117:25) Name: int
        *ast.ExprStmt (go-nodes/edge_cases.go:118:2)
          *ast.CallExpr (go-nodes/edge_cases.go:118:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:118:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:118:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:118:13) Kind: STRING Value: "    struct{}{}: %v\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:118:37) Name: emptyStruct
        *ast.ExprStmt (go-nodes/edge_cases.go:119:2)
          *ast.CallExpr (go-nodes/edge_cases.go:119:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:119:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:119:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:119:13) Kind: STRING Value: "    [0]int{}: %v\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:119:35) Name: emptyArray
        *ast.ExprStmt (go-nodes/edge_cases.go:120:2)
          *ast.CallExpr (go-nodes/edge_cases.go:120:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:120:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:120:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:120:13) Kind: STRING Value: "    []int{}: %v (len=%d)\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:120:43) Name: emptySlice
              [2]:
                *ast.CallExpr (go-nodes/edge_cases.go:120:55)
                  Fun:
                    *ast.Ident (go-nodes/edge_cases.go:120:55) Name: len
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/edge_cases.go:120:59) Name: emptySlice
        *ast.ExprStmt (go-nodes/edge_cases.go:121:2)
          *ast.CallExpr (go-nodes/edge_cases.go:121:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:121:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:121:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:121:13) Kind: STRING Value: "    map[string]int{}: %v (len=%d)\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:121:52) Name: emptyMap
              [2]:
                *ast.CallExpr (go-nodes/edge_cases.go:121:62)
                  Fun:
                    *ast.Ident (go-nodes/edge_cases.go:121:62) Name: len
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/edge_cases.go:121:66) Name: emptyMap
        *ast.ExprStmt (go-nodes/edge_cases.go:124:2)
          *ast.CallExpr (go-nodes/edge_cases.go:124:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:124:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:124:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:124:14) Kind: STRING Value: "  ✓ Variadic with zero args:"
        *ast.ExprStmt (go-nodes/edge_cases.go:125:2)
          *ast.CallExpr (go-nodes/edge_cases.go:125:2)
            Fun:
              *ast.Ident (go-nodes/edge_cases.go:125:2) Name: variadicFunc
        *ast.ExprStmt (go-nodes/edge_cases.go:126:2)
          *ast.CallExpr (go-nodes/edge_cases.go:126:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:126:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:126:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:126:14) Kind: STRING Value: "    Called variadic function with no args"
        *ast.ExprStmt (go-nodes/edge_cases.go:129:2)
          *ast.CallExpr (go-nodes/edge_cases.go:129:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:129:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:129:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:129:14) Kind: STRING Value: "  ✓ Type switch edge cases:"
        *ast.DeclStmt (go-nodes/edge_cases.go:130:2)
          *ast.GenDecl (go-nodes/edge_cases.go:130:2) Token: var
            *ast.ValueSpec (go-nodes/edge_cases.go:130:6)
              Name: mixed
              Type:
                *ast.InterfaceType (go-nodes/edge_cases.go:130:12)
                  *ast.FieldList (go-nodes/edge_cases.go:130:21) NumFields: 0
              Value[0]:
                *ast.BasicLit (go-nodes/edge_cases.go:130:26) Kind: STRING Value: "test"
        *ast.TypeSwitchStmt (go-nodes/edge_cases.go:131:2)
        *ast.ExprStmt (go-nodes/edge_cases.go:143:2)
          *ast.CallExpr (go-nodes/edge_cases.go:143:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:143:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:143:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:143:14) Kind: STRING Value: "  ✓ Labeled break/continue:"
        *ast.LabeledStmt (go-nodes/edge_cases.go:144:1)
        *ast.ExprStmt (go-nodes/edge_cases.go:155:2)
          *ast.CallExpr (go-nodes/edge_cases.go:155:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:155:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:155:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:155:14) Kind: STRING Value: "  ✓ Defer, panic, recover:"
        *ast.ExprStmt (go-nodes/edge_cases.go:156:2)
          *ast.CallExpr (go-nodes/edge_cases.go:156:2)
            Fun:
              *ast.FuncLit (go-nodes/edge_cases.go:156:2)
        *ast.ExprStmt (go-nodes/edge_cases.go:167:2)
          *ast.CallExpr (go-nodes/edge_cases.go:167:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:167:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:167:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:167:14) Kind: STRING Value: "  ✓ Channel edge cases:"
        *ast.AssignStmt (go-nodes/edge_cases.go:168:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:168:2) Name: ch
          RHS:
            *ast.CallExpr (go-nodes/edge_cases.go:168:8)
              Fun:
                *ast.Ident (go-nodes/edge_cases.go:168:8) Name: make
              Args:
                [0]:
                  *ast.ChanType (go-nodes/edge_cases.go:168:13) Dir: %!s(ast.ChanDir=3)
                    Value:
                      *ast.Ident (go-nodes/edge_cases.go:168:18) Name: int
                [1]:
                  *ast.BasicLit (go-nodes/edge_cases.go:168:23) Kind: INT Value: 1
        *ast.SendStmt (go-nodes/edge_cases.go:169:2)
        *ast.ExprStmt (go-nodes/edge_cases.go:170:2)
          *ast.CallExpr (go-nodes/edge_cases.go:170:2)
            Fun:
              *ast.Ident (go-nodes/edge_cases.go:170:2) Name: close
            Args:
              [0]:
                *ast.Ident (go-nodes/edge_cases.go:170:8) Name: ch
        *ast.AssignStmt (go-nodes/edge_cases.go:171:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:171:2) Name: v
            *ast.Ident (go-nodes/edge_cases.go:171:5) Name: ok
          RHS:
            *ast.UnaryExpr (go-nodes/edge_cases.go:171:11) Op: <-
              X:
                *ast.Ident (go-nodes/edge_cases.go:171:13) Name: ch
        *ast.ExprStmt (go-nodes/edge_cases.go:172:2)
          *ast.CallExpr (go-nodes/edge_cases.go:172:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:172:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:172:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:172:13) Kind: STRING Value: "    Receive from closed channel: %d, ok=%v\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:172:61) Name: v
              [2]:
                *ast.Ident (go-nodes/edge_cases.go:172:64) Name: ok
        *ast.AssignStmt (go-nodes/edge_cases.go:173:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:173:2) Name: v2
            *ast.Ident (go-nodes/edge_cases.go:173:6) Name: ok2
          RHS:
            *ast.UnaryExpr (go-nodes/edge_cases.go:173:13) Op: <-
              X:
                *ast.Ident (go-nodes/edge_cases.go:173:15) Name: ch
        *ast.ExprStmt (go-nodes/edge_cases.go:174:2)
          *ast.CallExpr (go-nodes/edge_cases.go:174:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:174:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:174:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:174:13) Kind: STRING Value: "    Second receive: %d, ok=%v\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:174:48) Name: v2
              [2]:
                *ast.Ident (go-nodes/edge_cases.go:174:52) Name: ok2
        *ast.DeclStmt (go-nodes/edge_cases.go:180:2)
          *ast.GenDecl (go-nodes/edge_cases.go:180:2) Token: var
            *ast.ValueSpec (go-nodes/edge_cases.go:180:6)
              Name: nilCh
              Type:
                *ast.ChanType (go-nodes/edge_cases.go:180:12) Dir: %!s(ast.ChanDir=3)
                  Value:
                    *ast.Ident (go-nodes/edge_cases.go:180:17) Name: int
        *ast.ExprStmt (go-nodes/edge_cases.go:181:2)
          *ast.CallExpr (go-nodes/edge_cases.go:181:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:181:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:181:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:181:13) Kind: STRING Value: "    Nil channel: %v\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:181:38) Name: nilCh
        *ast.ExprStmt (go-nodes/edge_cases.go:184:2)
          *ast.CallExpr (go-nodes/edge_cases.go:184:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:184:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:184:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:184:14) Kind: STRING Value: "  ✓ Method value/expression edge cases:"
        *ast.AssignStmt (go-nodes/edge_cases.go:185:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:185:2) Name: instance
          RHS:
            *ast.CompositeLit (go-nodes/edge_cases.go:185:14)
              Type:
                *ast.Ident (go-nodes/edge_cases.go:185:14) Name: T
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/edge_cases.go:185:16)
        *ast.AssignStmt (go-nodes/edge_cases.go:186:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:186:2) Name: methodValue
          RHS:
            *ast.SelectorExpr (go-nodes/edge_cases.go:186:17)
              X:
                *ast.Ident (go-nodes/edge_cases.go:186:17) Name: instance
              Sel: String
        *ast.ExprStmt (go-nodes/edge_cases.go:187:2)
          *ast.CallExpr (go-nodes/edge_cases.go:187:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:187:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:187:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:187:13) Kind: STRING Value: "    Method value: %s\n"
              [1]:
                *ast.CallExpr (go-nodes/edge_cases.go:187:39)
                  Fun:
                    *ast.Ident (go-nodes/edge_cases.go:187:39) Name: methodValue
        *ast.ExprStmt (go-nodes/edge_cases.go:190:2)
          *ast.CallExpr (go-nodes/edge_cases.go:190:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:190:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:190:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:190:14) Kind: STRING Value: "  ✓ Named return modification:"
        *ast.AssignStmt (go-nodes/edge_cases.go:191:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:191:2) Name: res1
            *ast.Ident (go-nodes/edge_cases.go:191:8) Name: res2
          RHS:
            *ast.CallExpr (go-nodes/edge_cases.go:191:16)
              Fun:
                *ast.Ident (go-nodes/edge_cases.go:191:16) Name: namedReturnModified
              Args:
                [0]:
                  *ast.BasicLit (go-nodes/edge_cases.go:191:36) Kind: INT Value: 5
        *ast.ExprStmt (go-nodes/edge_cases.go:192:2)
          *ast.CallExpr (go-nodes/edge_cases.go:192:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:192:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:192:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:192:13) Kind: STRING Value: "    Named return modified: %d, %d\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:192:52) Name: res1
              [2]:
                *ast.Ident (go-nodes/edge_cases.go:192:58) Name: res2
        *ast.ExprStmt (go-nodes/edge_cases.go:195:2)
          *ast.CallExpr (go-nodes/edge_cases.go:195:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:195:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:195:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:195:14) Kind: STRING Value: "  ✓ Struct with complex field types:"
        *ast.DeclStmt (go-nodes/edge_cases.go:196:2)
          *ast.GenDecl (go-nodes/edge_cases.go:196:2) Token: type
            *ast.TypeSpec (go-nodes/edge_cases.go:196:7)
              Name: ComplexStruct
              Type:
                *ast.StructType (go-nodes/edge_cases.go:196:21)
                  *ast.FieldList (go-nodes/edge_cases.go:196:28) NumFields: 7
                    Field[0]:
                      *ast.Field (go-nodes/edge_cases.go:197:3)
                        Name: Chan
                        Type:
                          *ast.ChanType (go-nodes/edge_cases.go:197:12) Dir: %!s(ast.ChanDir=3)
                            Value:
                              *ast.Ident (go-nodes/edge_cases.go:197:17) Name: int
                    Field[1]:
                      *ast.Field (go-nodes/edge_cases.go:198:3)
                        Name: Func
                        Type:
                          *ast.FuncType (go-nodes/edge_cases.go:198:12)
                            Params:
                              *ast.FieldList (go-nodes/edge_cases.go:198:16) NumFields: 0
                            Results:
                              *ast.FieldList (go-nodes/edge_cases.go:198:19) NumFields: 1
                                Field[0]:
                                  *ast.Field (go-nodes/edge_cases.go:198:19)
                                    Type:
                                      *ast.Ident (go-nodes/edge_cases.go:198:19) Name: int
                    Field[2]:
                      *ast.Field (go-nodes/edge_cases.go:199:3)
                        Name: Interface
                        Type:
                          *ast.InterfaceType (go-nodes/edge_cases.go:199:13)
                            *ast.FieldList (go-nodes/edge_cases.go:199:22) NumFields: 0
                    Field[3]:
                      *ast.Field (go-nodes/edge_cases.go:200:3)
                        Name: Map
                        Type:
                          *ast.MapType (go-nodes/edge_cases.go:200:12)
                            Key:
                              *ast.Ident (go-nodes/edge_cases.go:200:16) Name: string
                            Value:
                              *ast.Ident (go-nodes/edge_cases.go:200:23) Name: int
                    Field[4]:
                      *ast.Field (go-nodes/edge_cases.go:201:3)
                        Name: Slice
                        Type:
                          *ast.ArrayType (go-nodes/edge_cases.go:201:12)
                            Elt:
                              *ast.Ident (go-nodes/edge_cases.go:201:14) Name: int
                    Field[5]:
                      *ast.Field (go-nodes/edge_cases.go:202:3)
                        Name: Pointer
                        Type:
                          *ast.StarExpr (go-nodes/edge_cases.go:202:12)
                    Field[6]:
                      *ast.Field (go-nodes/edge_cases.go:203:3)
                        Name: Struct
                        Type:
                          *ast.StructType (go-nodes/edge_cases.go:203:12)
                            *ast.FieldList (go-nodes/edge_cases.go:203:18) NumFields: 1
                              Field[0]:
                                *ast.Field (go-nodes/edge_cases.go:203:20)
                                  Name: X
                                  Type:
                                    *ast.Ident (go-nodes/edge_cases.go:203:22) Name: int
        *ast.AssignStmt (go-nodes/edge_cases.go:205:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:205:2) Name: num
          RHS:
            *ast.BasicLit (go-nodes/edge_cases.go:205:9) Kind: INT Value: 42
        *ast.AssignStmt (go-nodes/edge_cases.go:206:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:206:2) Name: cs
          RHS:
            *ast.CompositeLit (go-nodes/edge_cases.go:206:8)
              Type:
                *ast.Ident (go-nodes/edge_cases.go:206:8) Name: ComplexStruct
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/edge_cases.go:207:3)
                [1]:
                  *ast.KeyValueExpr (go-nodes/edge_cases.go:208:3)
                [2]:
                  *ast.KeyValueExpr (go-nodes/edge_cases.go:209:3)
                [3]:
                  *ast.KeyValueExpr (go-nodes/edge_cases.go:210:3)
                [4]:
                  *ast.KeyValueExpr (go-nodes/edge_cases.go:211:3)
                [5]:
                  *ast.KeyValueExpr (go-nodes/edge_cases.go:212:3)
                [6]:
                  *ast.KeyValueExpr (go-nodes/edge_cases.go:213:3)
        *ast.ExprStmt (go-nodes/edge_cases.go:215:2)
          *ast.CallExpr (go-nodes/edge_cases.go:215:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:215:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:215:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:215:13) Kind: STRING Value: "    ComplexStruct.Pointer: %d\n"
              [1]:
                *ast.StarExpr (go-nodes/edge_cases.go:215:48)
        *ast.ExprStmt (go-nodes/edge_cases.go:218:2)
          *ast.CallExpr (go-nodes/edge_cases.go:218:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:218:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:218:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:218:14) Kind: STRING Value: "  ✓ Complex array indexing:"
        *ast.AssignStmt (go-nodes/edge_cases.go:219:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:219:2) Name: arr
          RHS:
            *ast.CompositeLit (go-nodes/edge_cases.go:219:9)
              Type:
                *ast.ArrayType (go-nodes/edge_cases.go:219:9)
                  Len:
                    *ast.BasicLit (go-nodes/edge_cases.go:219:10) Kind: INT Value: 5
                  Elt:
                    *ast.Ident (go-nodes/edge_cases.go:219:12) Name: int
              Elts:
                [0]:
                  *ast.BasicLit (go-nodes/edge_cases.go:219:16) Kind: INT Value: 10
                [1]:
                  *ast.BasicLit (go-nodes/edge_cases.go:219:20) Kind: INT Value: 20
                [2]:
                  *ast.BasicLit (go-nodes/edge_cases.go:219:24) Kind: INT Value: 30
                [3]:
                  *ast.BasicLit (go-nodes/edge_cases.go:219:28) Kind: INT Value: 40
                [4]:
                  *ast.BasicLit (go-nodes/edge_cases.go:219:32) Kind: INT Value: 50
        *ast.AssignStmt (go-nodes/edge_cases.go:220:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:220:2) Name: idx
          RHS:
            *ast.BasicLit (go-nodes/edge_cases.go:220:9) Kind: INT Value: 2
        *ast.ExprStmt (go-nodes/edge_cases.go:221:2)
          *ast.CallExpr (go-nodes/edge_cases.go:221:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:221:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:221:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:221:13) Kind: STRING Value: "    arr[idx]: %d\n"
              [1]:
                *ast.IndexExpr (go-nodes/edge_cases.go:221:35)
                  X:
                    *ast.Ident (go-nodes/edge_cases.go:221:35) Name: arr
                  Index:
                    *ast.Ident (go-nodes/edge_cases.go:221:39) Name: idx
        *ast.ExprStmt (go-nodes/edge_cases.go:222:2)
          *ast.CallExpr (go-nodes/edge_cases.go:222:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:222:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:222:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:222:13) Kind: STRING Value: "    arr[len(arr)-1]: %d\n"
              [1]:
                *ast.IndexExpr (go-nodes/edge_cases.go:222:42)
                  X:
                    *ast.Ident (go-nodes/edge_cases.go:222:42) Name: arr
                  Index:
                    *ast.BinaryExpr (go-nodes/edge_cases.go:222:46) Op: -
                      X:
                        *ast.CallExpr (go-nodes/edge_cases.go:222:46)
                          Fun:
                            *ast.Ident (go-nodes/edge_cases.go:222:46) Name: len
                          Args:
                            [0]:
                              *ast.Ident (go-nodes/edge_cases.go:222:50) Name: arr
                      Y:
                        *ast.BasicLit (go-nodes/edge_cases.go:222:55) Kind: INT Value: 1
        *ast.ExprStmt (go-nodes/edge_cases.go:225:2)
          *ast.CallExpr (go-nodes/edge_cases.go:225:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:225:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:225:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:225:14) Kind: STRING Value: "  ✓ Map with complex key types:"
        *ast.DeclStmt (go-nodes/edge_cases.go:226:2)
          *ast.GenDecl (go-nodes/edge_cases.go:226:2) Token: type
            *ast.TypeSpec (go-nodes/edge_cases.go:226:7)
              Name: Key
              Type:
                *ast.StructType (go-nodes/edge_cases.go:226:11)
                  *ast.FieldList (go-nodes/edge_cases.go:226:17) NumFields: 2
                    Field[0]:
                      *ast.Field (go-nodes/edge_cases.go:226:19)
                        Name: A
                        Name: B
                        Type:
                          *ast.Ident (go-nodes/edge_cases.go:226:24) Name: int
        *ast.AssignStmt (go-nodes/edge_cases.go:227:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:227:2) Name: complexMap
          RHS:
            *ast.CompositeLit (go-nodes/edge_cases.go:227:16)
              Type:
                *ast.MapType (go-nodes/edge_cases.go:227:16)
                  Key:
                    *ast.Ident (go-nodes/edge_cases.go:227:20) Name: Key
                  Value:
                    *ast.Ident (go-nodes/edge_cases.go:227:24) Name: string
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/edge_cases.go:228:3)
                [1]:
                  *ast.KeyValueExpr (go-nodes/edge_cases.go:229:3)
        *ast.ExprStmt (go-nodes/edge_cases.go:231:2)
          *ast.CallExpr (go-nodes/edge_cases.go:231:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:231:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:231:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:231:13) Kind: STRING Value: "    map[Key]string: %v\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:231:41) Name: complexMap
        *ast.ExprStmt (go-nodes/edge_cases.go:234:2)
          *ast.CallExpr (go-nodes/edge_cases.go:234:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:234:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:234:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:234:14) Kind: STRING Value: "  ✓ Multiple return unpacking:"
        *ast.AssignStmt (go-nodes/edge_cases.go:235:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:235:2) Name: x1
            *ast.Ident (go-nodes/edge_cases.go:235:6) Name: y1
          RHS:
            *ast.CallExpr (go-nodes/edge_cases.go:235:12)
              Fun:
                *ast.Ident (go-nodes/edge_cases.go:235:12) Name: swap
              Args:
                [0]:
                  *ast.BasicLit (go-nodes/edge_cases.go:235:17) Kind: INT Value: 10
                [1]:
                  *ast.BasicLit (go-nodes/edge_cases.go:235:21) Kind: INT Value: 20
        *ast.ExprStmt (go-nodes/edge_cases.go:236:2)
          *ast.CallExpr (go-nodes/edge_cases.go:236:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:236:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:236:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:236:13) Kind: STRING Value: "    swap(10, 20): %d, %d\n"
              [1]:
                *ast.Ident (go-nodes/edge_cases.go:236:43) Name: x1
              [2]:
                *ast.Ident (go-nodes/edge_cases.go:236:47) Name: y1
        *ast.ExprStmt (go-nodes/edge_cases.go:238:2)
          *ast.CallExpr (go-nodes/edge_cases.go:238:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:238:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:238:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:238:14) Kind: STRING Value: "Summary: Edge cases and special constructs AST node coverage"
        *ast.ExprStmt (go-nodes/edge_cases.go:239:2)
          *ast.CallExpr (go-nodes/edge_cases.go:239:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:239:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:239:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:239:14) Kind: STRING Value: "Primary AST Nodes: Various edge cases for all major node types"
        *ast.ExprStmt (go-nodes/edge_cases.go:240:2)
          *ast.CallExpr (go-nodes/edge_cases.go:240:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:240:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:240:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:240:14) Kind: STRING Value: "Features: unsafe, iota, complex nesting, edge cases, special patterns"
        *ast.ExprStmt (go-nodes/edge_cases.go:241:2)
          *ast.CallExpr (go-nodes/edge_cases.go:241:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:241:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:241:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:241:14) Kind: STRING Value: "========================================"
  *ast.FuncDecl (go-nodes/edge_cases.go:244:1)
    Name: variadicFunc
    Type:
      *ast.FuncType (go-nodes/edge_cases.go:244:1)
        Params:
          *ast.FieldList (go-nodes/edge_cases.go:244:18) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/edge_cases.go:244:19)
                Name: args
                Type:
                  *ast.Ellipsis (go-nodes/edge_cases.go:244:24)
    Body:
      *ast.BlockStmt (go-nodes/edge_cases.go:244:32) Stmts: 1
        *ast.ExprStmt (go-nodes/edge_cases.go:245:2)
          *ast.CallExpr (go-nodes/edge_cases.go:245:2)
            Fun:
              *ast.SelectorExpr (go-nodes/edge_cases.go:245:2)
                X:
                  *ast.Ident (go-nodes/edge_cases.go:245:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/edge_cases.go:245:13) Kind: STRING Value: "    Variadic received %d args\n"
              [1]:
                *ast.CallExpr (go-nodes/edge_cases.go:245:48)
                  Fun:
                    *ast.Ident (go-nodes/edge_cases.go:245:48) Name: len
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/edge_cases.go:245:52) Name: args
  *ast.GenDecl (go-nodes/edge_cases.go:248:1) Token: type
    *ast.TypeSpec (go-nodes/edge_cases.go:248:6)
      Name: T
      Type:
        *ast.StructType (go-nodes/edge_cases.go:248:8)
          *ast.FieldList (go-nodes/edge_cases.go:248:14) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/edge_cases.go:248:16)
                Name: v
                Type:
                  *ast.Ident (go-nodes/edge_cases.go:248:18) Name: int
  *ast.FuncDecl (go-nodes/edge_cases.go:250:1)
    Name: String
    Receiver:
      *ast.FieldList (go-nodes/edge_cases.go:250:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/edge_cases.go:250:7)
            Name: t
            Type:
              *ast.Ident (go-nodes/edge_cases.go:250:9) Name: T
    Type:
      *ast.FuncType (go-nodes/edge_cases.go:250:1)
        Params:
          *ast.FieldList (go-nodes/edge_cases.go:250:18) NumFields: 0
        Results:
          *ast.FieldList (go-nodes/edge_cases.go:250:21) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/edge_cases.go:250:21)
                Type:
                  *ast.Ident (go-nodes/edge_cases.go:250:21) Name: string
    Body:
      *ast.BlockStmt (go-nodes/edge_cases.go:250:28) Stmts: 1
        *ast.ReturnStmt (go-nodes/edge_cases.go:251:2)
          Result[0]:
            *ast.CallExpr (go-nodes/edge_cases.go:251:9)
              Fun:
                *ast.SelectorExpr (go-nodes/edge_cases.go:251:9)
                  X:
                    *ast.Ident (go-nodes/edge_cases.go:251:9) Name: fmt
                  Sel: Sprintf
              Args:
                [0]:
                  *ast.BasicLit (go-nodes/edge_cases.go:251:21) Kind: STRING Value: "T{%d}"
                [1]:
                  *ast.SelectorExpr (go-nodes/edge_cases.go:251:30)
                    X:
                      *ast.Ident (go-nodes/edge_cases.go:251:30) Name: t
                    Sel: v
  *ast.FuncDecl (go-nodes/edge_cases.go:254:1)
    Name: namedReturnModified
    Type:
      *ast.FuncType (go-nodes/edge_cases.go:254:1)
        Params:
          *ast.FieldList (go-nodes/edge_cases.go:254:25) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/edge_cases.go:254:26)
                Name: x
                Type:
                  *ast.Ident (go-nodes/edge_cases.go:254:28) Name: int
        Results:
          *ast.FieldList (go-nodes/edge_cases.go:254:33) NumFields: 2
            Field[0]:
              *ast.Field (go-nodes/edge_cases.go:254:34)
                Name: a
                Name: b
                Type:
                  *ast.Ident (go-nodes/edge_cases.go:254:39) Name: int
    Body:
      *ast.BlockStmt (go-nodes/edge_cases.go:254:44) Stmts: 4
        *ast.AssignStmt (go-nodes/edge_cases.go:255:2) Token: =
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:255:2) Name: a
          RHS:
            *ast.BinaryExpr (go-nodes/edge_cases.go:255:6) Op: *
              X:
                *ast.Ident (go-nodes/edge_cases.go:255:6) Name: x
              Y:
                *ast.BasicLit (go-nodes/edge_cases.go:255:10) Kind: INT Value: 2
        *ast.AssignStmt (go-nodes/edge_cases.go:256:2) Token: =
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:256:2) Name: b
          RHS:
            *ast.BinaryExpr (go-nodes/edge_cases.go:256:6) Op: *
              X:
                *ast.Ident (go-nodes/edge_cases.go:256:6) Name: x
              Y:
                *ast.BasicLit (go-nodes/edge_cases.go:256:10) Kind: INT Value: 3
        *ast.AssignStmt (go-nodes/edge_cases.go:257:2) Token: +=
          LHS:
            *ast.Ident (go-nodes/edge_cases.go:257:2) Name: a
          RHS:
            *ast.BasicLit (go-nodes/edge_cases.go:257:7) Kind: INT Value: 1
        *ast.ReturnStmt (go-nodes/edge_cases.go:258:2)
  *ast.FuncDecl (go-nodes/edge_cases.go:261:1)
    Name: swap
    Type:
      *ast.FuncType (go-nodes/edge_cases.go:261:1)
        Params:
          *ast.FieldList (go-nodes/edge_cases.go:261:10) NumFields: 2
            Field[0]:
              *ast.Field (go-nodes/edge_cases.go:261:11)
                Name: x
                Name: y
                Type:
                  *ast.Ident (go-nodes/edge_cases.go:261:16) Name: int
        Results:
          *ast.FieldList (go-nodes/edge_cases.go:261:21) NumFields: 2
            Field[0]:
              *ast.Field (go-nodes/edge_cases.go:261:22)
                Type:
                  *ast.Ident (go-nodes/edge_cases.go:261:22) Name: int
            Field[1]:
              *ast.Field (go-nodes/edge_cases.go:261:27)
                Type:
                  *ast.Ident (go-nodes/edge_cases.go:261:27) Name: int
    Body:
      *ast.BlockStmt (go-nodes/edge_cases.go:261:32) Stmts: 1
        *ast.ReturnStmt (go-nodes/edge_cases.go:262:2)
          Result[0]:
            *ast.Ident (go-nodes/edge_cases.go:262:9) Name: y
          Result[1]:
            *ast.Ident (go-nodes/edge_cases.go:262:12) Name: x
  *ast.FuncDecl (go-nodes/edge_cases.go:265:1)
    Name: main
    Type:
      *ast.FuncType (go-nodes/edge_cases.go:265:1)
        Params:
          *ast.FieldList (go-nodes/edge_cases.go:265:10) NumFields: 0
    Body:
      *ast.BlockStmt (go-nodes/edge_cases.go:265:13) Stmts: 1
        *ast.ExprStmt (go-nodes/edge_cases.go:266:2)
          *ast.CallExpr (go-nodes/edge_cases.go:266:2)
            Fun:
              *ast.Ident (go-nodes/edge_cases.go:266:2) Name: funcMain
