=== AST for comments.go ===

File Information:
  Package: main
  Position: go-nodes/comments.go:6:1
  Imports:
    "fmt"
  Comment Groups: 37
  Declarations: 12

=== AST Node Tree ===

*ast.File (go-nodes/comments.go:6:1)
  Package: main
  *ast.GenDecl (go-nodes/comments.go:8:1) Token: import
    *ast.ImportSpec (go-nodes/comments.go:8:8)
      Path: "fmt"
  *ast.GenDecl (go-nodes/comments.go:22:1) Token: const
    *ast.ValueSpec (go-nodes/comments.go:22:7)
      Name: DocumentedConst
      Value[0]:
        *ast.BasicLit (go-nodes/comments.go:22:25) Kind: INT Value: 42
  *ast.GenDecl (go-nodes/comments.go:28:1) Token: const
    *ast.ValueSpec (go-nodes/comments.go:28:7)
      Name: MultilineDocConst
      Value[0]:
        *ast.BasicLit (go-nodes/comments.go:28:27) Kind: INT Value: 100
  *ast.GenDecl (go-nodes/comments.go:31:1) Token: var
    *ast.ValueSpec (go-nodes/comments.go:31:5)
      Name: DocumentedVar
      Value[0]:
        *ast.BasicLit (go-nodes/comments.go:31:21) Kind: STRING Value: "value"
  *ast.GenDecl (go-nodes/comments.go:34:1) Token: type
    *ast.TypeSpec (go-nodes/comments.go:34:6)
      Name: DocumentedType
      Type:
        *ast.Ident (go-nodes/comments.go:34:21) Name: int
  *ast.GenDecl (go-nodes/comments.go:39:1) Token: type
    *ast.TypeSpec (go-nodes/comments.go:39:6)
      Name: DocumentedStruct
      Type:
        *ast.StructType (go-nodes/comments.go:39:23)
          *ast.FieldList (go-nodes/comments.go:39:30) NumFields: 3
            Field[0]:
              *ast.Field (go-nodes/comments.go:41:2)
                Name: Field1
                Type:
                  *ast.Ident (go-nodes/comments.go:41:9) Name: int
            Field[1]:
              *ast.Field (go-nodes/comments.go:47:2)
                Name: Field2
                Type:
                  *ast.Ident (go-nodes/comments.go:47:9) Name: string
            Field[2]:
              *ast.Field (go-nodes/comments.go:49:2)
                Name: Field3
                Type:
                  *ast.Ident (go-nodes/comments.go:49:9) Name: bool
  *ast.FuncDecl (go-nodes/comments.go:57:1)
    Name: DocumentedFunc
    Type:
      *ast.FuncType (go-nodes/comments.go:57:1)
        Params:
          *ast.FieldList (go-nodes/comments.go:57:20) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/comments.go:57:21)
                Name: x
                Type:
                  *ast.Ident (go-nodes/comments.go:57:23) Name: int
        Results:
          *ast.FieldList (go-nodes/comments.go:57:28) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/comments.go:57:28)
                Type:
                  *ast.Ident (go-nodes/comments.go:57:28) Name: int
    Body:
      *ast.BlockStmt (go-nodes/comments.go:57:32) Stmts: 2
        *ast.AssignStmt (go-nodes/comments.go:59:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/comments.go:59:2) Name: y
          RHS:
            *ast.BinaryExpr (go-nodes/comments.go:59:7) Op: *
              X:
                *ast.Ident (go-nodes/comments.go:59:7) Name: x
              Y:
                *ast.BasicLit (go-nodes/comments.go:59:11) Kind: INT Value: 2
        *ast.ReturnStmt (go-nodes/comments.go:65:2)
          Result[0]:
            *ast.Ident (go-nodes/comments.go:65:9) Name: y
  *ast.FuncDecl (go-nodes/comments.go:73:1)
    Name: BlockDocFunc
    Type:
      *ast.FuncType (go-nodes/comments.go:73:1)
        Params:
          *ast.FieldList (go-nodes/comments.go:73:18) NumFields: 0
        Results:
          *ast.FieldList (go-nodes/comments.go:73:21) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/comments.go:73:21)
                Type:
                  *ast.Ident (go-nodes/comments.go:73:21) Name: string
    Body:
      *ast.BlockStmt (go-nodes/comments.go:73:28) Stmts: 1
        *ast.ReturnStmt (go-nodes/comments.go:74:2)
          Result[0]:
            *ast.BasicLit (go-nodes/comments.go:74:9) Kind: STRING Value: "documented"
  *ast.FuncDecl (go-nodes/comments.go:77:1)
    Name: funcMain
    Type:
      *ast.FuncType (go-nodes/comments.go:77:1)
        Params:
          *ast.FieldList (go-nodes/comments.go:77:14) NumFields: 0
    Body:
      *ast.BlockStmt (go-nodes/comments.go:77:17) Stmts: 39
        *ast.ExprStmt (go-nodes/comments.go:78:2)
          *ast.CallExpr (go-nodes/comments.go:78:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:78:2)
                X:
                  *ast.Ident (go-nodes/comments.go:78:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:78:14) Kind: STRING Value: "=== comments.go AST Node Coverage ==="
        *ast.ExprStmt (go-nodes/comments.go:79:2)
          *ast.CallExpr (go-nodes/comments.go:79:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:79:2)
                X:
                  *ast.Ident (go-nodes/comments.go:79:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:79:14) Kind: STRING Value: "Exercising AST Nodes:"
        *ast.ExprStmt (go-nodes/comments.go:81:2)
          *ast.CallExpr (go-nodes/comments.go:81:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:81:2)
                X:
                  *ast.Ident (go-nodes/comments.go:81:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:81:14) Kind: STRING Value: "  ✓ ast.Comment (line comments //)"
        *ast.ExprStmt (go-nodes/comments.go:82:2)
          *ast.CallExpr (go-nodes/comments.go:82:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:82:2)
                X:
                  *ast.Ident (go-nodes/comments.go:82:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:82:14) Kind: STRING Value: "  ✓ ast.Comment (block comments /* */)"
        *ast.ExprStmt (go-nodes/comments.go:83:2)
          *ast.CallExpr (go-nodes/comments.go:83:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:83:2)
                X:
                  *ast.Ident (go-nodes/comments.go:83:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:83:14) Kind: STRING Value: "  ✓ ast.CommentGroup (documentation comments)"
        *ast.ExprStmt (go-nodes/comments.go:84:2)
          *ast.CallExpr (go-nodes/comments.go:84:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:84:2)
                X:
                  *ast.Ident (go-nodes/comments.go:84:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:84:14) Kind: STRING Value: "  ✓ Package-level doc comments"
        *ast.ExprStmt (go-nodes/comments.go:85:2)
          *ast.CallExpr (go-nodes/comments.go:85:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:85:2)
                X:
                  *ast.Ident (go-nodes/comments.go:85:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:85:14) Kind: STRING Value: "  ✓ Constant doc comments"
        *ast.ExprStmt (go-nodes/comments.go:86:2)
          *ast.CallExpr (go-nodes/comments.go:86:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:86:2)
                X:
                  *ast.Ident (go-nodes/comments.go:86:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:86:14) Kind: STRING Value: "  ✓ Variable doc comments"
        *ast.ExprStmt (go-nodes/comments.go:87:2)
          *ast.CallExpr (go-nodes/comments.go:87:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:87:2)
                X:
                  *ast.Ident (go-nodes/comments.go:87:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:87:14) Kind: STRING Value: "  ✓ Type doc comments"
        *ast.ExprStmt (go-nodes/comments.go:88:2)
          *ast.CallExpr (go-nodes/comments.go:88:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:88:2)
                X:
                  *ast.Ident (go-nodes/comments.go:88:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:88:14) Kind: STRING Value: "  ✓ Struct field comments"
        *ast.ExprStmt (go-nodes/comments.go:89:2)
          *ast.CallExpr (go-nodes/comments.go:89:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:89:2)
                X:
                  *ast.Ident (go-nodes/comments.go:89:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:89:14) Kind: STRING Value: "  ✓ Function doc comments"
        *ast.ExprStmt (go-nodes/comments.go:90:2)
          *ast.CallExpr (go-nodes/comments.go:90:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:90:2)
                X:
                  *ast.Ident (go-nodes/comments.go:90:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:90:14) Kind: STRING Value: "  ✓ Inline comments"
        *ast.ExprStmt (go-nodes/comments.go:91:2)
          *ast.CallExpr (go-nodes/comments.go:91:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:91:2)
                X:
                  *ast.Ident (go-nodes/comments.go:91:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:91:14) Kind: STRING Value: "  ✓ Internal comments (non-doc)"
        *ast.ExprStmt (go-nodes/comments.go:92:2)
          *ast.CallExpr (go-nodes/comments.go:92:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:92:2)
                X:
                  *ast.Ident (go-nodes/comments.go:92:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:92:14) Kind: STRING Value: "  ✓ Multi-paragraph doc comments"
        *ast.AssignStmt (go-nodes/comments.go:95:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/comments.go:95:2) Name: x
          RHS:
            *ast.BasicLit (go-nodes/comments.go:95:7) Kind: INT Value: 10
        *ast.AssignStmt (go-nodes/comments.go:98:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/comments.go:98:2) Name: y
          RHS:
            *ast.BasicLit (go-nodes/comments.go:98:7) Kind: INT Value: 20
        *ast.AssignStmt (go-nodes/comments.go:103:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/comments.go:103:2) Name: z
          RHS:
            *ast.BinaryExpr (go-nodes/comments.go:103:7) Op: +
              X:
                *ast.Ident (go-nodes/comments.go:103:7) Name: x
              Y:
                *ast.Ident (go-nodes/comments.go:103:11) Name: y
        *ast.IfStmt (go-nodes/comments.go:106:2)
          Cond:
            *ast.BinaryExpr (go-nodes/comments.go:106:5) Op: >
              X:
                *ast.Ident (go-nodes/comments.go:106:5) Name: z
              Y:
                *ast.BasicLit (go-nodes/comments.go:106:9) Kind: INT Value: 0
          Body:
            *ast.BlockStmt (go-nodes/comments.go:106:11) Stmts: 1
              *ast.ExprStmt (go-nodes/comments.go:108:3)
                *ast.CallExpr (go-nodes/comments.go:108:3)
                  Fun:
                    *ast.SelectorExpr (go-nodes/comments.go:108:3)
                      X:
                        *ast.Ident (go-nodes/comments.go:108:3) Name: fmt
                      Sel: Printf
                  Args:
                    [0]:
                      *ast.BasicLit (go-nodes/comments.go:108:14) Kind: STRING Value: "    z = %d\n"
                    [1]:
                      *ast.Ident (go-nodes/comments.go:108:30) Name: z
        *ast.ForStmt (go-nodes/comments.go:112:2)
          Init:
            *ast.AssignStmt (go-nodes/comments.go:112:6) Token: :=
              LHS:
                *ast.Ident (go-nodes/comments.go:112:6) Name: i
              RHS:
                *ast.BasicLit (go-nodes/comments.go:112:11) Kind: INT Value: 0
          Cond:
            *ast.BinaryExpr (go-nodes/comments.go:112:14) Op: <
              X:
                *ast.Ident (go-nodes/comments.go:112:14) Name: i
              Y:
                *ast.BasicLit (go-nodes/comments.go:112:18) Kind: INT Value: 3
          Post:
            *ast.IncDecStmt (go-nodes/comments.go:112:21)
          Body:
            *ast.BlockStmt (go-nodes/comments.go:112:25) Stmts: 1
              *ast.AssignStmt (go-nodes/comments.go:114:3) Token: =
                LHS:
                  *ast.Ident (go-nodes/comments.go:114:3) Name: _
                RHS:
                  *ast.Ident (go-nodes/comments.go:114:7) Name: i
        *ast.SwitchStmt (go-nodes/comments.go:118:2)
        *ast.ExprStmt (go-nodes/comments.go:127:2)
          *ast.CallExpr (go-nodes/comments.go:127:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:127:2)
                X:
                  *ast.Ident (go-nodes/comments.go:127:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:127:14) Kind: STRING Value: "  ✓ Comment positions:"
        *ast.ExprStmt (go-nodes/comments.go:128:2)
          *ast.CallExpr (go-nodes/comments.go:128:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:128:2)
                X:
                  *ast.Ident (go-nodes/comments.go:128:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:128:14) Kind: STRING Value: "    - Package level"
        *ast.ExprStmt (go-nodes/comments.go:129:2)
          *ast.CallExpr (go-nodes/comments.go:129:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:129:2)
                X:
                  *ast.Ident (go-nodes/comments.go:129:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:129:14) Kind: STRING Value: "    - Declaration level"
        *ast.ExprStmt (go-nodes/comments.go:130:2)
          *ast.CallExpr (go-nodes/comments.go:130:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:130:2)
                X:
                  *ast.Ident (go-nodes/comments.go:130:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:130:14) Kind: STRING Value: "    - Field level"
        *ast.ExprStmt (go-nodes/comments.go:131:2)
          *ast.CallExpr (go-nodes/comments.go:131:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:131:2)
                X:
                  *ast.Ident (go-nodes/comments.go:131:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:131:14) Kind: STRING Value: "    - Statement level"
        *ast.ExprStmt (go-nodes/comments.go:132:2)
          *ast.CallExpr (go-nodes/comments.go:132:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:132:2)
                X:
                  *ast.Ident (go-nodes/comments.go:132:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:132:14) Kind: STRING Value: "    - Inline"
        *ast.ExprStmt (go-nodes/comments.go:139:2)
          *ast.CallExpr (go-nodes/comments.go:139:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:139:2)
                X:
                  *ast.Ident (go-nodes/comments.go:139:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:139:14) Kind: STRING Value: "  ✓ Special comment markers (TODO, FIXME, NOTE, BUG)"
        *ast.ExprStmt (go-nodes/comments.go:145:2)
          *ast.CallExpr (go-nodes/comments.go:145:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:145:2)
                X:
                  *ast.Ident (go-nodes/comments.go:145:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:145:14) Kind: STRING Value: "  ✓ Comments with special characters"
        *ast.ExprStmt (go-nodes/comments.go:151:2)
          *ast.CallExpr (go-nodes/comments.go:151:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:151:2)
                X:
                  *ast.Ident (go-nodes/comments.go:151:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:151:14) Kind: STRING Value: "  ✓ Documentation with examples"
        *ast.AssignStmt (go-nodes/comments.go:153:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/comments.go:153:2) Name: result
          RHS:
            *ast.CallExpr (go-nodes/comments.go:153:12)
              Fun:
                *ast.Ident (go-nodes/comments.go:153:12) Name: DocumentedFunc
              Args:
                [0]:
                  *ast.BasicLit (go-nodes/comments.go:153:27) Kind: INT Value: 5
        *ast.AssignStmt (go-nodes/comments.go:154:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/comments.go:154:2) Name: str
          RHS:
            *ast.CallExpr (go-nodes/comments.go:154:9)
              Fun:
                *ast.Ident (go-nodes/comments.go:154:9) Name: BlockDocFunc
        *ast.ExprStmt (go-nodes/comments.go:155:2)
          *ast.CallExpr (go-nodes/comments.go:155:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:155:2)
                X:
                  *ast.Ident (go-nodes/comments.go:155:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:155:13) Kind: STRING Value: "    DocumentedFunc(5) = %d\n"
              [1]:
                *ast.Ident (go-nodes/comments.go:155:45) Name: result
        *ast.ExprStmt (go-nodes/comments.go:156:2)
          *ast.CallExpr (go-nodes/comments.go:156:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:156:2)
                X:
                  *ast.Ident (go-nodes/comments.go:156:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:156:13) Kind: STRING Value: "    BlockDocFunc() = %s\n"
              [1]:
                *ast.Ident (go-nodes/comments.go:156:42) Name: str
        *ast.AssignStmt (go-nodes/comments.go:159:2) Token: :=
          LHS:
            *ast.Ident (go-nodes/comments.go:159:2) Name: s
          RHS:
            *ast.CompositeLit (go-nodes/comments.go:159:7)
              Type:
                *ast.Ident (go-nodes/comments.go:159:7) Name: DocumentedStruct
              Elts:
                [0]:
                  *ast.KeyValueExpr (go-nodes/comments.go:160:3)
                [1]:
                  *ast.KeyValueExpr (go-nodes/comments.go:161:3)
                [2]:
                  *ast.KeyValueExpr (go-nodes/comments.go:162:3)
        *ast.ExprStmt (go-nodes/comments.go:164:2)
          *ast.CallExpr (go-nodes/comments.go:164:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:164:2)
                X:
                  *ast.Ident (go-nodes/comments.go:164:2) Name: fmt
                Sel: Printf
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:164:13) Kind: STRING Value: "    DocumentedStruct: %+v\n"
              [1]:
                *ast.Ident (go-nodes/comments.go:164:44) Name: s
        *ast.ExprStmt (go-nodes/comments.go:166:2)
          *ast.CallExpr (go-nodes/comments.go:166:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:166:2)
                X:
                  *ast.Ident (go-nodes/comments.go:166:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:166:14) Kind: STRING Value: "Summary: Comprehensive comment AST node coverage"
        *ast.ExprStmt (go-nodes/comments.go:167:2)
          *ast.CallExpr (go-nodes/comments.go:167:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:167:2)
                X:
                  *ast.Ident (go-nodes/comments.go:167:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:167:14) Kind: STRING Value: "Primary AST Nodes: ast.Comment, ast.CommentGroup"
        *ast.ExprStmt (go-nodes/comments.go:168:2)
          *ast.CallExpr (go-nodes/comments.go:168:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:168:2)
                X:
                  *ast.Ident (go-nodes/comments.go:168:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:168:14) Kind: STRING Value: "Features: line comments, block comments, doc comments, inline comments"
        *ast.ExprStmt (go-nodes/comments.go:169:2)
          *ast.CallExpr (go-nodes/comments.go:169:2)
            Fun:
              *ast.SelectorExpr (go-nodes/comments.go:169:2)
                X:
                  *ast.Ident (go-nodes/comments.go:169:2) Name: fmt
                Sel: Println
            Args:
              [0]:
                *ast.BasicLit (go-nodes/comments.go:169:14) Kind: STRING Value: "========================================"
  *ast.FuncDecl (go-nodes/comments.go:173:1)
    Name: Method
    Receiver:
      *ast.FieldList (go-nodes/comments.go:173:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/comments.go:173:7)
            Name: d
            Type:
              *ast.Ident (go-nodes/comments.go:173:9) Name: DocumentedType
    Type:
      *ast.FuncType (go-nodes/comments.go:173:1)
        Params:
          *ast.FieldList (go-nodes/comments.go:173:31) NumFields: 0
        Results:
          *ast.FieldList (go-nodes/comments.go:173:34) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/comments.go:173:34)
                Type:
                  *ast.Ident (go-nodes/comments.go:173:34) Name: int
    Body:
      *ast.BlockStmt (go-nodes/comments.go:173:38) Stmts: 1
        *ast.ReturnStmt (go-nodes/comments.go:175:2)
          Result[0]:
            *ast.BinaryExpr (go-nodes/comments.go:175:9) Op: *
              X:
                *ast.CallExpr (go-nodes/comments.go:175:9)
                  Fun:
                    *ast.Ident (go-nodes/comments.go:175:9) Name: int
                  Args:
                    [0]:
                      *ast.Ident (go-nodes/comments.go:175:13) Name: d
              Y:
                *ast.BasicLit (go-nodes/comments.go:175:18) Kind: INT Value: 2
  *ast.FuncDecl (go-nodes/comments.go:181:1)
    Name: BlockMethod
    Receiver:
      *ast.FieldList (go-nodes/comments.go:181:6) NumFields: 1
        Field[0]:
          *ast.Field (go-nodes/comments.go:181:7)
            Name: d
            Type:
              *ast.Ident (go-nodes/comments.go:181:9) Name: DocumentedType
    Type:
      *ast.FuncType (go-nodes/comments.go:181:1)
        Params:
          *ast.FieldList (go-nodes/comments.go:181:36) NumFields: 0
        Results:
          *ast.FieldList (go-nodes/comments.go:181:39) NumFields: 1
            Field[0]:
              *ast.Field (go-nodes/comments.go:181:39)
                Type:
                  *ast.Ident (go-nodes/comments.go:181:39) Name: string
    Body:
      *ast.BlockStmt (go-nodes/comments.go:181:46) Stmts: 1
        *ast.ReturnStmt (go-nodes/comments.go:182:2)
          Result[0]:
            *ast.BasicLit (go-nodes/comments.go:182:9) Kind: STRING Value: "block"
  *ast.FuncDecl (go-nodes/comments.go:185:1)
    Name: main
    Type:
      *ast.FuncType (go-nodes/comments.go:185:1)
        Params:
          *ast.FieldList (go-nodes/comments.go:185:10) NumFields: 0
    Body:
      *ast.BlockStmt (go-nodes/comments.go:185:13) Stmts: 1
        *ast.ExprStmt (go-nodes/comments.go:186:2)
          *ast.CallExpr (go-nodes/comments.go:186:2)
            Fun:
              *ast.Ident (go-nodes/comments.go:186:2) Name: funcMain
